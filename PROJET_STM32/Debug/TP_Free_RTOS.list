
TP_Free_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006b30  08006b30  00007b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd0  08006bd0  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd0  08006bd0  00007bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd8  08006bd8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd8  08006bd8  00007bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bdc  08006bdc  00007bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006be0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000374c  2000006c  08006c4c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037b8  08006c4c  000087b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8cb  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c9f  00000000  00000000  00025967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00029608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001322  00000000  00000000  0002aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a67  00000000  00000000  0002c1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b81a  00000000  00000000  00030c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2615  00000000  00000000  0004c453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ea68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb8  00000000  00000000  0011eaac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00125964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006b18 	.word	0x08006b18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08006b18 	.word	0x08006b18

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <__io_putchar>:
void task_switch_LED(void * pvParameters);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000518:	1d39      	adds	r1, r7, #4
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	2201      	movs	r2, #1
 8000520:	4803      	ldr	r0, [pc, #12]	@ (8000530 <__io_putchar+0x20>)
 8000522:	f002 f993 	bl	800284c <HAL_UART_Transmit>
	return ch;
 8000526:	687b      	ldr	r3, [r7, #4]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000088 	.word	0x20000088

08000534 <LED_Init>:

void LED_Init(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2120      	movs	r1, #32
 800053c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000540:	f000 fdd8 	bl	80010f4 <HAL_GPIO_WritePin>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fb39 	bl	8000bc2 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Init();
 8000550:	f7ff fff0 	bl	8000534 <LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f818 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f8ac 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055c:	f000 f85e 	bl	800061c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000560:	f003 f834 	bl	80035cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000564:	4a05      	ldr	r2, [pc, #20]	@ (800057c <main+0x34>)
 8000566:	2100      	movs	r1, #0
 8000568:	4805      	ldr	r0, [pc, #20]	@ (8000580 <main+0x38>)
 800056a:	f003 f879 	bl	8003660 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a04      	ldr	r2, [pc, #16]	@ (8000584 <main+0x3c>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f003 f84e 	bl	8003614 <osKernelStart>
		  (void *) DELAY,
		  tskIDLE_PRIORITY,
		  &xHandle1);
  vTaskStartScheduler();*/

  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x30>
 800057c:	08006b6c 	.word	0x08006b6c
 8000580:	08000781 	.word	0x08000781
 8000584:	2000011c 	.word	0x2000011c

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	@ 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	2238      	movs	r2, #56	@ 0x38
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 ffa6 	bl	80064e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 fdd4 	bl	8001158 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	2303      	movs	r3, #3
 80005c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005c2:	2306      	movs	r3, #6
 80005c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005c6:	2355      	movs	r3, #85	@ 0x55
 80005c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fe70 	bl	80012c0 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005e6:	f000 f8f3 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2303      	movs	r3, #3
 80005f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2104      	movs	r1, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f96e 	bl	80018e4 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800060e:	f000 f8df 	bl	80007d0 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	@ 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 8000622:	4a23      	ldr	r2, [pc, #140]	@ (80006b0 <MX_USART2_UART_Init+0x94>)
 8000624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 8000660:	2200      	movs	r2, #0
 8000662:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000664:	4811      	ldr	r0, [pc, #68]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 8000666:	f002 f8a1 	bl	80027ac <HAL_UART_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000670:	f000 f8ae 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000674:	2100      	movs	r1, #0
 8000676:	480d      	ldr	r0, [pc, #52]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 8000678:	f002 fe9a 	bl	80033b0 <HAL_UARTEx_SetTxFifoThreshold>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000682:	f000 f8a5 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 800068a:	f002 fecf 	bl	800342c <HAL_UARTEx_SetRxFifoThreshold>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000694:	f000 f89c 	bl	80007d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_USART2_UART_Init+0x90>)
 800069a:	f002 fe50 	bl	800333e <HAL_UARTEx_DisableFifoMode>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006a4:	f000 f894 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000088 	.word	0x20000088
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a2a      	ldr	r2, [pc, #168]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a24      	ldr	r2, [pc, #144]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006e8:	f043 0320 	orr.w	r3, r3, #32
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0320 	and.w	r3, r3, #32
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000778 <MX_GPIO_Init+0xc4>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <MX_GPIO_Init+0xc4>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000732:	f000 fcdf 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800073c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <MX_GPIO_Init+0xc8>)
 800074e:	f000 fb4f 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Output_Pin */
  GPIO_InitStruct.Pin = LED_Output_Pin;
 8000752:	2320      	movs	r3, #32
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Output_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076c:	f000 fb40 	bl	8000df0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	48000800 	.word	0x48000800

08000780 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Block for 100ms. */
  const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 8000788:	2364      	movs	r3, #100	@ 0x64
 800078a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800078c:	2120      	movs	r1, #32
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f000 fcc7 	bl	8001124 <HAL_GPIO_TogglePin>
	printf("LED Toggle\r\n");
 8000796:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <StartDefaultTask+0x28>)
 8000798:	f005 fdc6 	bl	8006328 <puts>
	vTaskDelay(xDelay);
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	f003 ff91 	bl	80046c4 <vTaskDelay>
  {
 80007a2:	bf00      	nop
 80007a4:	e7f2      	b.n	800078c <StartDefaultTask+0xc>
 80007a6:	bf00      	nop
 80007a8:	08006b48 	.word	0x08006b48

080007ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d101      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007be:	f000 fa19 	bl	8000bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40012c00 	.word	0x40012c00

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <Error_Handler+0x8>

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <HAL_MspInit+0x50>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e6:	4a11      	ldr	r2, [pc, #68]	@ (800082c <HAL_MspInit+0x50>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <HAL_MspInit+0x50>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <HAL_MspInit+0x50>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fe:	4a0b      	ldr	r2, [pc, #44]	@ (800082c <HAL_MspInit+0x50>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6593      	str	r3, [r2, #88]	@ 0x58
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <HAL_MspInit+0x50>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 fac1 	bl	8000da0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800081e:	f000 fd3f 	bl	80012a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09a      	sub	sp, #104	@ 0x68
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	2244      	movs	r2, #68	@ 0x44
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f005 fe49 	bl	80064e8 <memset>
  if(huart->Instance==USART2)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a1f      	ldr	r2, [pc, #124]	@ (80008d8 <HAL_UART_MspInit+0xa8>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d136      	bne.n	80008ce <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fa87 	bl	8001d80 <HAL_RCCEx_PeriphCLKConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000878:	f7ff ffaa 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <HAL_UART_MspInit+0xac>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000880:	4a16      	ldr	r2, [pc, #88]	@ (80008dc <HAL_UART_MspInit+0xac>)
 8000882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000886:	6593      	str	r3, [r2, #88]	@ 0x58
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <HAL_UART_MspInit+0xac>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <HAL_UART_MspInit+0xac>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000898:	4a10      	ldr	r2, [pc, #64]	@ (80008dc <HAL_UART_MspInit+0xac>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_UART_MspInit+0xac>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ac:	230c      	movs	r3, #12
 80008ae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008bc:	2307      	movs	r3, #7
 80008be:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008c4:	4619      	mov	r1, r3
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ca:	f000 fa91 	bl	8000df0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ce:	bf00      	nop
 80008d0:	3768      	adds	r7, #104	@ 0x68
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	@ 0x30
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008f0:	4b2c      	ldr	r3, [pc, #176]	@ (80009a4 <HAL_InitTick+0xc4>)
 80008f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f4:	4a2b      	ldr	r2, [pc, #172]	@ (80009a4 <HAL_InitTick+0xc4>)
 80008f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80008fc:	4b29      	ldr	r3, [pc, #164]	@ (80009a4 <HAL_InitTick+0xc4>)
 80008fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000908:	f107 020c 	add.w	r2, r7, #12
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f001 f9bc 	bl	8001c90 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000918:	f001 f9a4 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 800091c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	4a21      	ldr	r2, [pc, #132]	@ (80009a8 <HAL_InitTick+0xc8>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	0c9b      	lsrs	r3, r3, #18
 8000928:	3b01      	subs	r3, #1
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800092c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <HAL_InitTick+0xcc>)
 800092e:	4a20      	ldr	r2, [pc, #128]	@ (80009b0 <HAL_InitTick+0xd0>)
 8000930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000932:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <HAL_InitTick+0xcc>)
 8000934:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000938:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800093a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ac <HAL_InitTick+0xcc>)
 800093c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000940:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <HAL_InitTick+0xcc>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <HAL_InitTick+0xcc>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800094c:	4817      	ldr	r0, [pc, #92]	@ (80009ac <HAL_InitTick+0xcc>)
 800094e:	f001 fc07 	bl	8002160 <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000958:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800095c:	2b00      	cmp	r3, #0
 800095e:	d11b      	bne.n	8000998 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000960:	4812      	ldr	r0, [pc, #72]	@ (80009ac <HAL_InitTick+0xcc>)
 8000962:	f001 fc5f 	bl	8002224 <HAL_TIM_Base_Start_IT>
 8000966:	4603      	mov	r3, r0
 8000968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800096c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000970:	2b00      	cmp	r3, #0
 8000972:	d111      	bne.n	8000998 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000974:	2019      	movs	r0, #25
 8000976:	f000 fa2d 	bl	8000dd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d808      	bhi.n	8000992 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	2019      	movs	r0, #25
 8000986:	f000 fa0b 	bl	8000da0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <HAL_InitTick+0xd4>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e002      	b.n	8000998 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800099c:	4618      	mov	r0, r3
 800099e:	3730      	adds	r7, #48	@ 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	431bde83 	.word	0x431bde83
 80009ac:	20000120 	.word	0x20000120
 80009b0:	40012c00 	.word	0x40012c00
 80009b4:	20000004 	.word	0x20000004

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <NMI_Handler+0x4>

080009c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <UsageFault_Handler+0x4>

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009f6:	f001 fc7f 	bl	80022f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000120 	.word	0x20000120

08000a04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e00a      	b.n	8000a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a16:	f3af 8000 	nop.w
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	60ba      	str	r2, [r7, #8]
 8000a22:	b2ca      	uxtb	r2, r1
 8000a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf0      	blt.n	8000a16 <_read+0x12>
  }

  return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e009      	b.n	8000a64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fd59 	bl	8000510 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf1      	blt.n	8000a50 <_write+0x12>
  }
  return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_close>:

int _close(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_isatty>:

int _isatty(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	@ (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f005 fd8e 	bl	8006630 <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20008000 	.word	0x20008000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	2000016c 	.word	0x2000016c
 8000b48:	200037b8 	.word	0x200037b8

08000b4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b72:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b74:	f7ff ffea 	bl	8000b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	@ (8000bb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb4 <LoopForever+0xe>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	@ (8000bbc <LoopForever+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f005 fd4d 	bl	800663c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba2:	f7ff fcd1 	bl	8000548 <main>

08000ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba6:	e7fe      	b.n	8000ba6 <LoopForever>
  ldr   r0, =_estack
 8000ba8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000bb4:	08006be0 	.word	0x08006be0
  ldr r2, =_sbss
 8000bb8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000bbc:	200037b8 	.word	0x200037b8

08000bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_2_IRQHandler>

08000bc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f8dc 	bl	8000d8a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f7ff fe84 	bl	80008e0 <HAL_InitTick>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	e001      	b.n	8000be8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be4:	f7ff fdfa 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be8:	79fb      	ldrb	r3, [r7, #7]

}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <HAL_IncTick+0x1c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <HAL_IncTick+0x20>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a03      	ldr	r2, [pc, #12]	@ (8000c10 <HAL_IncTick+0x1c>)
 8000c04:	6013      	str	r3, [r2, #0]
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	20000170 	.word	0x20000170
 8000c14:	20000008 	.word	0x20000008

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000170 	.word	0x20000170

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	@ (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff4c 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dae:	f7ff ff63 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000db2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	68b9      	ldr	r1, [r7, #8]
 8000db8:	6978      	ldr	r0, [r7, #20]
 8000dba:	f7ff ffb3 	bl	8000d24 <NVIC_EncodePriority>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff82 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff56 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dfe:	e15a      	b.n	80010b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 814c 	beq.w	80010b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d005      	beq.n	8000e30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d130      	bne.n	8000e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e66:	2201      	movs	r2, #1
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	091b      	lsrs	r3, r3, #4
 8000e7c:	f003 0201 	and.w	r2, r3, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d017      	beq.n	8000ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d123      	bne.n	8000f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	08da      	lsrs	r2, r3, #3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3208      	adds	r2, #8
 8000ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	691a      	ldr	r2, [r3, #16]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	6939      	ldr	r1, [r7, #16]
 8000f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0203 	and.w	r2, r3, #3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 80a6 	beq.w	80010b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f64:	4b5b      	ldr	r3, [pc, #364]	@ (80010d4 <HAL_GPIO_Init+0x2e4>)
 8000f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f68:	4a5a      	ldr	r2, [pc, #360]	@ (80010d4 <HAL_GPIO_Init+0x2e4>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f70:	4b58      	ldr	r3, [pc, #352]	@ (80010d4 <HAL_GPIO_Init+0x2e4>)
 8000f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7c:	4a56      	ldr	r2, [pc, #344]	@ (80010d8 <HAL_GPIO_Init+0x2e8>)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	220f      	movs	r2, #15
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fa6:	d01f      	beq.n	8000fe8 <HAL_GPIO_Init+0x1f8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a4c      	ldr	r2, [pc, #304]	@ (80010dc <HAL_GPIO_Init+0x2ec>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d019      	beq.n	8000fe4 <HAL_GPIO_Init+0x1f4>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a4b      	ldr	r2, [pc, #300]	@ (80010e0 <HAL_GPIO_Init+0x2f0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d013      	beq.n	8000fe0 <HAL_GPIO_Init+0x1f0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a4a      	ldr	r2, [pc, #296]	@ (80010e4 <HAL_GPIO_Init+0x2f4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d00d      	beq.n	8000fdc <HAL_GPIO_Init+0x1ec>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a49      	ldr	r2, [pc, #292]	@ (80010e8 <HAL_GPIO_Init+0x2f8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0x1e8>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a48      	ldr	r2, [pc, #288]	@ (80010ec <HAL_GPIO_Init+0x2fc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_GPIO_Init+0x1e4>
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	e00a      	b.n	8000fea <HAL_GPIO_Init+0x1fa>
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	e008      	b.n	8000fea <HAL_GPIO_Init+0x1fa>
 8000fd8:	2304      	movs	r3, #4
 8000fda:	e006      	b.n	8000fea <HAL_GPIO_Init+0x1fa>
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e004      	b.n	8000fea <HAL_GPIO_Init+0x1fa>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e002      	b.n	8000fea <HAL_GPIO_Init+0x1fa>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <HAL_GPIO_Init+0x1fa>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	f002 0203 	and.w	r2, r2, #3
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	4093      	lsls	r3, r2
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ffa:	4937      	ldr	r1, [pc, #220]	@ (80010d8 <HAL_GPIO_Init+0x2e8>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001008:	4b39      	ldr	r3, [pc, #228]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800102c:	4a30      	ldr	r2, [pc, #192]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001032:	4b2f      	ldr	r3, [pc, #188]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001056:	4a26      	ldr	r2, [pc, #152]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800105c:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001080:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010aa:	4a11      	ldr	r2, [pc, #68]	@ (80010f0 <HAL_GPIO_Init+0x300>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f47f ae9d 	bne.w	8000e00 <HAL_GPIO_Init+0x10>
  }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	48000800 	.word	0x48000800
 80010e4:	48000c00 	.word	0x48000c00
 80010e8:	48001000 	.word	0x48001000
 80010ec:	48001400 	.word	0x48001400
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
 8001100:	4613      	mov	r3, r2
 8001102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001110:	e002      	b.n	8001118 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4013      	ands	r3, r2
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43d9      	mvns	r1, r3
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	400b      	ands	r3, r1
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d141      	bne.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001166:	4b4b      	ldr	r3, [pc, #300]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800116e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001172:	d131      	bne.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001174:	4b47      	ldr	r3, [pc, #284]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800117a:	4a46      	ldr	r2, [pc, #280]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	4b43      	ldr	r3, [pc, #268]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800118c:	4a41      	ldr	r2, [pc, #260]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001192:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001194:	4b40      	ldr	r3, [pc, #256]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2232      	movs	r2, #50	@ 0x32
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	4a3f      	ldr	r2, [pc, #252]	@ (800129c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	0c9b      	lsrs	r3, r3, #18
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011aa:	e002      	b.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b2:	4b38      	ldr	r3, [pc, #224]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011be:	d102      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f2      	bne.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011c6:	4b33      	ldr	r3, [pc, #204]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d2:	d158      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e057      	b.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011de:	4a2d      	ldr	r2, [pc, #180]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011e8:	e04d      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011f0:	d141      	bne.n	8001276 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f2:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011fe:	d131      	bne.n	8001264 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001200:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001206:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001210:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001218:	4a1e      	ldr	r2, [pc, #120]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001220:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2232      	movs	r2, #50	@ 0x32
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	4a1c      	ldr	r2, [pc, #112]	@ (800129c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	0c9b      	lsrs	r3, r3, #18
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001236:	e002      	b.n	800123e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3b01      	subs	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800124a:	d102      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f2      	bne.n	8001238 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800125e:	d112      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e011      	b.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001270:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001274:	e007      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001276:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001280:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001284:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	40007000 	.word	0x40007000
 8001298:	20000000 	.word	0x20000000
 800129c:	431bde83 	.word	0x431bde83

080012a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ae:	6093      	str	r3, [r2, #8]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40007000 	.word	0x40007000

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e2fe      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d075      	beq.n	80013ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012de:	4b97      	ldr	r3, [pc, #604]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e8:	4b94      	ldr	r3, [pc, #592]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	d102      	bne.n	80012fe <HAL_RCC_OscConfig+0x3e>
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d002      	beq.n	8001304 <HAL_RCC_OscConfig+0x44>
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2b08      	cmp	r3, #8
 8001302:	d10b      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	4b8d      	ldr	r3, [pc, #564]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d05b      	beq.n	80013c8 <HAL_RCC_OscConfig+0x108>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d157      	bne.n	80013c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e2d9      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001324:	d106      	bne.n	8001334 <HAL_RCC_OscConfig+0x74>
 8001326:	4b85      	ldr	r3, [pc, #532]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a84      	ldr	r2, [pc, #528]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e01d      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x98>
 800133e:	4b7f      	ldr	r3, [pc, #508]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a7e      	ldr	r2, [pc, #504]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b7c      	ldr	r3, [pc, #496]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a7b      	ldr	r2, [pc, #492]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001358:	4b78      	ldr	r3, [pc, #480]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a77      	ldr	r2, [pc, #476]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b75      	ldr	r3, [pc, #468]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a74      	ldr	r2, [pc, #464]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fc4e 	bl	8000c18 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fc4a 	bl	8000c18 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	@ 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e29e      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001392:	4b6a      	ldr	r3, [pc, #424]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xc0>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc3a 	bl	8000c18 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fc36 	bl	8000c18 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	@ 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e28a      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ba:	4b60      	ldr	r3, [pc, #384]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0xe8>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d075      	beq.n	80014c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d6:	4b59      	ldr	r3, [pc, #356]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e0:	4b56      	ldr	r3, [pc, #344]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b0c      	cmp	r3, #12
 80013ee:	d102      	bne.n	80013f6 <HAL_RCC_OscConfig+0x136>
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d002      	beq.n	80013fc <HAL_RCC_OscConfig+0x13c>
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d11f      	bne.n	800143c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013fc:	4b4f      	ldr	r3, [pc, #316]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x154>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e25d      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001414:	4b49      	ldr	r3, [pc, #292]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	061b      	lsls	r3, r3, #24
 8001422:	4946      	ldr	r1, [pc, #280]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001428:	4b45      	ldr	r3, [pc, #276]	@ (8001540 <HAL_RCC_OscConfig+0x280>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fa57 	bl	80008e0 <HAL_InitTick>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d043      	beq.n	80014c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e249      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d023      	beq.n	800148c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001444:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a3c      	ldr	r2, [pc, #240]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fbe2 	bl	8000c18 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fbde 	bl	8000c18 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e232      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800146a:	4b34      	ldr	r3, [pc, #208]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001476:	4b31      	ldr	r3, [pc, #196]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	061b      	lsls	r3, r3, #24
 8001484:	492d      	ldr	r1, [pc, #180]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
 800148a:	e01a      	b.n	80014c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148c:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a2a      	ldr	r2, [pc, #168]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001492:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fbbe 	bl	8000c18 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fbba 	bl	8000c18 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e20e      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b2:	4b22      	ldr	r3, [pc, #136]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1e0>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d041      	beq.n	8001552 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d01c      	beq.n	8001510 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014dc:	4a17      	ldr	r2, [pc, #92]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb97 	bl	8000c18 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fb93 	bl	8000c18 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e1e7      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0ef      	beq.n	80014ee <HAL_RCC_OscConfig+0x22e>
 800150e:	e020      	b.n	8001552 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001516:	4a09      	ldr	r2, [pc, #36]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fb7a 	bl	8000c18 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001526:	e00d      	b.n	8001544 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fb76 	bl	8000c18 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d906      	bls.n	8001544 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1ca      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001544:	4b8c      	ldr	r3, [pc, #560]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ea      	bne.n	8001528 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80a6 	beq.w	80016ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001564:	4b84      	ldr	r3, [pc, #528]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_OscConfig+0x2b4>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x2b6>
 8001574:	2300      	movs	r3, #0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00d      	beq.n	8001596 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b7f      	ldr	r3, [pc, #508]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	4a7e      	ldr	r2, [pc, #504]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	6593      	str	r3, [r2, #88]	@ 0x58
 8001586:	4b7c      	ldr	r3, [pc, #496]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001592:	2301      	movs	r3, #1
 8001594:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001596:	4b79      	ldr	r3, [pc, #484]	@ (800177c <HAL_RCC_OscConfig+0x4bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d118      	bne.n	80015d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a2:	4b76      	ldr	r3, [pc, #472]	@ (800177c <HAL_RCC_OscConfig+0x4bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a75      	ldr	r2, [pc, #468]	@ (800177c <HAL_RCC_OscConfig+0x4bc>)
 80015a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fb33 	bl	8000c18 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b6:	f7ff fb2f 	bl	8000c18 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e183      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c8:	4b6c      	ldr	r3, [pc, #432]	@ (800177c <HAL_RCC_OscConfig+0x4bc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d108      	bne.n	80015ee <HAL_RCC_OscConfig+0x32e>
 80015dc:	4b66      	ldr	r3, [pc, #408]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015e2:	4a65      	ldr	r2, [pc, #404]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015ec:	e024      	b.n	8001638 <HAL_RCC_OscConfig+0x378>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d110      	bne.n	8001618 <HAL_RCC_OscConfig+0x358>
 80015f6:	4b60      	ldr	r3, [pc, #384]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 80015f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fc:	4a5e      	ldr	r2, [pc, #376]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001606:	4b5c      	ldr	r3, [pc, #368]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160c:	4a5a      	ldr	r2, [pc, #360]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001616:	e00f      	b.n	8001638 <HAL_RCC_OscConfig+0x378>
 8001618:	4b57      	ldr	r3, [pc, #348]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 800161a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800161e:	4a56      	ldr	r2, [pc, #344]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001628:	4b53      	ldr	r3, [pc, #332]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162e:	4a52      	ldr	r2, [pc, #328]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001630:	f023 0304 	bic.w	r3, r3, #4
 8001634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d016      	beq.n	800166e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff faea 	bl	8000c18 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff fae6 	bl	8000c18 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e138      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800165e:	4b46      	ldr	r3, [pc, #280]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0ed      	beq.n	8001648 <HAL_RCC_OscConfig+0x388>
 800166c:	e015      	b.n	800169a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7ff fad3 	bl	8000c18 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001674:	e00a      	b.n	800168c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff facf 	bl	8000c18 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e121      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800168c:	4b3a      	ldr	r3, [pc, #232]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ed      	bne.n	8001676 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800169a:	7ffb      	ldrb	r3, [r7, #31]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a0:	4b35      	ldr	r3, [pc, #212]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	4a34      	ldr	r2, [pc, #208]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 80016a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d03c      	beq.n	8001732 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01c      	beq.n	80016fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff faa2 	bl	8000c18 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016d8:	f7ff fa9e 	bl	8000c18 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0f2      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ea:	4b23      	ldr	r3, [pc, #140]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 80016ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ef      	beq.n	80016d8 <HAL_RCC_OscConfig+0x418>
 80016f8:	e01b      	b.n	8001732 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 80016fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001700:	4a1d      	ldr	r2, [pc, #116]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fa85 	bl	8000c18 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001712:	f7ff fa81 	bl	8000c18 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0d5      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001724:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001726:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ef      	bne.n	8001712 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80c9 	beq.w	80018ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b0c      	cmp	r3, #12
 8001746:	f000 8083 	beq.w	8001850 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d15e      	bne.n	8001810 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <HAL_RCC_OscConfig+0x4b8>)
 8001758:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800175c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff fa5b 	bl	8000c18 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001764:	e00c      	b.n	8001780 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff fa57 	bl	8000c18 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d905      	bls.n	8001780 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e0ab      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
 8001778:	40021000 	.word	0x40021000
 800177c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001780:	4b55      	ldr	r3, [pc, #340]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ec      	bne.n	8001766 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178c:	4b52      	ldr	r3, [pc, #328]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4b52      	ldr	r3, [pc, #328]	@ (80018dc <HAL_RCC_OscConfig+0x61c>)
 8001792:	4013      	ands	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6a11      	ldr	r1, [r2, #32]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800179c:	3a01      	subs	r2, #1
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	4311      	orrs	r1, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80017a6:	0212      	lsls	r2, r2, #8
 80017a8:	4311      	orrs	r1, r2
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017ae:	0852      	lsrs	r2, r2, #1
 80017b0:	3a01      	subs	r2, #1
 80017b2:	0552      	lsls	r2, r2, #21
 80017b4:	4311      	orrs	r1, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017ba:	0852      	lsrs	r2, r2, #1
 80017bc:	3a01      	subs	r2, #1
 80017be:	0652      	lsls	r2, r2, #25
 80017c0:	4311      	orrs	r1, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017c6:	06d2      	lsls	r2, r2, #27
 80017c8:	430a      	orrs	r2, r1
 80017ca:	4943      	ldr	r1, [pc, #268]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d0:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a40      	ldr	r2, [pc, #256]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 80017d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017dc:	4b3e      	ldr	r3, [pc, #248]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a3d      	ldr	r2, [pc, #244]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 80017e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fa16 	bl	8000c18 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fa12 	bl	8000c18 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e066      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001802:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x530>
 800180e:	e05e      	b.n	80018ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001810:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a30      	ldr	r2, [pc, #192]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 8001816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800181a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff f9fc 	bl	8000c18 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff f9f8 	bl	8000c18 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04c      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001836:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001842:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	4924      	ldr	r1, [pc, #144]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 8001848:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <HAL_RCC_OscConfig+0x620>)
 800184a:	4013      	ands	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]
 800184e:	e03e      	b.n	80018ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e039      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800185c:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <HAL_RCC_OscConfig+0x618>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	429a      	cmp	r2, r3
 800186e:	d12c      	bne.n	80018ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	3b01      	subs	r3, #1
 800187c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d123      	bne.n	80018ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d11b      	bne.n	80018ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d113      	bne.n	80018ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	3b01      	subs	r3, #1
 80018b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	019f800c 	.word	0x019f800c
 80018e0:	feeefffc 	.word	0xfeeefffc

080018e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e11e      	b.n	8001b3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b91      	ldr	r3, [pc, #580]	@ (8001b44 <HAL_RCC_ClockConfig+0x260>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d910      	bls.n	800192c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b8e      	ldr	r3, [pc, #568]	@ (8001b44 <HAL_RCC_ClockConfig+0x260>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 020f 	bic.w	r2, r3, #15
 8001912:	498c      	ldr	r1, [pc, #560]	@ (8001b44 <HAL_RCC_ClockConfig+0x260>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b8a      	ldr	r3, [pc, #552]	@ (8001b44 <HAL_RCC_ClockConfig+0x260>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e106      	b.n	8001b3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d073      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d129      	bne.n	8001994 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001940:	4b81      	ldr	r3, [pc, #516]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0f4      	b.n	8001b3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001950:	f000 f9d0 	bl	8001cf4 <RCC_GetSysClockFreqFromPLLSource>
 8001954:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4a7c      	ldr	r2, [pc, #496]	@ (8001b4c <HAL_RCC_ClockConfig+0x268>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d93f      	bls.n	80019de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800195e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001972:	2b00      	cmp	r3, #0
 8001974:	d033      	beq.n	80019de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800197a:	2b00      	cmp	r3, #0
 800197c:	d12f      	bne.n	80019de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800197e:	4b72      	ldr	r3, [pc, #456]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001986:	4a70      	ldr	r2, [pc, #448]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800198c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e024      	b.n	80019de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d107      	bne.n	80019ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0c6      	b.n	8001b3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	4b66      	ldr	r3, [pc, #408]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0be      	b.n	8001b3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019bc:	f000 f8ce 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4a61      	ldr	r2, [pc, #388]	@ (8001b4c <HAL_RCC_ClockConfig+0x268>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d909      	bls.n	80019de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019d2:	4a5d      	ldr	r2, [pc, #372]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 80019d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80019da:	2380      	movs	r3, #128	@ 0x80
 80019dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019de:	4b5a      	ldr	r3, [pc, #360]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f023 0203 	bic.w	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4957      	ldr	r1, [pc, #348]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f0:	f7ff f912 	bl	8000c18 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7ff f90e 	bl	8000c18 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e095      	b.n	8001b3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 020c 	and.w	r2, r3, #12
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1eb      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d023      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a38:	4b43      	ldr	r3, [pc, #268]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a42      	ldr	r2, [pc, #264]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001a3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a50:	4b3d      	ldr	r3, [pc, #244]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001a58:	4a3b      	ldr	r2, [pc, #236]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001a5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b39      	ldr	r3, [pc, #228]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4936      	ldr	r1, [pc, #216]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b80      	cmp	r3, #128	@ 0x80
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a7a:	4b33      	ldr	r3, [pc, #204]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	4a32      	ldr	r2, [pc, #200]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001a80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a86:	4b2f      	ldr	r3, [pc, #188]	@ (8001b44 <HAL_RCC_ClockConfig+0x260>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d21d      	bcs.n	8001ad0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a94:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <HAL_RCC_ClockConfig+0x260>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 020f 	bic.w	r2, r3, #15
 8001a9c:	4929      	ldr	r1, [pc, #164]	@ (8001b44 <HAL_RCC_ClockConfig+0x260>)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aa4:	f7ff f8b8 	bl	8000c18 <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aac:	f7ff f8b4 	bl	8000c18 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e03b      	b.n	8001b3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_RCC_ClockConfig+0x260>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1ed      	bne.n	8001aac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4917      	ldr	r1, [pc, #92]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001afa:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	490f      	ldr	r1, [pc, #60]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b0e:	f000 f825 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <HAL_RCC_ClockConfig+0x264>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	490c      	ldr	r1, [pc, #48]	@ (8001b50 <HAL_RCC_ClockConfig+0x26c>)
 8001b20:	5ccb      	ldrb	r3, [r1, r3]
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_RCC_ClockConfig+0x270>)
 8001b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_RCC_ClockConfig+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fed4 	bl	80008e0 <HAL_InitTick>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	04c4b400 	.word	0x04c4b400
 8001b50:	08006b90 	.word	0x08006b90
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b62:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d102      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	e047      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b80:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	e03e      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b86:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d136      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d10c      	bne.n	8001bca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	4a16      	ldr	r2, [pc, #88]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bba:	68d2      	ldr	r2, [r2, #12]
 8001bbc:	0a12      	lsrs	r2, r2, #8
 8001bbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
      break;
 8001bc8:	e00c      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bca:	4a13      	ldr	r2, [pc, #76]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4a10      	ldr	r2, [pc, #64]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd4:	68d2      	ldr	r2, [r2, #12]
 8001bd6:	0a12      	lsrs	r2, r2, #8
 8001bd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
      break;
 8001be2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0e5b      	lsrs	r3, r3, #25
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	e001      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c04:	693b      	ldr	r3, [r7, #16]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	00f42400 	.word	0x00f42400
 8001c1c:	016e3600 	.word	0x016e3600

08001c20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000000 	.word	0x20000000

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c3c:	f7ff fff0 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4904      	ldr	r1, [pc, #16]	@ (8001c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08006ba0 	.word	0x08006ba0

08001c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c68:	f7ff ffda 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0adb      	lsrs	r3, r3, #11
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4904      	ldr	r1, [pc, #16]	@ (8001c8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08006ba0 	.word	0x08006ba0

08001c90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <HAL_RCC_GetClockConfig+0x60>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 020f 	and.w	r2, r3, #15
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	601a      	str	r2, [r3, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3301      	adds	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d10c      	bne.n	8001d32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d18:	4a17      	ldr	r2, [pc, #92]	@ (8001d78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	4a14      	ldr	r2, [pc, #80]	@ (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d22:	68d2      	ldr	r2, [r2, #12]
 8001d24:	0a12      	lsrs	r2, r2, #8
 8001d26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	617b      	str	r3, [r7, #20]
    break;
 8001d30:	e00c      	b.n	8001d4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d3c:	68d2      	ldr	r2, [r2, #12]
 8001d3e:	0a12      	lsrs	r2, r2, #8
 8001d40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    break;
 8001d4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0e5b      	lsrs	r3, r3, #25
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	3301      	adds	r3, #1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d66:	687b      	ldr	r3, [r7, #4]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000
 8001d78:	016e3600 	.word	0x016e3600
 8001d7c:	00f42400 	.word	0x00f42400

08001d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d88:	2300      	movs	r3, #0
 8001d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8098 	beq.w	8001ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da2:	4b43      	ldr	r3, [pc, #268]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10d      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b40      	ldr	r3, [pc, #256]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	4a3f      	ldr	r2, [pc, #252]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dba:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dca:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a39      	ldr	r2, [pc, #228]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dd6:	f7fe ff1f 	bl	8000c18 <HAL_GetTick>
 8001dda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ddc:	e009      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7fe ff1b 	bl	8000c18 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d902      	bls.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	74fb      	strb	r3, [r7, #19]
        break;
 8001df0:	e005      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001df2:	4b30      	ldr	r3, [pc, #192]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ef      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dfe:	7cfb      	ldrb	r3, [r7, #19]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d159      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e04:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01e      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d019      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e20:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e2c:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e32:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e42:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e4c:	4a18      	ldr	r2, [pc, #96]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d016      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fedb 	bl	8000c18 <HAL_GetTick>
 8001e62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e64:	e00b      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7fe fed7 	bl	8000c18 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d902      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	74fb      	strb	r3, [r7, #19]
            break;
 8001e7c:	e006      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ec      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e8c:	7cfb      	ldrb	r3, [r7, #19]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10b      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	4903      	ldr	r1, [pc, #12]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001ea8:	e008      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eaa:	7cfb      	ldrb	r3, [r7, #19]
 8001eac:	74bb      	strb	r3, [r7, #18]
 8001eae:	e005      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ebc:	7c7b      	ldrb	r3, [r7, #17]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4ba6      	ldr	r3, [pc, #664]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec6:	4aa5      	ldr	r2, [pc, #660]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eda:	4ba0      	ldr	r3, [pc, #640]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee0:	f023 0203 	bic.w	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	499c      	ldr	r1, [pc, #624]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001efc:	4b97      	ldr	r3, [pc, #604]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f02:	f023 020c 	bic.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	4994      	ldr	r1, [pc, #592]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f1e:	4b8f      	ldr	r3, [pc, #572]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	498b      	ldr	r1, [pc, #556]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f40:	4b86      	ldr	r3, [pc, #536]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	4983      	ldr	r1, [pc, #524]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f62:	4b7e      	ldr	r3, [pc, #504]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	497a      	ldr	r1, [pc, #488]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f84:	4b75      	ldr	r3, [pc, #468]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	4972      	ldr	r1, [pc, #456]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	4969      	ldr	r1, [pc, #420]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fc8:	4b64      	ldr	r3, [pc, #400]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4961      	ldr	r1, [pc, #388]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fea:	4b5c      	ldr	r3, [pc, #368]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	4958      	ldr	r1, [pc, #352]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d015      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800200c:	4b53      	ldr	r3, [pc, #332]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002012:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	4950      	ldr	r1, [pc, #320]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800202a:	d105      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800202c:	4b4b      	ldr	r3, [pc, #300]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a4a      	ldr	r2, [pc, #296]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002036:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002044:	4b45      	ldr	r3, [pc, #276]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002052:	4942      	ldr	r1, [pc, #264]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002062:	d105      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002064:	4b3d      	ldr	r3, [pc, #244]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a3c      	ldr	r2, [pc, #240]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800206e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d015      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800207c:	4b37      	ldr	r3, [pc, #220]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002082:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4934      	ldr	r1, [pc, #208]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800209a:	d105      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800209c:	4b2f      	ldr	r3, [pc, #188]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a2e      	ldr	r2, [pc, #184]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d015      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b4:	4b29      	ldr	r3, [pc, #164]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c2:	4926      	ldr	r1, [pc, #152]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020d2:	d105      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d4:	4b21      	ldr	r3, [pc, #132]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a20      	ldr	r2, [pc, #128]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d015      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fa:	4918      	ldr	r1, [pc, #96]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800210a:	d105      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a12      	ldr	r2, [pc, #72]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002116:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d015      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002124:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002132:	490a      	ldr	r1, [pc, #40]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002142:	d105      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002150:	7cbb      	ldrb	r3, [r7, #18]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e049      	b.n	8002206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f841 	bl	800220e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f000 fa22 	bl	80025e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d001      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e04a      	b.n	80022d2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a21      	ldr	r2, [pc, #132]	@ (80022e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d018      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x6c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002266:	d013      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x6c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1d      	ldr	r2, [pc, #116]	@ (80022e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00e      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x6c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1c      	ldr	r2, [pc, #112]	@ (80022e8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d009      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x6c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1a      	ldr	r2, [pc, #104]	@ (80022ec <HAL_TIM_Base_Start_IT+0xc8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x6c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d115      	bne.n	80022bc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002298:	4013      	ands	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d015      	beq.n	80022ce <HAL_TIM_Base_Start_IT+0xaa>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a8:	d011      	beq.n	80022ce <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ba:	e008      	b.n	80022ce <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e000      	b.n	80022d0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800
 80022ec:	40013400 	.word	0x40013400
 80022f0:	40014000 	.word	0x40014000
 80022f4:	00010007 	.word	0x00010007

080022f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d020      	beq.n	800235c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01b      	beq.n	800235c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0202 	mvn.w	r2, #2
 800232c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f931 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 8002348:	e005      	b.n	8002356 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f923 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f934 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d020      	beq.n	80023a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0204 	mvn.w	r2, #4
 8002378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f90b 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f8fd 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f90e 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d020      	beq.n	80023f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0208 	mvn.w	r2, #8
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2204      	movs	r2, #4
 80023ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8e5 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f8d7 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f8e8 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d020      	beq.n	8002440 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0210 	mvn.w	r2, #16
 8002410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2208      	movs	r2, #8
 8002416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8bf 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 800242c:	e005      	b.n	800243a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8b1 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f8c2 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0201 	mvn.w	r2, #1
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe f9a4 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	d104      	bne.n	8002478 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00c      	beq.n	8002492 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800248a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f951 	bl	8002734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00c      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80024ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f949 	bl	8002748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f87c 	bl	80025d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f06f 0220 	mvn.w	r2, #32
 80024f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f911 	bl	8002720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00c      	beq.n	8002522 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800251a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f91d 	bl	800275c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00c      	beq.n	8002546 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800253e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f915 	bl	8002770 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00c      	beq.n	800256a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f90d 	bl	8002784 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00c      	beq.n	800258e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f905 	bl	8002798 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a42      	ldr	r2, [pc, #264]	@ (8002704 <TIM_Base_SetConfig+0x11c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00f      	beq.n	8002620 <TIM_Base_SetConfig+0x38>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002606:	d00b      	beq.n	8002620 <TIM_Base_SetConfig+0x38>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a3f      	ldr	r2, [pc, #252]	@ (8002708 <TIM_Base_SetConfig+0x120>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d007      	beq.n	8002620 <TIM_Base_SetConfig+0x38>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a3e      	ldr	r2, [pc, #248]	@ (800270c <TIM_Base_SetConfig+0x124>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <TIM_Base_SetConfig+0x38>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a3d      	ldr	r2, [pc, #244]	@ (8002710 <TIM_Base_SetConfig+0x128>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d108      	bne.n	8002632 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a33      	ldr	r2, [pc, #204]	@ (8002704 <TIM_Base_SetConfig+0x11c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01b      	beq.n	8002672 <TIM_Base_SetConfig+0x8a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002640:	d017      	beq.n	8002672 <TIM_Base_SetConfig+0x8a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a30      	ldr	r2, [pc, #192]	@ (8002708 <TIM_Base_SetConfig+0x120>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <TIM_Base_SetConfig+0x8a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a2f      	ldr	r2, [pc, #188]	@ (800270c <TIM_Base_SetConfig+0x124>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00f      	beq.n	8002672 <TIM_Base_SetConfig+0x8a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a2e      	ldr	r2, [pc, #184]	@ (8002710 <TIM_Base_SetConfig+0x128>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00b      	beq.n	8002672 <TIM_Base_SetConfig+0x8a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a2d      	ldr	r2, [pc, #180]	@ (8002714 <TIM_Base_SetConfig+0x12c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <TIM_Base_SetConfig+0x8a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a2c      	ldr	r2, [pc, #176]	@ (8002718 <TIM_Base_SetConfig+0x130>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d003      	beq.n	8002672 <TIM_Base_SetConfig+0x8a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a2b      	ldr	r2, [pc, #172]	@ (800271c <TIM_Base_SetConfig+0x134>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d108      	bne.n	8002684 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a16      	ldr	r2, [pc, #88]	@ (8002704 <TIM_Base_SetConfig+0x11c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00f      	beq.n	80026d0 <TIM_Base_SetConfig+0xe8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <TIM_Base_SetConfig+0x128>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00b      	beq.n	80026d0 <TIM_Base_SetConfig+0xe8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a16      	ldr	r2, [pc, #88]	@ (8002714 <TIM_Base_SetConfig+0x12c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d007      	beq.n	80026d0 <TIM_Base_SetConfig+0xe8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a15      	ldr	r2, [pc, #84]	@ (8002718 <TIM_Base_SetConfig+0x130>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d003      	beq.n	80026d0 <TIM_Base_SetConfig+0xe8>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a14      	ldr	r2, [pc, #80]	@ (800271c <TIM_Base_SetConfig+0x134>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d103      	bne.n	80026d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d105      	bne.n	80026f6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f023 0201 	bic.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	611a      	str	r2, [r3, #16]
  }
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800
 8002710:	40013400 	.word	0x40013400
 8002714:	40014000 	.word	0x40014000
 8002718:	40014400 	.word	0x40014400
 800271c:	40014800 	.word	0x40014800

08002720 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e042      	b.n	8002844 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7fe f82d 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2224      	movs	r2, #36	@ 0x24
 80027da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fb82 	bl	8002f00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f8b3 	bl	8002968 <UART_SetConfig>
 8002802:	4603      	mov	r3, r0
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e01b      	b.n	8002844 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800281a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800282a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fc01 	bl	8003044 <UART_CheckIdleState>
 8002842:	4603      	mov	r3, r0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	@ 0x28
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	2b20      	cmp	r3, #32
 8002864:	d17b      	bne.n	800295e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_UART_Transmit+0x26>
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e074      	b.n	8002960 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	@ 0x21
 8002882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002886:	f7fe f9c7 	bl	8000c18 <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028a4:	d108      	bne.n	80028b8 <HAL_UART_Transmit+0x6c>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d104      	bne.n	80028b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	e003      	b.n	80028c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028c0:	e030      	b.n	8002924 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2180      	movs	r1, #128	@ 0x80
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fc63 	bl	8003198 <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e03d      	b.n	8002960 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10b      	bne.n	8002902 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	3302      	adds	r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	e007      	b.n	8002912 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	3301      	adds	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1c8      	bne.n	80028c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2200      	movs	r2, #0
 8002938:	2140      	movs	r1, #64	@ 0x40
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fc2c 	bl	8003198 <UART_WaitOnFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e006      	b.n	8002960 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3720      	adds	r7, #32
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b08c      	sub	sp, #48	@ 0x30
 800296e:	af00      	add	r7, sp, #0
 8002970:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	431a      	orrs	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	431a      	orrs	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4313      	orrs	r3, r2
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4bab      	ldr	r3, [pc, #684]	@ (8002c44 <UART_SetConfig+0x2dc>)
 8002998:	4013      	ands	r3, r2
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4aa0      	ldr	r2, [pc, #640]	@ (8002c48 <UART_SetConfig+0x2e0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d004      	beq.n	80029d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029d0:	4313      	orrs	r3, r2
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80029de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	f023 010f 	bic.w	r1, r3, #15
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a91      	ldr	r2, [pc, #580]	@ (8002c4c <UART_SetConfig+0x2e4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d125      	bne.n	8002a58 <UART_SetConfig+0xf0>
 8002a0c:	4b90      	ldr	r3, [pc, #576]	@ (8002c50 <UART_SetConfig+0x2e8>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d81a      	bhi.n	8002a50 <UART_SetConfig+0xe8>
 8002a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a20 <UART_SetConfig+0xb8>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a41 	.word	0x08002a41
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a49 	.word	0x08002a49
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a36:	e0d6      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a3e:	e0d2      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002a40:	2304      	movs	r3, #4
 8002a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a46:	e0ce      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002a48:	2308      	movs	r3, #8
 8002a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a4e:	e0ca      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002a50:	2310      	movs	r3, #16
 8002a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a56:	e0c6      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a7d      	ldr	r2, [pc, #500]	@ (8002c54 <UART_SetConfig+0x2ec>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d138      	bne.n	8002ad4 <UART_SetConfig+0x16c>
 8002a62:	4b7b      	ldr	r3, [pc, #492]	@ (8002c50 <UART_SetConfig+0x2e8>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	d82d      	bhi.n	8002acc <UART_SetConfig+0x164>
 8002a70:	a201      	add	r2, pc, #4	@ (adr r2, 8002a78 <UART_SetConfig+0x110>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002aad 	.word	0x08002aad
 8002a7c:	08002acd 	.word	0x08002acd
 8002a80:	08002acd 	.word	0x08002acd
 8002a84:	08002acd 	.word	0x08002acd
 8002a88:	08002abd 	.word	0x08002abd
 8002a8c:	08002acd 	.word	0x08002acd
 8002a90:	08002acd 	.word	0x08002acd
 8002a94:	08002acd 	.word	0x08002acd
 8002a98:	08002ab5 	.word	0x08002ab5
 8002a9c:	08002acd 	.word	0x08002acd
 8002aa0:	08002acd 	.word	0x08002acd
 8002aa4:	08002acd 	.word	0x08002acd
 8002aa8:	08002ac5 	.word	0x08002ac5
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ab2:	e098      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aba:	e094      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002abc:	2304      	movs	r3, #4
 8002abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ac2:	e090      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aca:	e08c      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002acc:	2310      	movs	r3, #16
 8002ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ad2:	e088      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a5f      	ldr	r2, [pc, #380]	@ (8002c58 <UART_SetConfig+0x2f0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d125      	bne.n	8002b2a <UART_SetConfig+0x1c2>
 8002ade:	4b5c      	ldr	r3, [pc, #368]	@ (8002c50 <UART_SetConfig+0x2e8>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ae8:	2b30      	cmp	r3, #48	@ 0x30
 8002aea:	d016      	beq.n	8002b1a <UART_SetConfig+0x1b2>
 8002aec:	2b30      	cmp	r3, #48	@ 0x30
 8002aee:	d818      	bhi.n	8002b22 <UART_SetConfig+0x1ba>
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d00a      	beq.n	8002b0a <UART_SetConfig+0x1a2>
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d814      	bhi.n	8002b22 <UART_SetConfig+0x1ba>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <UART_SetConfig+0x19a>
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d008      	beq.n	8002b12 <UART_SetConfig+0x1aa>
 8002b00:	e00f      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b08:	e06d      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b10:	e069      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002b12:	2304      	movs	r3, #4
 8002b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b18:	e065      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b20:	e061      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002b22:	2310      	movs	r3, #16
 8002b24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b28:	e05d      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4b      	ldr	r2, [pc, #300]	@ (8002c5c <UART_SetConfig+0x2f4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d125      	bne.n	8002b80 <UART_SetConfig+0x218>
 8002b34:	4b46      	ldr	r3, [pc, #280]	@ (8002c50 <UART_SetConfig+0x2e8>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002b3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b40:	d016      	beq.n	8002b70 <UART_SetConfig+0x208>
 8002b42:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b44:	d818      	bhi.n	8002b78 <UART_SetConfig+0x210>
 8002b46:	2b80      	cmp	r3, #128	@ 0x80
 8002b48:	d00a      	beq.n	8002b60 <UART_SetConfig+0x1f8>
 8002b4a:	2b80      	cmp	r3, #128	@ 0x80
 8002b4c:	d814      	bhi.n	8002b78 <UART_SetConfig+0x210>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <UART_SetConfig+0x1f0>
 8002b52:	2b40      	cmp	r3, #64	@ 0x40
 8002b54:	d008      	beq.n	8002b68 <UART_SetConfig+0x200>
 8002b56:	e00f      	b.n	8002b78 <UART_SetConfig+0x210>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b5e:	e042      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002b60:	2302      	movs	r3, #2
 8002b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b66:	e03e      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b6e:	e03a      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002b70:	2308      	movs	r3, #8
 8002b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b76:	e036      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002b78:	2310      	movs	r3, #16
 8002b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b7e:	e032      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a30      	ldr	r2, [pc, #192]	@ (8002c48 <UART_SetConfig+0x2e0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12a      	bne.n	8002be0 <UART_SetConfig+0x278>
 8002b8a:	4b31      	ldr	r3, [pc, #196]	@ (8002c50 <UART_SetConfig+0x2e8>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b98:	d01a      	beq.n	8002bd0 <UART_SetConfig+0x268>
 8002b9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b9e:	d81b      	bhi.n	8002bd8 <UART_SetConfig+0x270>
 8002ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ba4:	d00c      	beq.n	8002bc0 <UART_SetConfig+0x258>
 8002ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002baa:	d815      	bhi.n	8002bd8 <UART_SetConfig+0x270>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <UART_SetConfig+0x250>
 8002bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb4:	d008      	beq.n	8002bc8 <UART_SetConfig+0x260>
 8002bb6:	e00f      	b.n	8002bd8 <UART_SetConfig+0x270>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bbe:	e012      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bc6:	e00e      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bce:	e00a      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bd6:	e006      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002bd8:	2310      	movs	r3, #16
 8002bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bde:	e002      	b.n	8002be6 <UART_SetConfig+0x27e>
 8002be0:	2310      	movs	r3, #16
 8002be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <UART_SetConfig+0x2e0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	f040 80a8 	bne.w	8002d42 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d834      	bhi.n	8002c64 <UART_SetConfig+0x2fc>
 8002bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002c00 <UART_SetConfig+0x298>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c25 	.word	0x08002c25
 8002c04:	08002c65 	.word	0x08002c65
 8002c08:	08002c2d 	.word	0x08002c2d
 8002c0c:	08002c65 	.word	0x08002c65
 8002c10:	08002c33 	.word	0x08002c33
 8002c14:	08002c65 	.word	0x08002c65
 8002c18:	08002c65 	.word	0x08002c65
 8002c1c:	08002c65 	.word	0x08002c65
 8002c20:	08002c3b 	.word	0x08002c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c24:	f7ff f808 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8002c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c2a:	e021      	b.n	8002c70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <UART_SetConfig+0x2f8>)
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c30:	e01e      	b.n	8002c70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c32:	f7fe ff93 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8002c36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c38:	e01a      	b.n	8002c70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c40:	e016      	b.n	8002c70 <UART_SetConfig+0x308>
 8002c42:	bf00      	nop
 8002c44:	cfff69f3 	.word	0xcfff69f3
 8002c48:	40008000 	.word	0x40008000
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40004400 	.word	0x40004400
 8002c58:	40004800 	.word	0x40004800
 8002c5c:	40004c00 	.word	0x40004c00
 8002c60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002c6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 812a 	beq.w	8002ecc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	4a9e      	ldr	r2, [pc, #632]	@ (8002ef8 <UART_SetConfig+0x590>)
 8002c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c82:	461a      	mov	r2, r3
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d305      	bcc.n	8002ca8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d903      	bls.n	8002cb0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002cae:	e10d      	b.n	8002ecc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	60fa      	str	r2, [r7, #12]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8002ef8 <UART_SetConfig+0x590>)
 8002cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cd2:	f7fd faa5 	bl	8000220 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	020b      	lsls	r3, r1, #8
 8002ce8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002cec:	0202      	lsls	r2, r0, #8
 8002cee:	6979      	ldr	r1, [r7, #20]
 8002cf0:	6849      	ldr	r1, [r1, #4]
 8002cf2:	0849      	lsrs	r1, r1, #1
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	4605      	mov	r5, r0
 8002cfa:	eb12 0804 	adds.w	r8, r2, r4
 8002cfe:	eb43 0905 	adc.w	r9, r3, r5
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	469a      	mov	sl, r3
 8002d0a:	4693      	mov	fp, r2
 8002d0c:	4652      	mov	r2, sl
 8002d0e:	465b      	mov	r3, fp
 8002d10:	4640      	mov	r0, r8
 8002d12:	4649      	mov	r1, r9
 8002d14:	f7fd fa84 	bl	8000220 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d26:	d308      	bcc.n	8002d3a <UART_SetConfig+0x3d2>
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d2e:	d204      	bcs.n	8002d3a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6a3a      	ldr	r2, [r7, #32]
 8002d36:	60da      	str	r2, [r3, #12]
 8002d38:	e0c8      	b.n	8002ecc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d40:	e0c4      	b.n	8002ecc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d4a:	d167      	bne.n	8002e1c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d828      	bhi.n	8002da6 <UART_SetConfig+0x43e>
 8002d54:	a201      	add	r2, pc, #4	@ (adr r2, 8002d5c <UART_SetConfig+0x3f4>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d81 	.word	0x08002d81
 8002d60:	08002d89 	.word	0x08002d89
 8002d64:	08002d91 	.word	0x08002d91
 8002d68:	08002da7 	.word	0x08002da7
 8002d6c:	08002d97 	.word	0x08002d97
 8002d70:	08002da7 	.word	0x08002da7
 8002d74:	08002da7 	.word	0x08002da7
 8002d78:	08002da7 	.word	0x08002da7
 8002d7c:	08002d9f 	.word	0x08002d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d80:	f7fe ff5a 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8002d84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d86:	e014      	b.n	8002db2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d88:	f7fe ff6c 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8002d8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d8e:	e010      	b.n	8002db2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d90:	4b5a      	ldr	r3, [pc, #360]	@ (8002efc <UART_SetConfig+0x594>)
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d94:	e00d      	b.n	8002db2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d96:	f7fe fee1 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8002d9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d9c:	e009      	b.n	8002db2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002da4:	e005      	b.n	8002db2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002db0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8089 	beq.w	8002ecc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8002ef8 <UART_SetConfig+0x590>)
 8002dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dcc:	005a      	lsls	r2, r3, #1
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	441a      	add	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	d916      	bls.n	8002e14 <UART_SetConfig+0x4ac>
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dec:	d212      	bcs.n	8002e14 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f023 030f 	bic.w	r3, r3, #15
 8002df6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	8bfb      	ldrh	r3, [r7, #30]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	8bfa      	ldrh	r2, [r7, #30]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	e05b      	b.n	8002ecc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e1a:	e057      	b.n	8002ecc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d828      	bhi.n	8002e76 <UART_SetConfig+0x50e>
 8002e24:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <UART_SetConfig+0x4c4>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e51 	.word	0x08002e51
 8002e30:	08002e59 	.word	0x08002e59
 8002e34:	08002e61 	.word	0x08002e61
 8002e38:	08002e77 	.word	0x08002e77
 8002e3c:	08002e67 	.word	0x08002e67
 8002e40:	08002e77 	.word	0x08002e77
 8002e44:	08002e77 	.word	0x08002e77
 8002e48:	08002e77 	.word	0x08002e77
 8002e4c:	08002e6f 	.word	0x08002e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e50:	f7fe fef2 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8002e54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e56:	e014      	b.n	8002e82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e58:	f7fe ff04 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8002e5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e5e:	e010      	b.n	8002e82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e60:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <UART_SetConfig+0x594>)
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e64:	e00d      	b.n	8002e82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e66:	f7fe fe79 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8002e6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e6c:	e009      	b.n	8002e82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e74:	e005      	b.n	8002e82 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e80:	bf00      	nop
    }

    if (pclk != 0U)
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d021      	beq.n	8002ecc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef8 <UART_SetConfig+0x590>)
 8002e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e92:	461a      	mov	r2, r3
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	085b      	lsrs	r3, r3, #1
 8002ea0:	441a      	add	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	d909      	bls.n	8002ec6 <UART_SetConfig+0x55e>
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb8:	d205      	bcs.n	8002ec6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	e002      	b.n	8002ecc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ee8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3730      	adds	r7, #48	@ 0x30
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef6:	bf00      	nop
 8002ef8:	08006ba8 	.word	0x08006ba8
 8002efc:	00f42400 	.word	0x00f42400

08002f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01a      	beq.n	8003016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ffe:	d10a      	bne.n	8003016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
  }
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b098      	sub	sp, #96	@ 0x60
 8003048:	af02      	add	r7, sp, #8
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003054:	f7fd fde0 	bl	8000c18 <HAL_GetTick>
 8003058:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b08      	cmp	r3, #8
 8003066:	d12f      	bne.n	80030c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003068:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003070:	2200      	movs	r2, #0
 8003072:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f88e 	bl	8003198 <UART_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d022      	beq.n	80030c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800308a:	e853 3f00 	ldrex	r3, [r3]
 800308e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003096:	653b      	str	r3, [r7, #80]	@ 0x50
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030a8:	e841 2300 	strex	r3, r2, [r1]
 80030ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1e6      	bne.n	8003082 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e063      	b.n	8003190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d149      	bne.n	800316a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030de:	2200      	movs	r2, #0
 80030e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f857 	bl	8003198 <UART_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d03c      	beq.n	800316a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	623b      	str	r3, [r7, #32]
   return(result);
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800310e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003110:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800311c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e6      	bne.n	80030f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3308      	adds	r3, #8
 8003128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	60fb      	str	r3, [r7, #12]
   return(result);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3308      	adds	r3, #8
 8003140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003142:	61fa      	str	r2, [r7, #28]
 8003144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	e841 2300 	strex	r3, r2, [r1]
 800314e:	617b      	str	r3, [r7, #20]
   return(result);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e5      	bne.n	8003122 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e012      	b.n	8003190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3758      	adds	r7, #88	@ 0x58
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a8:	e04f      	b.n	800324a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d04b      	beq.n	800324a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7fd fd31 	bl	8000c18 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e04e      	b.n	800326a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d037      	beq.n	800324a <UART_WaitOnFlagUntilTimeout+0xb2>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b80      	cmp	r3, #128	@ 0x80
 80031de:	d034      	beq.n	800324a <UART_WaitOnFlagUntilTimeout+0xb2>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b40      	cmp	r3, #64	@ 0x40
 80031e4:	d031      	beq.n	800324a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d110      	bne.n	8003216 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2208      	movs	r2, #8
 80031fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f838 	bl	8003272 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2208      	movs	r2, #8
 8003206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e029      	b.n	800326a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003224:	d111      	bne.n	800324a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800322e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f81e 	bl	8003272 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e00f      	b.n	800326a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4013      	ands	r3, r2
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	429a      	cmp	r2, r3
 8003266:	d0a0      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003272:	b480      	push	{r7}
 8003274:	b095      	sub	sp, #84	@ 0x54
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800328e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003298:	643b      	str	r3, [r7, #64]	@ 0x40
 800329a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800329e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e6      	bne.n	800327a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3308      	adds	r3, #8
 80032b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3308      	adds	r3, #8
 80032ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e3      	bne.n	80032ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d118      	bne.n	800331e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f023 0310 	bic.w	r3, r3, #16
 8003300:	647b      	str	r3, [r7, #68]	@ 0x44
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	6979      	ldr	r1, [r7, #20]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	613b      	str	r3, [r7, #16]
   return(result);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e6      	bne.n	80032ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003332:	bf00      	nop
 8003334:	3754      	adds	r7, #84	@ 0x54
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_UARTEx_DisableFifoMode+0x16>
 8003350:	2302      	movs	r3, #2
 8003352:	e027      	b.n	80033a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	@ 0x24
 8003360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003382:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e02d      	b.n	8003424 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2224      	movs	r2, #36	@ 0x24
 80033d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f84f 	bl	80034a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003440:	2302      	movs	r3, #2
 8003442:	e02d      	b.n	80034a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	@ 0x24
 8003450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f811 	bl	80034a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d108      	bne.n	80034ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034c8:	e031      	b.n	800352e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034ca:	2308      	movs	r3, #8
 80034cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034ce:	2308      	movs	r3, #8
 80034d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	0e5b      	lsrs	r3, r3, #25
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	0f5b      	lsrs	r3, r3, #29
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034f2:	7bbb      	ldrb	r3, [r7, #14]
 80034f4:	7b3a      	ldrb	r2, [r7, #12]
 80034f6:	4911      	ldr	r1, [pc, #68]	@ (800353c <UARTEx_SetNbDataToProcess+0x94>)
 80034f8:	5c8a      	ldrb	r2, [r1, r2]
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80034fe:	7b3a      	ldrb	r2, [r7, #12]
 8003500:	490f      	ldr	r1, [pc, #60]	@ (8003540 <UARTEx_SetNbDataToProcess+0x98>)
 8003502:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003504:	fb93 f3f2 	sdiv	r3, r3, r2
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	7b7a      	ldrb	r2, [r7, #13]
 8003514:	4909      	ldr	r1, [pc, #36]	@ (800353c <UARTEx_SetNbDataToProcess+0x94>)
 8003516:	5c8a      	ldrb	r2, [r1, r2]
 8003518:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800351c:	7b7a      	ldrb	r2, [r7, #13]
 800351e:	4908      	ldr	r1, [pc, #32]	@ (8003540 <UARTEx_SetNbDataToProcess+0x98>)
 8003520:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003522:	fb93 f3f2 	sdiv	r3, r3, r2
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	08006bc0 	.word	0x08006bc0
 8003540:	08006bc8 	.word	0x08006bc8

08003544 <__NVIC_SetPriority>:
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	6039      	str	r1, [r7, #0]
 800354e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	2b00      	cmp	r3, #0
 8003556:	db0a      	blt.n	800356e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	490c      	ldr	r1, [pc, #48]	@ (8003590 <__NVIC_SetPriority+0x4c>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	440b      	add	r3, r1
 8003568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800356c:	e00a      	b.n	8003584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	4908      	ldr	r1, [pc, #32]	@ (8003594 <__NVIC_SetPriority+0x50>)
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	3b04      	subs	r3, #4
 800357c:	0112      	lsls	r2, r2, #4
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	440b      	add	r3, r1
 8003582:	761a      	strb	r2, [r3, #24]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000e100 	.word	0xe000e100
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <SysTick_Handler+0x1c>)
 800359e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80035a0:	f001 fd2a 	bl	8004ff8 <xTaskGetSchedulerState>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d001      	beq.n	80035ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80035aa:	f002 fb25 	bl	8005bf8 <xPortSysTickHandler>
  }
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	e000e010 	.word	0xe000e010

080035b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80035bc:	2100      	movs	r1, #0
 80035be:	f06f 0004 	mvn.w	r0, #4
 80035c2:	f7ff ffbf 	bl	8003544 <__NVIC_SetPriority>
#endif
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035d2:	f3ef 8305 	mrs	r3, IPSR
 80035d6:	603b      	str	r3, [r7, #0]
  return(result);
 80035d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80035de:	f06f 0305 	mvn.w	r3, #5
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	e00c      	b.n	8003600 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80035e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <osKernelInitialize+0x44>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80035ee:	4b08      	ldr	r3, [pc, #32]	@ (8003610 <osKernelInitialize+0x44>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	e002      	b.n	8003600 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80035fa:	f04f 33ff 	mov.w	r3, #4294967295
 80035fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003600:	687b      	ldr	r3, [r7, #4]
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000174 	.word	0x20000174

08003614 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800361a:	f3ef 8305 	mrs	r3, IPSR
 800361e:	603b      	str	r3, [r7, #0]
  return(result);
 8003620:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003626:	f06f 0305 	mvn.w	r3, #5
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	e010      	b.n	8003650 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800362e:	4b0b      	ldr	r3, [pc, #44]	@ (800365c <osKernelStart+0x48>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d109      	bne.n	800364a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003636:	f7ff ffbf 	bl	80035b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800363a:	4b08      	ldr	r3, [pc, #32]	@ (800365c <osKernelStart+0x48>)
 800363c:	2202      	movs	r2, #2
 800363e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003640:	f001 f876 	bl	8004730 <vTaskStartScheduler>
      stat = osOK;
 8003644:	2300      	movs	r3, #0
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	e002      	b.n	8003650 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
 800364e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003650:	687b      	ldr	r3, [r7, #4]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000174 	.word	0x20000174

08003660 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b08e      	sub	sp, #56	@ 0x38
 8003664:	af04      	add	r7, sp, #16
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003670:	f3ef 8305 	mrs	r3, IPSR
 8003674:	617b      	str	r3, [r7, #20]
  return(result);
 8003676:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003678:	2b00      	cmp	r3, #0
 800367a:	d17e      	bne.n	800377a <osThreadNew+0x11a>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d07b      	beq.n	800377a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003686:	2318      	movs	r3, #24
 8003688:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295
 8003692:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d045      	beq.n	8003726 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <osThreadNew+0x48>
        name = attr->name;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <osThreadNew+0x6e>
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b38      	cmp	r3, #56	@ 0x38
 80036c0:	d805      	bhi.n	80036ce <osThreadNew+0x6e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <osThreadNew+0x72>
        return (NULL);
 80036ce:	2300      	movs	r3, #0
 80036d0:	e054      	b.n	800377c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00e      	beq.n	8003708 <osThreadNew+0xa8>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2ba7      	cmp	r3, #167	@ 0xa7
 80036f0:	d90a      	bls.n	8003708 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <osThreadNew+0xa8>
        mem = 1;
 8003702:	2301      	movs	r3, #1
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	e010      	b.n	800372a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10c      	bne.n	800372a <osThreadNew+0xca>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d108      	bne.n	800372a <osThreadNew+0xca>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <osThreadNew+0xca>
          mem = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e001      	b.n	800372a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d110      	bne.n	8003752 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003738:	9202      	str	r2, [sp, #8]
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	6a3a      	ldr	r2, [r7, #32]
 8003744:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fdfe 	bl	8004348 <xTaskCreateStatic>
 800374c:	4603      	mov	r3, r0
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e013      	b.n	800377a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d110      	bne.n	800377a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	b29a      	uxth	r2, r3
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fe4c 	bl	8004408 <xTaskCreate>
 8003770:	4603      	mov	r3, r0
 8003772:	2b01      	cmp	r3, #1
 8003774:	d001      	beq.n	800377a <osThreadNew+0x11a>
            hTask = NULL;
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800377a:	693b      	ldr	r3, [r7, #16]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3728      	adds	r7, #40	@ 0x28
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a07      	ldr	r2, [pc, #28]	@ (80037b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003794:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4a06      	ldr	r2, [pc, #24]	@ (80037b4 <vApplicationGetIdleTaskMemory+0x30>)
 800379a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2280      	movs	r2, #128	@ 0x80
 80037a0:	601a      	str	r2, [r3, #0]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000178 	.word	0x20000178
 80037b4:	20000220 	.word	0x20000220

080037b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a07      	ldr	r2, [pc, #28]	@ (80037e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80037c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4a06      	ldr	r2, [pc, #24]	@ (80037e8 <vApplicationGetTimerTaskMemory+0x30>)
 80037ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037d6:	601a      	str	r2, [r3, #0]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	20000420 	.word	0x20000420
 80037e8:	200004c8 	.word	0x200004c8

080037ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f103 0208 	add.w	r2, r3, #8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f04f 32ff 	mov.w	r2, #4294967295
 8003804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f103 0208 	add.w	r2, r3, #8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f103 0208 	add.w	r2, r3, #8
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d103      	bne.n	80038ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e00c      	b.n	80038c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3308      	adds	r3, #8
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	e002      	b.n	80038bc <vListInsert+0x2e>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d2f6      	bcs.n	80038b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6892      	ldr	r2, [r2, #8]
 8003916:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6852      	ldr	r2, [r2, #4]
 8003920:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d103      	bne.n	8003934 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1e5a      	subs	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800397a:	bf00      	nop
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003980:	f002 f8aa 	bl	8005ad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398c:	68f9      	ldr	r1, [r7, #12]
 800398e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	441a      	add	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b0:	3b01      	subs	r3, #1
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	441a      	add	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	22ff      	movs	r2, #255	@ 0xff
 80039c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	22ff      	movs	r2, #255	@ 0xff
 80039cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d114      	bne.n	8003a00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01a      	beq.n	8003a14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3310      	adds	r3, #16
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 f942 	bl	8004c6c <xTaskRemoveFromEventList>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d012      	beq.n	8003a14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <xQueueGenericReset+0xd0>)
 80039f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	e009      	b.n	8003a14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3310      	adds	r3, #16
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fef1 	bl	80037ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3324      	adds	r3, #36	@ 0x24
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff feec 	bl	80037ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a14:	f002 f892 	bl	8005b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a18:	2301      	movs	r3, #1
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08e      	sub	sp, #56	@ 0x38
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10b      	bne.n	8003a54 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	e7fd      	b.n	8003a6e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <xQueueGenericCreateStatic+0x56>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <xQueueGenericCreateStatic+0x5a>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <xQueueGenericCreateStatic+0x5c>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10b      	bne.n	8003aa0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	623b      	str	r3, [r7, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <xQueueGenericCreateStatic+0x84>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <xQueueGenericCreateStatic+0x88>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <xQueueGenericCreateStatic+0x8a>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10b      	bne.n	8003ace <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	61fb      	str	r3, [r7, #28]
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	e7fd      	b.n	8003aca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ace:	2350      	movs	r3, #80	@ 0x50
 8003ad0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b50      	cmp	r3, #80	@ 0x50
 8003ad6:	d00b      	beq.n	8003af0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	61bb      	str	r3, [r7, #24]
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	e7fd      	b.n	8003aec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003af0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b04:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f805 	bl	8003b22 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3730      	adds	r7, #48	@ 0x30
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	e002      	b.n	8003b44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b50:	2101      	movs	r1, #1
 8003b52:	69b8      	ldr	r0, [r7, #24]
 8003b54:	f7ff fefe 	bl	8003954 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08e      	sub	sp, #56	@ 0x38
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b76:	2300      	movs	r3, #0
 8003b78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <xQueueGenericSend+0x34>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <xQueueGenericSend+0x42>
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <xQueueGenericSend+0x46>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <xQueueGenericSend+0x48>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <xQueueGenericSend+0x64>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d103      	bne.n	8003bda <xQueueGenericSend+0x72>
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <xQueueGenericSend+0x76>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <xQueueGenericSend+0x78>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <xQueueGenericSend+0x94>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	623b      	str	r3, [r7, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bfc:	f001 f9fc 	bl	8004ff8 <xTaskGetSchedulerState>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <xQueueGenericSend+0xa4>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <xQueueGenericSend+0xa8>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <xQueueGenericSend+0xaa>
 8003c10:	2300      	movs	r3, #0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10b      	bne.n	8003c2e <xQueueGenericSend+0xc6>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	61fb      	str	r3, [r7, #28]
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	e7fd      	b.n	8003c2a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c2e:	f001 ff53 	bl	8005ad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <xQueueGenericSend+0xdc>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d129      	bne.n	8003c98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c4a:	f000 fa0f 	bl	800406c <prvCopyDataToQueue>
 8003c4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d010      	beq.n	8003c7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	3324      	adds	r3, #36	@ 0x24
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 f805 	bl	8004c6c <xTaskRemoveFromEventList>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c68:	4b3f      	ldr	r3, [pc, #252]	@ (8003d68 <xQueueGenericSend+0x200>)
 8003c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	e00a      	b.n	8003c90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c80:	4b39      	ldr	r3, [pc, #228]	@ (8003d68 <xQueueGenericSend+0x200>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c90:	f001 ff54 	bl	8005b3c <vPortExitCritical>
				return pdPASS;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e063      	b.n	8003d60 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c9e:	f001 ff4d 	bl	8005b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e05c      	b.n	8003d60 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 f83f 	bl	8004d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cba:	f001 ff3f 	bl	8005b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cbe:	f000 fda7 	bl	8004810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cc2:	f001 ff09 	bl	8005ad8 <vPortEnterCritical>
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ccc:	b25b      	sxtb	r3, r3
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d103      	bne.n	8003cdc <xQueueGenericSend+0x174>
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ce2:	b25b      	sxtb	r3, r3
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d103      	bne.n	8003cf2 <xQueueGenericSend+0x18a>
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cf2:	f001 ff23 	bl	8005b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cf6:	1d3a      	adds	r2, r7, #4
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f001 f82e 	bl	8004d60 <xTaskCheckForTimeOut>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d124      	bne.n	8003d54 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d0c:	f000 faa6 	bl	800425c <prvIsQueueFull>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d018      	beq.n	8003d48 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	3310      	adds	r3, #16
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 ff52 	bl	8004bc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d26:	f000 fa31 	bl	800418c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d2a:	f000 fd7f 	bl	800482c <xTaskResumeAll>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f47f af7c 	bne.w	8003c2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003d36:	4b0c      	ldr	r3, [pc, #48]	@ (8003d68 <xQueueGenericSend+0x200>)
 8003d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	e772      	b.n	8003c2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d4a:	f000 fa1f 	bl	800418c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d4e:	f000 fd6d 	bl	800482c <xTaskResumeAll>
 8003d52:	e76c      	b.n	8003c2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d56:	f000 fa19 	bl	800418c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d5a:	f000 fd67 	bl	800482c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3738      	adds	r7, #56	@ 0x38
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b090      	sub	sp, #64	@ 0x40
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	e7fd      	b.n	8003d98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <xQueueGenericSendFromISR+0x3e>
 8003da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <xQueueGenericSendFromISR+0x42>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <xQueueGenericSendFromISR+0x44>
 8003dae:	2300      	movs	r3, #0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10b      	bne.n	8003dcc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	e7fd      	b.n	8003dc8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d103      	bne.n	8003dda <xQueueGenericSendFromISR+0x6e>
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <xQueueGenericSendFromISR+0x72>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <xQueueGenericSendFromISR+0x74>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	623b      	str	r3, [r7, #32]
}
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dfc:	f001 ff4c 	bl	8005c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e00:	f3ef 8211 	mrs	r2, BASEPRI
 8003e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	61fa      	str	r2, [r7, #28]
 8003e16:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e18:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e1a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d302      	bcc.n	8003e2e <xQueueGenericSendFromISR+0xc2>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d12f      	bne.n	8003e8e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003e44:	f000 f912 	bl	800406c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e48:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d112      	bne.n	8003e78 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	3324      	adds	r3, #36	@ 0x24
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 ff04 	bl	8004c6c <xTaskRemoveFromEventList>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00e      	beq.n	8003e88 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e007      	b.n	8003e88 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	b25a      	sxtb	r2, r3
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003e8c:	e001      	b.n	8003e92 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e94:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3740      	adds	r7, #64	@ 0x40
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	@ 0x30
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <xQueueReceive+0x32>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	623b      	str	r3, [r7, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	e7fd      	b.n	8003ed6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <xQueueReceive+0x40>
 8003ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <xQueueReceive+0x44>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <xQueueReceive+0x46>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <xQueueReceive+0x62>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	61fb      	str	r3, [r7, #28]
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f0a:	f001 f875 	bl	8004ff8 <xTaskGetSchedulerState>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <xQueueReceive+0x72>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <xQueueReceive+0x76>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <xQueueReceive+0x78>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <xQueueReceive+0x94>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	61bb      	str	r3, [r7, #24]
}
 8003f36:	bf00      	nop
 8003f38:	bf00      	nop
 8003f3a:	e7fd      	b.n	8003f38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f3c:	f001 fdcc 	bl	8005ad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01f      	beq.n	8003f8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f50:	f000 f8f6 	bl	8004140 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	1e5a      	subs	r2, r3, #1
 8003f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00f      	beq.n	8003f84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	3310      	adds	r3, #16
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fe7f 	bl	8004c6c <xTaskRemoveFromEventList>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d007      	beq.n	8003f84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f74:	4b3c      	ldr	r3, [pc, #240]	@ (8004068 <xQueueReceive+0x1c0>)
 8003f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f84:	f001 fdda 	bl	8005b3c <vPortExitCritical>
				return pdPASS;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e069      	b.n	8004060 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f92:	f001 fdd3 	bl	8005b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e062      	b.n	8004060 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fec5 	bl	8004d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003faa:	2301      	movs	r3, #1
 8003fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fae:	f001 fdc5 	bl	8005b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fb2:	f000 fc2d 	bl	8004810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fb6:	f001 fd8f 	bl	8005ad8 <vPortEnterCritical>
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fc0:	b25b      	sxtb	r3, r3
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d103      	bne.n	8003fd0 <xQueueReceive+0x128>
 8003fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fd6:	b25b      	sxtb	r3, r3
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d103      	bne.n	8003fe6 <xQueueReceive+0x13e>
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fe6:	f001 fda9 	bl	8005b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fea:	1d3a      	adds	r2, r7, #4
 8003fec:	f107 0310 	add.w	r3, r7, #16
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 feb4 	bl	8004d60 <xTaskCheckForTimeOut>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d123      	bne.n	8004046 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004000:	f000 f916 	bl	8004230 <prvIsQueueEmpty>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d017      	beq.n	800403a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800400a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400c:	3324      	adds	r3, #36	@ 0x24
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fdd8 	bl	8004bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800401a:	f000 f8b7 	bl	800418c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800401e:	f000 fc05 	bl	800482c <xTaskResumeAll>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d189      	bne.n	8003f3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004028:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <xQueueReceive+0x1c0>)
 800402a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	e780      	b.n	8003f3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800403a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800403c:	f000 f8a6 	bl	800418c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004040:	f000 fbf4 	bl	800482c <xTaskResumeAll>
 8004044:	e77a      	b.n	8003f3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004048:	f000 f8a0 	bl	800418c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800404c:	f000 fbee 	bl	800482c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004052:	f000 f8ed 	bl	8004230 <prvIsQueueEmpty>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	f43f af6f 	beq.w	8003f3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800405e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004060:	4618      	mov	r0, r3
 8004062:	3730      	adds	r7, #48	@ 0x30
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	e000ed04 	.word	0xe000ed04

0800406c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004080:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10d      	bne.n	80040a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d14d      	bne.n	800412e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 ffcc 	bl	8005034 <xTaskPriorityDisinherit>
 800409c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	e043      	b.n	800412e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d119      	bne.n	80040e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6858      	ldr	r0, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b4:	461a      	mov	r2, r3
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	f002 fae7 	bl	800668a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	441a      	add	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d32b      	bcc.n	800412e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	e026      	b.n	800412e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68d8      	ldr	r0, [r3, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	461a      	mov	r2, r3
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	f002 facd 	bl	800668a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	425b      	negs	r3, r3
 80040fa:	441a      	add	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d207      	bcs.n	800411c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	425b      	negs	r3, r3
 8004116:	441a      	add	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d105      	bne.n	800412e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	3b01      	subs	r3, #1
 800412c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004136:	697b      	ldr	r3, [r7, #20]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	441a      	add	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	429a      	cmp	r2, r3
 800416a:	d303      	bcc.n	8004174 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68d9      	ldr	r1, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	461a      	mov	r2, r3
 800417e:	6838      	ldr	r0, [r7, #0]
 8004180:	f002 fa83 	bl	800668a <memcpy>
	}
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004194:	f001 fca0 	bl	8005ad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800419e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a0:	e011      	b.n	80041c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d012      	beq.n	80041d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3324      	adds	r3, #36	@ 0x24
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fd5c 	bl	8004c6c <xTaskRemoveFromEventList>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041ba:	f000 fe35 	bl	8004e28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	dce9      	bgt.n	80041a2 <prvUnlockQueue+0x16>
 80041ce:	e000      	b.n	80041d2 <prvUnlockQueue+0x46>
					break;
 80041d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	22ff      	movs	r2, #255	@ 0xff
 80041d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80041da:	f001 fcaf 	bl	8005b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041de:	f001 fc7b 	bl	8005ad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ea:	e011      	b.n	8004210 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d012      	beq.n	800421a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3310      	adds	r3, #16
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fd37 	bl	8004c6c <xTaskRemoveFromEventList>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004204:	f000 fe10 	bl	8004e28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004208:	7bbb      	ldrb	r3, [r7, #14]
 800420a:	3b01      	subs	r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004214:	2b00      	cmp	r3, #0
 8004216:	dce9      	bgt.n	80041ec <prvUnlockQueue+0x60>
 8004218:	e000      	b.n	800421c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800421a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	22ff      	movs	r2, #255	@ 0xff
 8004220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004224:	f001 fc8a 	bl	8005b3c <vPortExitCritical>
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004238:	f001 fc4e 	bl	8005ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e001      	b.n	800424e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800424e:	f001 fc75 	bl	8005b3c <vPortExitCritical>

	return xReturn;
 8004252:	68fb      	ldr	r3, [r7, #12]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004264:	f001 fc38 	bl	8005ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004270:	429a      	cmp	r2, r3
 8004272:	d102      	bne.n	800427a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e001      	b.n	800427e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800427e:	f001 fc5d 	bl	8005b3c <vPortExitCritical>

	return xReturn;
 8004282:	68fb      	ldr	r3, [r7, #12]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e014      	b.n	80042c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800429c:	4a0f      	ldr	r2, [pc, #60]	@ (80042dc <vQueueAddToRegistry+0x50>)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042a8:	490c      	ldr	r1, [pc, #48]	@ (80042dc <vQueueAddToRegistry+0x50>)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042b2:	4a0a      	ldr	r2, [pc, #40]	@ (80042dc <vQueueAddToRegistry+0x50>)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042be:	e006      	b.n	80042ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3301      	adds	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b07      	cmp	r3, #7
 80042ca:	d9e7      	bls.n	800429c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	200008c8 	.word	0x200008c8

080042e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042f0:	f001 fbf2 	bl	8005ad8 <vPortEnterCritical>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042fa:	b25b      	sxtb	r3, r3
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d103      	bne.n	800430a <vQueueWaitForMessageRestricted+0x2a>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004310:	b25b      	sxtb	r3, r3
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d103      	bne.n	8004320 <vQueueWaitForMessageRestricted+0x40>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004320:	f001 fc0c 	bl	8005b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3324      	adds	r3, #36	@ 0x24
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fc6d 	bl	8004c14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f7ff ff26 	bl	800418c <prvUnlockQueue>
	}
 8004340:	bf00      	nop
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08e      	sub	sp, #56	@ 0x38
 800434c:	af04      	add	r7, sp, #16
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <xTaskCreateStatic+0x2c>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	623b      	str	r3, [r7, #32]
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	e7fd      	b.n	8004370 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <xTaskCreateStatic+0x4a>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	61fb      	str	r3, [r7, #28]
}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	e7fd      	b.n	800438e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004392:	23a8      	movs	r3, #168	@ 0xa8
 8004394:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2ba8      	cmp	r3, #168	@ 0xa8
 800439a:	d00b      	beq.n	80043b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	61bb      	str	r3, [r7, #24]
}
 80043ae:	bf00      	nop
 80043b0:	bf00      	nop
 80043b2:	e7fd      	b.n	80043b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01e      	beq.n	80043fa <xTaskCreateStatic+0xb2>
 80043bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01b      	beq.n	80043fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043d4:	2300      	movs	r3, #0
 80043d6:	9303      	str	r3, [sp, #12]
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	9302      	str	r3, [sp, #8]
 80043dc:	f107 0314 	add.w	r3, r7, #20
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f851 	bl	8004494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043f4:	f000 f8f6 	bl	80045e4 <prvAddNewTaskToReadyList>
 80043f8:	e001      	b.n	80043fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043fe:	697b      	ldr	r3, [r7, #20]
	}
 8004400:	4618      	mov	r0, r3
 8004402:	3728      	adds	r7, #40	@ 0x28
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08c      	sub	sp, #48	@ 0x30
 800440c:	af04      	add	r7, sp, #16
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4618      	mov	r0, r3
 800441e:	f001 fc7d 	bl	8005d1c <pvPortMalloc>
 8004422:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00e      	beq.n	8004448 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800442a:	20a8      	movs	r0, #168	@ 0xa8
 800442c:	f001 fc76 	bl	8005d1c <pvPortMalloc>
 8004430:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30
 800443e:	e005      	b.n	800444c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004440:	6978      	ldr	r0, [r7, #20]
 8004442:	f001 fd39 	bl	8005eb8 <vPortFree>
 8004446:	e001      	b.n	800444c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004448:	2300      	movs	r3, #0
 800444a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d017      	beq.n	8004482 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	2300      	movs	r3, #0
 800445e:	9303      	str	r3, [sp, #12]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	9302      	str	r3, [sp, #8]
 8004464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f80f 	bl	8004494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004476:	69f8      	ldr	r0, [r7, #28]
 8004478:	f000 f8b4 	bl	80045e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800447c:	2301      	movs	r3, #1
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	e002      	b.n	8004488 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004488:	69bb      	ldr	r3, [r7, #24]
	}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	461a      	mov	r2, r3
 80044ac:	21a5      	movs	r1, #165	@ 0xa5
 80044ae:	f002 f81b 	bl	80064e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044bc:	3b01      	subs	r3, #1
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	f023 0307 	bic.w	r3, r3, #7
 80044ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	617b      	str	r3, [r7, #20]
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01f      	beq.n	8004534 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	e012      	b.n	8004520 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	7819      	ldrb	r1, [r3, #0]
 8004502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	3334      	adds	r3, #52	@ 0x34
 800450a:	460a      	mov	r2, r1
 800450c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	4413      	add	r3, r2
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d006      	beq.n	8004528 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3301      	adds	r3, #1
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b0f      	cmp	r3, #15
 8004524:	d9e9      	bls.n	80044fa <prvInitialiseNewTask+0x66>
 8004526:	e000      	b.n	800452a <prvInitialiseNewTask+0x96>
			{
				break;
 8004528:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004532:	e003      	b.n	800453c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800453c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453e:	2b37      	cmp	r3, #55	@ 0x37
 8004540:	d901      	bls.n	8004546 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004542:	2337      	movs	r3, #55	@ 0x37
 8004544:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800454a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004550:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004554:	2200      	movs	r2, #0
 8004556:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	3304      	adds	r3, #4
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff f965 	bl	800382c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	3318      	adds	r3, #24
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff f960 	bl	800382c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004570:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004574:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004580:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004584:	2200      	movs	r2, #0
 8004586:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	2200      	movs	r2, #0
 800458e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	3354      	adds	r3, #84	@ 0x54
 8004596:	224c      	movs	r2, #76	@ 0x4c
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f001 ffa4 	bl	80064e8 <memset>
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	4a0d      	ldr	r2, [pc, #52]	@ (80045d8 <prvInitialiseNewTask+0x144>)
 80045a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80045a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a8:	4a0c      	ldr	r2, [pc, #48]	@ (80045dc <prvInitialiseNewTask+0x148>)
 80045aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ae:	4a0c      	ldr	r2, [pc, #48]	@ (80045e0 <prvInitialiseNewTask+0x14c>)
 80045b0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	68f9      	ldr	r1, [r7, #12]
 80045b6:	69b8      	ldr	r0, [r7, #24]
 80045b8:	f001 f95a 	bl	8005870 <pxPortInitialiseStack>
 80045bc:	4602      	mov	r2, r0
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ce:	bf00      	nop
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	2000366c 	.word	0x2000366c
 80045dc:	200036d4 	.word	0x200036d4
 80045e0:	2000373c 	.word	0x2000373c

080045e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045ec:	f001 fa74 	bl	8005ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045f0:	4b2d      	ldr	r3, [pc, #180]	@ (80046a8 <prvAddNewTaskToReadyList+0xc4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	4a2c      	ldr	r2, [pc, #176]	@ (80046a8 <prvAddNewTaskToReadyList+0xc4>)
 80045f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045fa:	4b2c      	ldr	r3, [pc, #176]	@ (80046ac <prvAddNewTaskToReadyList+0xc8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004602:	4a2a      	ldr	r2, [pc, #168]	@ (80046ac <prvAddNewTaskToReadyList+0xc8>)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004608:	4b27      	ldr	r3, [pc, #156]	@ (80046a8 <prvAddNewTaskToReadyList+0xc4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d110      	bne.n	8004632 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004610:	f000 fc2e 	bl	8004e70 <prvInitialiseTaskLists>
 8004614:	e00d      	b.n	8004632 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004616:	4b26      	ldr	r3, [pc, #152]	@ (80046b0 <prvAddNewTaskToReadyList+0xcc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800461e:	4b23      	ldr	r3, [pc, #140]	@ (80046ac <prvAddNewTaskToReadyList+0xc8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	429a      	cmp	r2, r3
 800462a:	d802      	bhi.n	8004632 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800462c:	4a1f      	ldr	r2, [pc, #124]	@ (80046ac <prvAddNewTaskToReadyList+0xc8>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004632:	4b20      	ldr	r3, [pc, #128]	@ (80046b4 <prvAddNewTaskToReadyList+0xd0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3301      	adds	r3, #1
 8004638:	4a1e      	ldr	r2, [pc, #120]	@ (80046b4 <prvAddNewTaskToReadyList+0xd0>)
 800463a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800463c:	4b1d      	ldr	r3, [pc, #116]	@ (80046b4 <prvAddNewTaskToReadyList+0xd0>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004648:	4b1b      	ldr	r3, [pc, #108]	@ (80046b8 <prvAddNewTaskToReadyList+0xd4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d903      	bls.n	8004658 <prvAddNewTaskToReadyList+0x74>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	4a18      	ldr	r2, [pc, #96]	@ (80046b8 <prvAddNewTaskToReadyList+0xd4>)
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4a15      	ldr	r2, [pc, #84]	@ (80046bc <prvAddNewTaskToReadyList+0xd8>)
 8004666:	441a      	add	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f7ff f8e9 	bl	8003846 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004674:	f001 fa62 	bl	8005b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004678:	4b0d      	ldr	r3, [pc, #52]	@ (80046b0 <prvAddNewTaskToReadyList+0xcc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00e      	beq.n	800469e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004680:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <prvAddNewTaskToReadyList+0xc8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	429a      	cmp	r2, r3
 800468c:	d207      	bcs.n	800469e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800468e:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <prvAddNewTaskToReadyList+0xdc>)
 8004690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000ddc 	.word	0x20000ddc
 80046ac:	20000908 	.word	0x20000908
 80046b0:	20000de8 	.word	0x20000de8
 80046b4:	20000df8 	.word	0x20000df8
 80046b8:	20000de4 	.word	0x20000de4
 80046bc:	2000090c 	.word	0x2000090c
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d018      	beq.n	8004708 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046d6:	4b14      	ldr	r3, [pc, #80]	@ (8004728 <vTaskDelay+0x64>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <vTaskDelay+0x32>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	60bb      	str	r3, [r7, #8]
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	e7fd      	b.n	80046f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046f6:	f000 f88b 	bl	8004810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046fa:	2100      	movs	r1, #0
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fd09 	bl	8005114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004702:	f000 f893 	bl	800482c <xTaskResumeAll>
 8004706:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d107      	bne.n	800471e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800470e:	4b07      	ldr	r3, [pc, #28]	@ (800472c <vTaskDelay+0x68>)
 8004710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000e04 	.word	0x20000e04
 800472c:	e000ed04 	.word	0xe000ed04

08004730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	@ 0x28
 8004734:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800473e:	463a      	mov	r2, r7
 8004740:	1d39      	adds	r1, r7, #4
 8004742:	f107 0308 	add.w	r3, r7, #8
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff f81c 	bl	8003784 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	9202      	str	r2, [sp, #8]
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	2300      	movs	r3, #0
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	2300      	movs	r3, #0
 800475c:	460a      	mov	r2, r1
 800475e:	4924      	ldr	r1, [pc, #144]	@ (80047f0 <vTaskStartScheduler+0xc0>)
 8004760:	4824      	ldr	r0, [pc, #144]	@ (80047f4 <vTaskStartScheduler+0xc4>)
 8004762:	f7ff fdf1 	bl	8004348 <xTaskCreateStatic>
 8004766:	4603      	mov	r3, r0
 8004768:	4a23      	ldr	r2, [pc, #140]	@ (80047f8 <vTaskStartScheduler+0xc8>)
 800476a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800476c:	4b22      	ldr	r3, [pc, #136]	@ (80047f8 <vTaskStartScheduler+0xc8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e001      	b.n	800477e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d102      	bne.n	800478a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004784:	f000 fd1a 	bl	80051bc <xTimerCreateTimerTask>
 8004788:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d11b      	bne.n	80047c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	613b      	str	r3, [r7, #16]
}
 80047a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047a4:	4b15      	ldr	r3, [pc, #84]	@ (80047fc <vTaskStartScheduler+0xcc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3354      	adds	r3, #84	@ 0x54
 80047aa:	4a15      	ldr	r2, [pc, #84]	@ (8004800 <vTaskStartScheduler+0xd0>)
 80047ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <vTaskStartScheduler+0xd4>)
 80047b0:	f04f 32ff 	mov.w	r2, #4294967295
 80047b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047b6:	4b14      	ldr	r3, [pc, #80]	@ (8004808 <vTaskStartScheduler+0xd8>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047bc:	4b13      	ldr	r3, [pc, #76]	@ (800480c <vTaskStartScheduler+0xdc>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047c2:	f001 f8e5 	bl	8005990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047c6:	e00f      	b.n	80047e8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d10b      	bne.n	80047e8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	60fb      	str	r3, [r7, #12]
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <vTaskStartScheduler+0xb4>
}
 80047e8:	bf00      	nop
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	08006b54 	.word	0x08006b54
 80047f4:	08004e41 	.word	0x08004e41
 80047f8:	20000e00 	.word	0x20000e00
 80047fc:	20000908 	.word	0x20000908
 8004800:	2000001c 	.word	0x2000001c
 8004804:	20000dfc 	.word	0x20000dfc
 8004808:	20000de8 	.word	0x20000de8
 800480c:	20000de0 	.word	0x20000de0

08004810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004814:	4b04      	ldr	r3, [pc, #16]	@ (8004828 <vTaskSuspendAll+0x18>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	4a03      	ldr	r2, [pc, #12]	@ (8004828 <vTaskSuspendAll+0x18>)
 800481c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800481e:	bf00      	nop
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	20000e04 	.word	0x20000e04

0800482c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800483a:	4b42      	ldr	r3, [pc, #264]	@ (8004944 <xTaskResumeAll+0x118>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10b      	bne.n	800485a <xTaskResumeAll+0x2e>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	603b      	str	r3, [r7, #0]
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	e7fd      	b.n	8004856 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800485a:	f001 f93d 	bl	8005ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800485e:	4b39      	ldr	r3, [pc, #228]	@ (8004944 <xTaskResumeAll+0x118>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3b01      	subs	r3, #1
 8004864:	4a37      	ldr	r2, [pc, #220]	@ (8004944 <xTaskResumeAll+0x118>)
 8004866:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004868:	4b36      	ldr	r3, [pc, #216]	@ (8004944 <xTaskResumeAll+0x118>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d162      	bne.n	8004936 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004870:	4b35      	ldr	r3, [pc, #212]	@ (8004948 <xTaskResumeAll+0x11c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d05e      	beq.n	8004936 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004878:	e02f      	b.n	80048da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487a:	4b34      	ldr	r3, [pc, #208]	@ (800494c <xTaskResumeAll+0x120>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3318      	adds	r3, #24
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff f83a 	bl	8003900 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff f835 	bl	8003900 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800489a:	4b2d      	ldr	r3, [pc, #180]	@ (8004950 <xTaskResumeAll+0x124>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d903      	bls.n	80048aa <xTaskResumeAll+0x7e>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004950 <xTaskResumeAll+0x124>)
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4a27      	ldr	r2, [pc, #156]	@ (8004954 <xTaskResumeAll+0x128>)
 80048b8:	441a      	add	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3304      	adds	r3, #4
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f7fe ffc0 	bl	8003846 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ca:	4b23      	ldr	r3, [pc, #140]	@ (8004958 <xTaskResumeAll+0x12c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d302      	bcc.n	80048da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80048d4:	4b21      	ldr	r3, [pc, #132]	@ (800495c <xTaskResumeAll+0x130>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048da:	4b1c      	ldr	r3, [pc, #112]	@ (800494c <xTaskResumeAll+0x120>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1cb      	bne.n	800487a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048e8:	f000 fb66 	bl	8004fb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004960 <xTaskResumeAll+0x134>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d010      	beq.n	800491a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048f8:	f000 f846 	bl	8004988 <xTaskIncrementTick>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004902:	4b16      	ldr	r3, [pc, #88]	@ (800495c <xTaskResumeAll+0x130>)
 8004904:	2201      	movs	r2, #1
 8004906:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3b01      	subs	r3, #1
 800490c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f1      	bne.n	80048f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004914:	4b12      	ldr	r3, [pc, #72]	@ (8004960 <xTaskResumeAll+0x134>)
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800491a:	4b10      	ldr	r3, [pc, #64]	@ (800495c <xTaskResumeAll+0x130>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004922:	2301      	movs	r3, #1
 8004924:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004926:	4b0f      	ldr	r3, [pc, #60]	@ (8004964 <xTaskResumeAll+0x138>)
 8004928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004936:	f001 f901 	bl	8005b3c <vPortExitCritical>

	return xAlreadyYielded;
 800493a:	68bb      	ldr	r3, [r7, #8]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000e04 	.word	0x20000e04
 8004948:	20000ddc 	.word	0x20000ddc
 800494c:	20000d9c 	.word	0x20000d9c
 8004950:	20000de4 	.word	0x20000de4
 8004954:	2000090c 	.word	0x2000090c
 8004958:	20000908 	.word	0x20000908
 800495c:	20000df0 	.word	0x20000df0
 8004960:	20000dec 	.word	0x20000dec
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800496e:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <xTaskGetTickCount+0x1c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004974:	687b      	ldr	r3, [r7, #4]
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000de0 	.word	0x20000de0

08004988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004992:	4b4f      	ldr	r3, [pc, #316]	@ (8004ad0 <xTaskIncrementTick+0x148>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f040 8090 	bne.w	8004abc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800499c:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad4 <xTaskIncrementTick+0x14c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049a4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ad4 <xTaskIncrementTick+0x14c>)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d121      	bne.n	80049f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80049b0:	4b49      	ldr	r3, [pc, #292]	@ (8004ad8 <xTaskIncrementTick+0x150>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	603b      	str	r3, [r7, #0]
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	e7fd      	b.n	80049ce <xTaskIncrementTick+0x46>
 80049d2:	4b41      	ldr	r3, [pc, #260]	@ (8004ad8 <xTaskIncrementTick+0x150>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	4b40      	ldr	r3, [pc, #256]	@ (8004adc <xTaskIncrementTick+0x154>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a3e      	ldr	r2, [pc, #248]	@ (8004ad8 <xTaskIncrementTick+0x150>)
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4a3e      	ldr	r2, [pc, #248]	@ (8004adc <xTaskIncrementTick+0x154>)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae0 <xTaskIncrementTick+0x158>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3301      	adds	r3, #1
 80049ec:	4a3c      	ldr	r2, [pc, #240]	@ (8004ae0 <xTaskIncrementTick+0x158>)
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	f000 fae2 	bl	8004fb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049f4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae4 <xTaskIncrementTick+0x15c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d349      	bcc.n	8004a92 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fe:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <xTaskIncrementTick+0x150>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a08:	4b36      	ldr	r3, [pc, #216]	@ (8004ae4 <xTaskIncrementTick+0x15c>)
 8004a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0e:	601a      	str	r2, [r3, #0]
					break;
 8004a10:	e03f      	b.n	8004a92 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a12:	4b31      	ldr	r3, [pc, #196]	@ (8004ad8 <xTaskIncrementTick+0x150>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d203      	bcs.n	8004a32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae4 <xTaskIncrementTick+0x15c>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a30:	e02f      	b.n	8004a92 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	3304      	adds	r3, #4
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe ff62 	bl	8003900 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	3318      	adds	r3, #24
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe ff59 	bl	8003900 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a52:	4b25      	ldr	r3, [pc, #148]	@ (8004ae8 <xTaskIncrementTick+0x160>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d903      	bls.n	8004a62 <xTaskIncrementTick+0xda>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ae8 <xTaskIncrementTick+0x160>)
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004aec <xTaskIncrementTick+0x164>)
 8004a70:	441a      	add	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7fe fee4 	bl	8003846 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a82:	4b1b      	ldr	r3, [pc, #108]	@ (8004af0 <xTaskIncrementTick+0x168>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d3b8      	bcc.n	80049fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a90:	e7b5      	b.n	80049fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a92:	4b17      	ldr	r3, [pc, #92]	@ (8004af0 <xTaskIncrementTick+0x168>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a98:	4914      	ldr	r1, [pc, #80]	@ (8004aec <xTaskIncrementTick+0x164>)
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d901      	bls.n	8004aae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004aae:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <xTaskIncrementTick+0x16c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	e004      	b.n	8004ac6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004abc:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <xTaskIncrementTick+0x170>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8004af8 <xTaskIncrementTick+0x170>)
 8004ac4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ac6:	697b      	ldr	r3, [r7, #20]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000e04 	.word	0x20000e04
 8004ad4:	20000de0 	.word	0x20000de0
 8004ad8:	20000d94 	.word	0x20000d94
 8004adc:	20000d98 	.word	0x20000d98
 8004ae0:	20000df4 	.word	0x20000df4
 8004ae4:	20000dfc 	.word	0x20000dfc
 8004ae8:	20000de4 	.word	0x20000de4
 8004aec:	2000090c 	.word	0x2000090c
 8004af0:	20000908 	.word	0x20000908
 8004af4:	20000df0 	.word	0x20000df0
 8004af8:	20000dec 	.word	0x20000dec

08004afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b02:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb0 <vTaskSwitchContext+0xb4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb4 <vTaskSwitchContext+0xb8>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b10:	e047      	b.n	8004ba2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004b12:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <vTaskSwitchContext+0xb8>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b18:	4b27      	ldr	r3, [pc, #156]	@ (8004bb8 <vTaskSwitchContext+0xbc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e011      	b.n	8004b44 <vTaskSwitchContext+0x48>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <vTaskSwitchContext+0x42>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	607b      	str	r3, [r7, #4]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <vTaskSwitchContext+0x3e>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	491d      	ldr	r1, [pc, #116]	@ (8004bbc <vTaskSwitchContext+0xc0>)
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0e3      	beq.n	8004b20 <vTaskSwitchContext+0x24>
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <vTaskSwitchContext+0xc0>)
 8004b64:	4413      	add	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d104      	bne.n	8004b88 <vTaskSwitchContext+0x8c>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	605a      	str	r2, [r3, #4]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc0 <vTaskSwitchContext+0xc4>)
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	4a09      	ldr	r2, [pc, #36]	@ (8004bb8 <vTaskSwitchContext+0xbc>)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b98:	4b09      	ldr	r3, [pc, #36]	@ (8004bc0 <vTaskSwitchContext+0xc4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3354      	adds	r3, #84	@ 0x54
 8004b9e:	4a09      	ldr	r2, [pc, #36]	@ (8004bc4 <vTaskSwitchContext+0xc8>)
 8004ba0:	6013      	str	r3, [r2, #0]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	20000e04 	.word	0x20000e04
 8004bb4:	20000df0 	.word	0x20000df0
 8004bb8:	20000de4 	.word	0x20000de4
 8004bbc:	2000090c 	.word	0x2000090c
 8004bc0:	20000908 	.word	0x20000908
 8004bc4:	2000001c 	.word	0x2000001c

08004bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60fb      	str	r3, [r7, #12]
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	e7fd      	b.n	8004bec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bf0:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <vTaskPlaceOnEventList+0x48>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3318      	adds	r3, #24
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7fe fe48 	bl	800388e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bfe:	2101      	movs	r1, #1
 8004c00:	6838      	ldr	r0, [r7, #0]
 8004c02:	f000 fa87 	bl	8005114 <prvAddCurrentTaskToDelayedList>
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000908 	.word	0x20000908

08004c14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	617b      	str	r3, [r7, #20]
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	e7fd      	b.n	8004c3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3318      	adds	r3, #24
 8004c44:	4619      	mov	r1, r3
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7fe fdfd 	bl	8003846 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004c52:	f04f 33ff 	mov.w	r3, #4294967295
 8004c56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	68b8      	ldr	r0, [r7, #8]
 8004c5c:	f000 fa5a 	bl	8005114 <prvAddCurrentTaskToDelayedList>
	}
 8004c60:	bf00      	nop
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20000908 	.word	0x20000908

08004c6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	60fb      	str	r3, [r7, #12]
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	e7fd      	b.n	8004c96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	3318      	adds	r3, #24
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fe2e 	bl	8003900 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d1c <xTaskRemoveFromEventList+0xb0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11d      	bne.n	8004ce8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fe fe25 	bl	8003900 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cba:	4b19      	ldr	r3, [pc, #100]	@ (8004d20 <xTaskRemoveFromEventList+0xb4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d903      	bls.n	8004cca <xTaskRemoveFromEventList+0x5e>
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc6:	4a16      	ldr	r2, [pc, #88]	@ (8004d20 <xTaskRemoveFromEventList+0xb4>)
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4a13      	ldr	r2, [pc, #76]	@ (8004d24 <xTaskRemoveFromEventList+0xb8>)
 8004cd8:	441a      	add	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe fdb0 	bl	8003846 <vListInsertEnd>
 8004ce6:	e005      	b.n	8004cf4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	3318      	adds	r3, #24
 8004cec:	4619      	mov	r1, r3
 8004cee:	480e      	ldr	r0, [pc, #56]	@ (8004d28 <xTaskRemoveFromEventList+0xbc>)
 8004cf0:	f7fe fda9 	bl	8003846 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d2c <xTaskRemoveFromEventList+0xc0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d905      	bls.n	8004d0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d02:	2301      	movs	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d06:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <xTaskRemoveFromEventList+0xc4>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e001      	b.n	8004d12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d12:	697b      	ldr	r3, [r7, #20]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000e04 	.word	0x20000e04
 8004d20:	20000de4 	.word	0x20000de4
 8004d24:	2000090c 	.word	0x2000090c
 8004d28:	20000d9c 	.word	0x20000d9c
 8004d2c:	20000908 	.word	0x20000908
 8004d30:	20000df0 	.word	0x20000df0

08004d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d3c:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <vTaskInternalSetTimeOutState+0x24>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <vTaskInternalSetTimeOutState+0x28>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	605a      	str	r2, [r3, #4]
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	20000df4 	.word	0x20000df4
 8004d5c:	20000de0 	.word	0x20000de0

08004d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	613b      	str	r3, [r7, #16]
}
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	60fb      	str	r3, [r7, #12]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004da6:	f000 fe97 	bl	8005ad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004daa:	4b1d      	ldr	r3, [pc, #116]	@ (8004e20 <xTaskCheckForTimeOut+0xc0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d102      	bne.n	8004dca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e023      	b.n	8004e12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <xTaskCheckForTimeOut+0xc4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d007      	beq.n	8004de6 <xTaskCheckForTimeOut+0x86>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d302      	bcc.n	8004de6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	e015      	b.n	8004e12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d20b      	bcs.n	8004e08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad2      	subs	r2, r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ff99 	bl	8004d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	e004      	b.n	8004e12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e12:	f000 fe93 	bl	8005b3c <vPortExitCritical>

	return xReturn;
 8004e16:	69fb      	ldr	r3, [r7, #28]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3720      	adds	r7, #32
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000de0 	.word	0x20000de0
 8004e24:	20000df4 	.word	0x20000df4

08004e28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	@ (8004e3c <vTaskMissedYield+0x14>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000df0 	.word	0x20000df0

08004e40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e48:	f000 f852 	bl	8004ef0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e4c:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <prvIdleTask+0x28>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d9f9      	bls.n	8004e48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e54:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <prvIdleTask+0x2c>)
 8004e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e64:	e7f0      	b.n	8004e48 <prvIdleTask+0x8>
 8004e66:	bf00      	nop
 8004e68:	2000090c 	.word	0x2000090c
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	e00c      	b.n	8004e96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4a12      	ldr	r2, [pc, #72]	@ (8004ed0 <prvInitialiseTaskLists+0x60>)
 8004e88:	4413      	add	r3, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fcae 	bl	80037ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3301      	adds	r3, #1
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b37      	cmp	r3, #55	@ 0x37
 8004e9a:	d9ef      	bls.n	8004e7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e9c:	480d      	ldr	r0, [pc, #52]	@ (8004ed4 <prvInitialiseTaskLists+0x64>)
 8004e9e:	f7fe fca5 	bl	80037ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ea2:	480d      	ldr	r0, [pc, #52]	@ (8004ed8 <prvInitialiseTaskLists+0x68>)
 8004ea4:	f7fe fca2 	bl	80037ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ea8:	480c      	ldr	r0, [pc, #48]	@ (8004edc <prvInitialiseTaskLists+0x6c>)
 8004eaa:	f7fe fc9f 	bl	80037ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004eae:	480c      	ldr	r0, [pc, #48]	@ (8004ee0 <prvInitialiseTaskLists+0x70>)
 8004eb0:	f7fe fc9c 	bl	80037ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004eb4:	480b      	ldr	r0, [pc, #44]	@ (8004ee4 <prvInitialiseTaskLists+0x74>)
 8004eb6:	f7fe fc99 	bl	80037ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <prvInitialiseTaskLists+0x78>)
 8004ebc:	4a05      	ldr	r2, [pc, #20]	@ (8004ed4 <prvInitialiseTaskLists+0x64>)
 8004ebe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <prvInitialiseTaskLists+0x7c>)
 8004ec2:	4a05      	ldr	r2, [pc, #20]	@ (8004ed8 <prvInitialiseTaskLists+0x68>)
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	2000090c 	.word	0x2000090c
 8004ed4:	20000d6c 	.word	0x20000d6c
 8004ed8:	20000d80 	.word	0x20000d80
 8004edc:	20000d9c 	.word	0x20000d9c
 8004ee0:	20000db0 	.word	0x20000db0
 8004ee4:	20000dc8 	.word	0x20000dc8
 8004ee8:	20000d94 	.word	0x20000d94
 8004eec:	20000d98 	.word	0x20000d98

08004ef0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ef6:	e019      	b.n	8004f2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ef8:	f000 fdee 	bl	8005ad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004efc:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <prvCheckTasksWaitingTermination+0x50>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fe fcf9 	bl	8003900 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f44 <prvCheckTasksWaitingTermination+0x54>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	4a0b      	ldr	r2, [pc, #44]	@ (8004f44 <prvCheckTasksWaitingTermination+0x54>)
 8004f16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f18:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <prvCheckTasksWaitingTermination+0x58>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f48 <prvCheckTasksWaitingTermination+0x58>)
 8004f20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f22:	f000 fe0b 	bl	8005b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f810 	bl	8004f4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f2c:	4b06      	ldr	r3, [pc, #24]	@ (8004f48 <prvCheckTasksWaitingTermination+0x58>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e1      	bne.n	8004ef8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000db0 	.word	0x20000db0
 8004f44:	20000ddc 	.word	0x20000ddc
 8004f48:	20000dc4 	.word	0x20000dc4

08004f4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3354      	adds	r3, #84	@ 0x54
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 fadd 	bl	8006518 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d108      	bne.n	8004f7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 ffa3 	bl	8005eb8 <vPortFree>
				vPortFree( pxTCB );
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 ffa0 	bl	8005eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f78:	e019      	b.n	8004fae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d103      	bne.n	8004f8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 ff97 	bl	8005eb8 <vPortFree>
	}
 8004f8a:	e010      	b.n	8004fae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d00b      	beq.n	8004fae <prvDeleteTCB+0x62>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60fb      	str	r3, [r7, #12]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <prvDeleteTCB+0x5e>
	}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff0 <prvResetNextTaskUnblockTime+0x38>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8004fca:	f04f 32ff 	mov.w	r2, #4294967295
 8004fce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fd0:	e008      	b.n	8004fe4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd2:	4b07      	ldr	r3, [pc, #28]	@ (8004ff0 <prvResetNextTaskUnblockTime+0x38>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4a04      	ldr	r2, [pc, #16]	@ (8004ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8004fe2:	6013      	str	r3, [r2, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000d94 	.word	0x20000d94
 8004ff4:	20000dfc 	.word	0x20000dfc

08004ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <xTaskGetSchedulerState+0x34>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005006:	2301      	movs	r3, #1
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	e008      	b.n	800501e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500c:	4b08      	ldr	r3, [pc, #32]	@ (8005030 <xTaskGetSchedulerState+0x38>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005014:	2302      	movs	r3, #2
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	e001      	b.n	800501e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800501a:	2300      	movs	r3, #0
 800501c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800501e:	687b      	ldr	r3, [r7, #4]
	}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	20000de8 	.word	0x20000de8
 8005030:	20000e04 	.word	0x20000e04

08005034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d058      	beq.n	80050fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800504a:	4b2f      	ldr	r3, [pc, #188]	@ (8005108 <xTaskPriorityDisinherit+0xd4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	429a      	cmp	r2, r3
 8005052:	d00b      	beq.n	800506c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	60fb      	str	r3, [r7, #12]
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	e7fd      	b.n	8005068 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60bb      	str	r3, [r7, #8]
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005090:	1e5a      	subs	r2, r3, #1
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509e:	429a      	cmp	r2, r3
 80050a0:	d02c      	beq.n	80050fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d128      	bne.n	80050fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fc26 	bl	8003900 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050cc:	4b0f      	ldr	r3, [pc, #60]	@ (800510c <xTaskPriorityDisinherit+0xd8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d903      	bls.n	80050dc <xTaskPriorityDisinherit+0xa8>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	4a0c      	ldr	r2, [pc, #48]	@ (800510c <xTaskPriorityDisinherit+0xd8>)
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4a09      	ldr	r2, [pc, #36]	@ (8005110 <xTaskPriorityDisinherit+0xdc>)
 80050ea:	441a      	add	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7fe fba7 	bl	8003846 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050fc:	697b      	ldr	r3, [r7, #20]
	}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000908 	.word	0x20000908
 800510c:	20000de4 	.word	0x20000de4
 8005110:	2000090c 	.word	0x2000090c

08005114 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800511e:	4b21      	ldr	r3, [pc, #132]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005124:	4b20      	ldr	r3, [pc, #128]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3304      	adds	r3, #4
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fbe8 	bl	8003900 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d10a      	bne.n	800514e <prvAddCurrentTaskToDelayedList+0x3a>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800513e:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3304      	adds	r3, #4
 8005144:	4619      	mov	r1, r3
 8005146:	4819      	ldr	r0, [pc, #100]	@ (80051ac <prvAddCurrentTaskToDelayedList+0x98>)
 8005148:	f7fe fb7d 	bl	8003846 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800514c:	e026      	b.n	800519c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4413      	add	r3, r2
 8005154:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005156:	4b14      	ldr	r3, [pc, #80]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	429a      	cmp	r2, r3
 8005164:	d209      	bcs.n	800517a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005166:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b0f      	ldr	r3, [pc, #60]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f7fe fb8b 	bl	800388e <vListInsert>
}
 8005178:	e010      	b.n	800519c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800517a:	4b0e      	ldr	r3, [pc, #56]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b0a      	ldr	r3, [pc, #40]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f7fe fb81 	bl	800388e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800518c:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d202      	bcs.n	800519c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005196:	4a08      	ldr	r2, [pc, #32]	@ (80051b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6013      	str	r3, [r2, #0]
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000de0 	.word	0x20000de0
 80051a8:	20000908 	.word	0x20000908
 80051ac:	20000dc8 	.word	0x20000dc8
 80051b0:	20000d98 	.word	0x20000d98
 80051b4:	20000d94 	.word	0x20000d94
 80051b8:	20000dfc 	.word	0x20000dfc

080051bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	@ 0x28
 80051c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051c6:	f000 fb13 	bl	80057f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005240 <xTimerCreateTimerTask+0x84>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d021      	beq.n	8005216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051da:	1d3a      	adds	r2, r7, #4
 80051dc:	f107 0108 	add.w	r1, r7, #8
 80051e0:	f107 030c 	add.w	r3, r7, #12
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fe fae7 	bl	80037b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	9202      	str	r2, [sp, #8]
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	2302      	movs	r3, #2
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	2300      	movs	r3, #0
 80051fa:	460a      	mov	r2, r1
 80051fc:	4911      	ldr	r1, [pc, #68]	@ (8005244 <xTimerCreateTimerTask+0x88>)
 80051fe:	4812      	ldr	r0, [pc, #72]	@ (8005248 <xTimerCreateTimerTask+0x8c>)
 8005200:	f7ff f8a2 	bl	8004348 <xTaskCreateStatic>
 8005204:	4603      	mov	r3, r0
 8005206:	4a11      	ldr	r2, [pc, #68]	@ (800524c <xTimerCreateTimerTask+0x90>)
 8005208:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800520a:	4b10      	ldr	r3, [pc, #64]	@ (800524c <xTimerCreateTimerTask+0x90>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005212:	2301      	movs	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	613b      	str	r3, [r7, #16]
}
 800522e:	bf00      	nop
 8005230:	bf00      	nop
 8005232:	e7fd      	b.n	8005230 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005234:	697b      	ldr	r3, [r7, #20]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000e38 	.word	0x20000e38
 8005244:	08006b5c 	.word	0x08006b5c
 8005248:	08005389 	.word	0x08005389
 800524c:	20000e3c 	.word	0x20000e3c

08005250 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	@ 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <xTimerGenericCommand+0x30>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	623b      	str	r3, [r7, #32]
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005280:	4b19      	ldr	r3, [pc, #100]	@ (80052e8 <xTimerGenericCommand+0x98>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d02a      	beq.n	80052de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b05      	cmp	r3, #5
 8005298:	dc18      	bgt.n	80052cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800529a:	f7ff fead 	bl	8004ff8 <xTaskGetSchedulerState>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d109      	bne.n	80052b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052a4:	4b10      	ldr	r3, [pc, #64]	@ (80052e8 <xTimerGenericCommand+0x98>)
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	f107 0110 	add.w	r1, r7, #16
 80052ac:	2300      	movs	r3, #0
 80052ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b0:	f7fe fc5a 	bl	8003b68 <xQueueGenericSend>
 80052b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80052b6:	e012      	b.n	80052de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052b8:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <xTimerGenericCommand+0x98>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	f107 0110 	add.w	r1, r7, #16
 80052c0:	2300      	movs	r3, #0
 80052c2:	2200      	movs	r2, #0
 80052c4:	f7fe fc50 	bl	8003b68 <xQueueGenericSend>
 80052c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80052ca:	e008      	b.n	80052de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052cc:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <xTimerGenericCommand+0x98>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	f107 0110 	add.w	r1, r7, #16
 80052d4:	2300      	movs	r3, #0
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	f7fe fd48 	bl	8003d6c <xQueueGenericSendFromISR>
 80052dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3728      	adds	r7, #40	@ 0x28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000e38 	.word	0x20000e38

080052ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f6:	4b23      	ldr	r3, [pc, #140]	@ (8005384 <prvProcessExpiredTimer+0x98>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	3304      	adds	r3, #4
 8005304:	4618      	mov	r0, r3
 8005306:	f7fe fafb 	bl	8003900 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d023      	beq.n	8005360 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	18d1      	adds	r1, r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	6978      	ldr	r0, [r7, #20]
 8005326:	f000 f8d5 	bl	80054d4 <prvInsertTimerInActiveList>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d020      	beq.n	8005372 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005330:	2300      	movs	r3, #0
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	2100      	movs	r1, #0
 800533a:	6978      	ldr	r0, [r7, #20]
 800533c:	f7ff ff88 	bl	8005250 <xTimerGenericCommand>
 8005340:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d114      	bne.n	8005372 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	60fb      	str	r3, [r7, #12]
}
 800535a:	bf00      	nop
 800535c:	bf00      	nop
 800535e:	e7fd      	b.n	800535c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	b2da      	uxtb	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	6978      	ldr	r0, [r7, #20]
 8005378:	4798      	blx	r3
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000e30 	.word	0x20000e30

08005388 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005390:	f107 0308 	add.w	r3, r7, #8
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f859 	bl	800544c <prvGetNextExpireTime>
 800539a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4619      	mov	r1, r3
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f805 	bl	80053b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053a6:	f000 f8d7 	bl	8005558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053aa:	bf00      	nop
 80053ac:	e7f0      	b.n	8005390 <prvTimerTask+0x8>
	...

080053b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053ba:	f7ff fa29 	bl	8004810 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053be:	f107 0308 	add.w	r3, r7, #8
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f866 	bl	8005494 <prvSampleTimeNow>
 80053c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d130      	bne.n	8005432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <prvProcessTimerOrBlockTask+0x3c>
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d806      	bhi.n	80053ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053de:	f7ff fa25 	bl	800482c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ff81 	bl	80052ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053ea:	e024      	b.n	8005436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053f2:	4b13      	ldr	r3, [pc, #76]	@ (8005440 <prvProcessTimerOrBlockTask+0x90>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <prvProcessTimerOrBlockTask+0x50>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <prvProcessTimerOrBlockTask+0x52>
 8005400:	2300      	movs	r3, #0
 8005402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005404:	4b0f      	ldr	r3, [pc, #60]	@ (8005444 <prvProcessTimerOrBlockTask+0x94>)
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	4619      	mov	r1, r3
 8005412:	f7fe ff65 	bl	80042e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005416:	f7ff fa09 	bl	800482c <xTaskResumeAll>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005420:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <prvProcessTimerOrBlockTask+0x98>)
 8005422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
}
 8005430:	e001      	b.n	8005436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005432:	f7ff f9fb 	bl	800482c <xTaskResumeAll>
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000e34 	.word	0x20000e34
 8005444:	20000e38 	.word	0x20000e38
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005454:	4b0e      	ldr	r3, [pc, #56]	@ (8005490 <prvGetNextExpireTime+0x44>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <prvGetNextExpireTime+0x16>
 800545e:	2201      	movs	r2, #1
 8005460:	e000      	b.n	8005464 <prvGetNextExpireTime+0x18>
 8005462:	2200      	movs	r2, #0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d105      	bne.n	800547c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005470:	4b07      	ldr	r3, [pc, #28]	@ (8005490 <prvGetNextExpireTime+0x44>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e001      	b.n	8005480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20000e30 	.word	0x20000e30

08005494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800549c:	f7ff fa64 	bl	8004968 <xTaskGetTickCount>
 80054a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054a2:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <prvSampleTimeNow+0x3c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d205      	bcs.n	80054b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054ac:	f000 f93a 	bl	8005724 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e002      	b.n	80054be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054be:	4a04      	ldr	r2, [pc, #16]	@ (80054d0 <prvSampleTimeNow+0x3c>)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054c4:	68fb      	ldr	r3, [r7, #12]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000e40 	.word	0x20000e40

080054d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d812      	bhi.n	8005520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	1ad2      	subs	r2, r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e01b      	b.n	8005546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800550e:	4b10      	ldr	r3, [pc, #64]	@ (8005550 <prvInsertTimerInActiveList+0x7c>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3304      	adds	r3, #4
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f7fe f9b8 	bl	800388e <vListInsert>
 800551e:	e012      	b.n	8005546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d206      	bcs.n	8005536 <prvInsertTimerInActiveList+0x62>
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d302      	bcc.n	8005536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005530:	2301      	movs	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e007      	b.n	8005546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005536:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <prvInsertTimerInActiveList+0x80>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3304      	adds	r3, #4
 800553e:	4619      	mov	r1, r3
 8005540:	4610      	mov	r0, r2
 8005542:	f7fe f9a4 	bl	800388e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005546:	697b      	ldr	r3, [r7, #20]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000e34 	.word	0x20000e34
 8005554:	20000e30 	.word	0x20000e30

08005558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08e      	sub	sp, #56	@ 0x38
 800555c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800555e:	e0ce      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	da19      	bge.n	800559a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	3304      	adds	r3, #4
 800556a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	61fb      	str	r3, [r7, #28]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005590:	6850      	ldr	r0, [r2, #4]
 8005592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005594:	6892      	ldr	r2, [r2, #8]
 8005596:	4611      	mov	r1, r2
 8005598:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f2c0 80ae 	blt.w	80056fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b0:	3304      	adds	r3, #4
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe f9a4 	bl	8003900 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055b8:	463b      	mov	r3, r7
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff ff6a 	bl	8005494 <prvSampleTimeNow>
 80055c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b09      	cmp	r3, #9
 80055c6:	f200 8097 	bhi.w	80056f8 <prvProcessReceivedCommands+0x1a0>
 80055ca:	a201      	add	r2, pc, #4	@ (adr r2, 80055d0 <prvProcessReceivedCommands+0x78>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	080055f9 	.word	0x080055f9
 80055dc:	0800566f 	.word	0x0800566f
 80055e0:	08005683 	.word	0x08005683
 80055e4:	080056cf 	.word	0x080056cf
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	080055f9 	.word	0x080055f9
 80055f0:	0800566f 	.word	0x0800566f
 80055f4:	08005683 	.word	0x08005683
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	18d1      	adds	r1, r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005618:	f7ff ff5c 	bl	80054d4 <prvInsertTimerInActiveList>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d06c      	beq.n	80056fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005628:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800562a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d061      	beq.n	80056fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	441a      	add	r2, r3
 8005640:	2300      	movs	r3, #0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	2100      	movs	r1, #0
 8005648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800564a:	f7ff fe01 	bl	8005250 <xTimerGenericCommand>
 800564e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d152      	bne.n	80056fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	61bb      	str	r3, [r7, #24]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800566e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	b2da      	uxtb	r2, r3
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005680:	e03d      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	b2da      	uxtb	r2, r3
 800568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005690:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005698:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800569a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	617b      	str	r3, [r7, #20]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	18d1      	adds	r1, r2, r3
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056c8:	f7ff ff04 	bl	80054d4 <prvInsertTimerInActiveList>
					break;
 80056cc:	e017      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80056dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056de:	f000 fbeb 	bl	8005eb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056e2:	e00c      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80056f6:	e002      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80056f8:	bf00      	nop
 80056fa:	e000      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>
					break;
 80056fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056fe:	4b08      	ldr	r3, [pc, #32]	@ (8005720 <prvProcessReceivedCommands+0x1c8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	1d39      	adds	r1, r7, #4
 8005704:	2200      	movs	r2, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fbce 	bl	8003ea8 <xQueueReceive>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	f47f af26 	bne.w	8005560 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	3730      	adds	r7, #48	@ 0x30
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000e38 	.word	0x20000e38

08005724 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800572a:	e049      	b.n	80057c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800572c:	4b2e      	ldr	r3, [pc, #184]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005736:	4b2c      	ldr	r3, [pc, #176]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3304      	adds	r3, #4
 8005744:	4618      	mov	r0, r3
 8005746:	f7fe f8db 	bl	8003900 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d02f      	beq.n	80057c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	429a      	cmp	r2, r3
 8005770:	d90e      	bls.n	8005790 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800577e:	4b1a      	ldr	r3, [pc, #104]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3304      	adds	r3, #4
 8005786:	4619      	mov	r1, r3
 8005788:	4610      	mov	r0, r2
 800578a:	f7fe f880 	bl	800388e <vListInsert>
 800578e:	e017      	b.n	80057c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005790:	2300      	movs	r3, #0
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	2100      	movs	r1, #0
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f7ff fd58 	bl	8005250 <xTimerGenericCommand>
 80057a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	603b      	str	r3, [r7, #0]
}
 80057ba:	bf00      	nop
 80057bc:	bf00      	nop
 80057be:	e7fd      	b.n	80057bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057c0:	4b09      	ldr	r3, [pc, #36]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1b0      	bne.n	800572c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80057ca:	4b07      	ldr	r3, [pc, #28]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057d0:	4b06      	ldr	r3, [pc, #24]	@ (80057ec <prvSwitchTimerLists+0xc8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a04      	ldr	r2, [pc, #16]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 80057d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057d8:	4a04      	ldr	r2, [pc, #16]	@ (80057ec <prvSwitchTimerLists+0xc8>)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6013      	str	r3, [r2, #0]
}
 80057de:	bf00      	nop
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000e30 	.word	0x20000e30
 80057ec:	20000e34 	.word	0x20000e34

080057f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057f6:	f000 f96f 	bl	8005ad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057fa:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <prvCheckForValidListAndQueue+0x60>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d120      	bne.n	8005844 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005802:	4814      	ldr	r0, [pc, #80]	@ (8005854 <prvCheckForValidListAndQueue+0x64>)
 8005804:	f7fd fff2 	bl	80037ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005808:	4813      	ldr	r0, [pc, #76]	@ (8005858 <prvCheckForValidListAndQueue+0x68>)
 800580a:	f7fd ffef 	bl	80037ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800580e:	4b13      	ldr	r3, [pc, #76]	@ (800585c <prvCheckForValidListAndQueue+0x6c>)
 8005810:	4a10      	ldr	r2, [pc, #64]	@ (8005854 <prvCheckForValidListAndQueue+0x64>)
 8005812:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005814:	4b12      	ldr	r3, [pc, #72]	@ (8005860 <prvCheckForValidListAndQueue+0x70>)
 8005816:	4a10      	ldr	r2, [pc, #64]	@ (8005858 <prvCheckForValidListAndQueue+0x68>)
 8005818:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800581a:	2300      	movs	r3, #0
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4b11      	ldr	r3, [pc, #68]	@ (8005864 <prvCheckForValidListAndQueue+0x74>)
 8005820:	4a11      	ldr	r2, [pc, #68]	@ (8005868 <prvCheckForValidListAndQueue+0x78>)
 8005822:	2110      	movs	r1, #16
 8005824:	200a      	movs	r0, #10
 8005826:	f7fe f8ff 	bl	8003a28 <xQueueGenericCreateStatic>
 800582a:	4603      	mov	r3, r0
 800582c:	4a08      	ldr	r2, [pc, #32]	@ (8005850 <prvCheckForValidListAndQueue+0x60>)
 800582e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005830:	4b07      	ldr	r3, [pc, #28]	@ (8005850 <prvCheckForValidListAndQueue+0x60>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005838:	4b05      	ldr	r3, [pc, #20]	@ (8005850 <prvCheckForValidListAndQueue+0x60>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	490b      	ldr	r1, [pc, #44]	@ (800586c <prvCheckForValidListAndQueue+0x7c>)
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe fd24 	bl	800428c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005844:	f000 f97a 	bl	8005b3c <vPortExitCritical>
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000e38 	.word	0x20000e38
 8005854:	20000e08 	.word	0x20000e08
 8005858:	20000e1c 	.word	0x20000e1c
 800585c:	20000e30 	.word	0x20000e30
 8005860:	20000e34 	.word	0x20000e34
 8005864:	20000ee4 	.word	0x20000ee4
 8005868:	20000e44 	.word	0x20000e44
 800586c:	08006b64 	.word	0x08006b64

08005870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3b04      	subs	r3, #4
 8005880:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3b04      	subs	r3, #4
 800588e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f023 0201 	bic.w	r2, r3, #1
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3b04      	subs	r3, #4
 800589e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058a0:	4a0c      	ldr	r2, [pc, #48]	@ (80058d4 <pxPortInitialiseStack+0x64>)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3b14      	subs	r3, #20
 80058aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3b04      	subs	r3, #4
 80058b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f06f 0202 	mvn.w	r2, #2
 80058be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3b20      	subs	r3, #32
 80058c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058c6:	68fb      	ldr	r3, [r7, #12]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	080058d9 	.word	0x080058d9

080058d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058e2:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <prvTaskExitError+0x58>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d00b      	beq.n	8005904 <prvTaskExitError+0x2c>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	60fb      	str	r3, [r7, #12]
}
 80058fe:	bf00      	nop
 8005900:	bf00      	nop
 8005902:	e7fd      	b.n	8005900 <prvTaskExitError+0x28>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60bb      	str	r3, [r7, #8]
}
 8005916:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005918:	bf00      	nop
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0fc      	beq.n	800591a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	2000000c 	.word	0x2000000c
	...

08005940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005940:	4b07      	ldr	r3, [pc, #28]	@ (8005960 <pxCurrentTCBConst2>)
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	6808      	ldr	r0, [r1, #0]
 8005946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594a:	f380 8809 	msr	PSP, r0
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f04f 0000 	mov.w	r0, #0
 8005956:	f380 8811 	msr	BASEPRI, r0
 800595a:	4770      	bx	lr
 800595c:	f3af 8000 	nop.w

08005960 <pxCurrentTCBConst2>:
 8005960:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop

08005968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005968:	4808      	ldr	r0, [pc, #32]	@ (800598c <prvPortStartFirstTask+0x24>)
 800596a:	6800      	ldr	r0, [r0, #0]
 800596c:	6800      	ldr	r0, [r0, #0]
 800596e:	f380 8808 	msr	MSP, r0
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8814 	msr	CONTROL, r0
 800597a:	b662      	cpsie	i
 800597c:	b661      	cpsie	f
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	df00      	svc	0
 8005988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800598a:	bf00      	nop
 800598c:	e000ed08 	.word	0xe000ed08

08005990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005996:	4b47      	ldr	r3, [pc, #284]	@ (8005ab4 <xPortStartScheduler+0x124>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a47      	ldr	r2, [pc, #284]	@ (8005ab8 <xPortStartScheduler+0x128>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10b      	bne.n	80059b8 <xPortStartScheduler+0x28>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	613b      	str	r3, [r7, #16]
}
 80059b2:	bf00      	nop
 80059b4:	bf00      	nop
 80059b6:	e7fd      	b.n	80059b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059b8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ab4 <xPortStartScheduler+0x124>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a3f      	ldr	r2, [pc, #252]	@ (8005abc <xPortStartScheduler+0x12c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10b      	bne.n	80059da <xPortStartScheduler+0x4a>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	60fb      	str	r3, [r7, #12]
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	e7fd      	b.n	80059d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059da:	4b39      	ldr	r3, [pc, #228]	@ (8005ac0 <xPortStartScheduler+0x130>)
 80059dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	22ff      	movs	r2, #255	@ 0xff
 80059ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	4b31      	ldr	r3, [pc, #196]	@ (8005ac4 <xPortStartScheduler+0x134>)
 8005a00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a02:	4b31      	ldr	r3, [pc, #196]	@ (8005ac8 <xPortStartScheduler+0x138>)
 8005a04:	2207      	movs	r2, #7
 8005a06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a08:	e009      	b.n	8005a1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ac8 <xPortStartScheduler+0x138>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	4a2d      	ldr	r2, [pc, #180]	@ (8005ac8 <xPortStartScheduler+0x138>)
 8005a12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a26:	2b80      	cmp	r3, #128	@ 0x80
 8005a28:	d0ef      	beq.n	8005a0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a2a:	4b27      	ldr	r3, [pc, #156]	@ (8005ac8 <xPortStartScheduler+0x138>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1c3 0307 	rsb	r3, r3, #7
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d00b      	beq.n	8005a4e <xPortStartScheduler+0xbe>
	__asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	60bb      	str	r3, [r7, #8]
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	e7fd      	b.n	8005a4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac8 <xPortStartScheduler+0x138>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	021b      	lsls	r3, r3, #8
 8005a54:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac8 <xPortStartScheduler+0x138>)
 8005a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a58:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac8 <xPortStartScheduler+0x138>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a60:	4a19      	ldr	r2, [pc, #100]	@ (8005ac8 <xPortStartScheduler+0x138>)
 8005a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a6c:	4b17      	ldr	r3, [pc, #92]	@ (8005acc <xPortStartScheduler+0x13c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a16      	ldr	r2, [pc, #88]	@ (8005acc <xPortStartScheduler+0x13c>)
 8005a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a78:	4b14      	ldr	r3, [pc, #80]	@ (8005acc <xPortStartScheduler+0x13c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	@ (8005acc <xPortStartScheduler+0x13c>)
 8005a7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a84:	f000 f8da 	bl	8005c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a88:	4b11      	ldr	r3, [pc, #68]	@ (8005ad0 <xPortStartScheduler+0x140>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a8e:	f000 f8f9 	bl	8005c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a92:	4b10      	ldr	r3, [pc, #64]	@ (8005ad4 <xPortStartScheduler+0x144>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a0f      	ldr	r2, [pc, #60]	@ (8005ad4 <xPortStartScheduler+0x144>)
 8005a98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a9e:	f7ff ff63 	bl	8005968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005aa2:	f7ff f82b 	bl	8004afc <vTaskSwitchContext>
	prvTaskExitError();
 8005aa6:	f7ff ff17 	bl	80058d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	e000ed00 	.word	0xe000ed00
 8005ab8:	410fc271 	.word	0x410fc271
 8005abc:	410fc270 	.word	0x410fc270
 8005ac0:	e000e400 	.word	0xe000e400
 8005ac4:	20000f34 	.word	0x20000f34
 8005ac8:	20000f38 	.word	0x20000f38
 8005acc:	e000ed20 	.word	0xe000ed20
 8005ad0:	2000000c 	.word	0x2000000c
 8005ad4:	e000ef34 	.word	0xe000ef34

08005ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	607b      	str	r3, [r7, #4]
}
 8005af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005af2:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <vPortEnterCritical+0x5c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3301      	adds	r3, #1
 8005af8:	4a0e      	ldr	r2, [pc, #56]	@ (8005b34 <vPortEnterCritical+0x5c>)
 8005afa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005afc:	4b0d      	ldr	r3, [pc, #52]	@ (8005b34 <vPortEnterCritical+0x5c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d110      	bne.n	8005b26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b04:	4b0c      	ldr	r3, [pc, #48]	@ (8005b38 <vPortEnterCritical+0x60>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	603b      	str	r3, [r7, #0]
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
 8005b24:	e7fd      	b.n	8005b22 <vPortEnterCritical+0x4a>
	}
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	2000000c 	.word	0x2000000c
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b42:	4b12      	ldr	r3, [pc, #72]	@ (8005b8c <vPortExitCritical+0x50>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <vPortExitCritical+0x26>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	607b      	str	r3, [r7, #4]
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	e7fd      	b.n	8005b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b62:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <vPortExitCritical+0x50>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	4a08      	ldr	r2, [pc, #32]	@ (8005b8c <vPortExitCritical+0x50>)
 8005b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b6c:	4b07      	ldr	r3, [pc, #28]	@ (8005b8c <vPortExitCritical+0x50>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d105      	bne.n	8005b80 <vPortExitCritical+0x44>
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
}
 8005b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	2000000c 	.word	0x2000000c

08005b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b90:	f3ef 8009 	mrs	r0, PSP
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	4b15      	ldr	r3, [pc, #84]	@ (8005bf0 <pxCurrentTCBConst>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	f01e 0f10 	tst.w	lr, #16
 8005ba0:	bf08      	it	eq
 8005ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005baa:	6010      	str	r0, [r2, #0]
 8005bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005bb4:	f380 8811 	msr	BASEPRI, r0
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f7fe ff9c 	bl	8004afc <vTaskSwitchContext>
 8005bc4:	f04f 0000 	mov.w	r0, #0
 8005bc8:	f380 8811 	msr	BASEPRI, r0
 8005bcc:	bc09      	pop	{r0, r3}
 8005bce:	6819      	ldr	r1, [r3, #0]
 8005bd0:	6808      	ldr	r0, [r1, #0]
 8005bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd6:	f01e 0f10 	tst.w	lr, #16
 8005bda:	bf08      	it	eq
 8005bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005be0:	f380 8809 	msr	PSP, r0
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	f3af 8000 	nop.w

08005bf0 <pxCurrentTCBConst>:
 8005bf0:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop

08005bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	607b      	str	r3, [r7, #4]
}
 8005c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c12:	f7fe feb9 	bl	8004988 <xTaskIncrementTick>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c1c:	4b06      	ldr	r3, [pc, #24]	@ (8005c38 <xPortSysTickHandler+0x40>)
 8005c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	2300      	movs	r3, #0
 8005c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f383 8811 	msr	BASEPRI, r3
}
 8005c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c40:	4b0b      	ldr	r3, [pc, #44]	@ (8005c70 <vPortSetupTimerInterrupt+0x34>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c46:	4b0b      	ldr	r3, [pc, #44]	@ (8005c74 <vPortSetupTimerInterrupt+0x38>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <vPortSetupTimerInterrupt+0x3c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a0a      	ldr	r2, [pc, #40]	@ (8005c7c <vPortSetupTimerInterrupt+0x40>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	099b      	lsrs	r3, r3, #6
 8005c58:	4a09      	ldr	r2, [pc, #36]	@ (8005c80 <vPortSetupTimerInterrupt+0x44>)
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c5e:	4b04      	ldr	r3, [pc, #16]	@ (8005c70 <vPortSetupTimerInterrupt+0x34>)
 8005c60:	2207      	movs	r2, #7
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	e000e010 	.word	0xe000e010
 8005c74:	e000e018 	.word	0xe000e018
 8005c78:	20000000 	.word	0x20000000
 8005c7c:	10624dd3 	.word	0x10624dd3
 8005c80:	e000e014 	.word	0xe000e014

08005c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c94 <vPortEnableVFP+0x10>
 8005c88:	6801      	ldr	r1, [r0, #0]
 8005c8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c8e:	6001      	str	r1, [r0, #0]
 8005c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c92:	bf00      	nop
 8005c94:	e000ed88 	.word	0xe000ed88

08005c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c9e:	f3ef 8305 	mrs	r3, IPSR
 8005ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b0f      	cmp	r3, #15
 8005ca8:	d915      	bls.n	8005cd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005caa:	4a18      	ldr	r2, [pc, #96]	@ (8005d0c <vPortValidateInterruptPriority+0x74>)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005cb4:	4b16      	ldr	r3, [pc, #88]	@ (8005d10 <vPortValidateInterruptPriority+0x78>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	7afa      	ldrb	r2, [r7, #11]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d20b      	bcs.n	8005cd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	607b      	str	r3, [r7, #4]
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	e7fd      	b.n	8005cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d14 <vPortValidateInterruptPriority+0x7c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005cde:	4b0e      	ldr	r3, [pc, #56]	@ (8005d18 <vPortValidateInterruptPriority+0x80>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d90b      	bls.n	8005cfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	603b      	str	r3, [r7, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <vPortValidateInterruptPriority+0x62>
	}
 8005cfe:	bf00      	nop
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	e000e3f0 	.word	0xe000e3f0
 8005d10:	20000f34 	.word	0x20000f34
 8005d14:	e000ed0c 	.word	0xe000ed0c
 8005d18:	20000f38 	.word	0x20000f38

08005d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	@ 0x28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d28:	f7fe fd72 	bl	8004810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ea0 <pvPortMalloc+0x184>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d34:	f000 f924 	bl	8005f80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d38:	4b5a      	ldr	r3, [pc, #360]	@ (8005ea4 <pvPortMalloc+0x188>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f040 8095 	bne.w	8005e70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01e      	beq.n	8005d8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d015      	beq.n	8005d8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f023 0307 	bic.w	r3, r3, #7
 8005d64:	3308      	adds	r3, #8
 8005d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <pvPortMalloc+0x6e>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	617b      	str	r3, [r7, #20]
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	e7fd      	b.n	8005d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d06f      	beq.n	8005e70 <pvPortMalloc+0x154>
 8005d90:	4b45      	ldr	r3, [pc, #276]	@ (8005ea8 <pvPortMalloc+0x18c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d86a      	bhi.n	8005e70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d9a:	4b44      	ldr	r3, [pc, #272]	@ (8005eac <pvPortMalloc+0x190>)
 8005d9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d9e:	4b43      	ldr	r3, [pc, #268]	@ (8005eac <pvPortMalloc+0x190>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005da4:	e004      	b.n	8005db0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d903      	bls.n	8005dc2 <pvPortMalloc+0xa6>
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f1      	bne.n	8005da6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005dc2:	4b37      	ldr	r3, [pc, #220]	@ (8005ea0 <pvPortMalloc+0x184>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d051      	beq.n	8005e70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	4413      	add	r3, r2
 8005dd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	1ad2      	subs	r2, r2, r3
 8005de6:	2308      	movs	r3, #8
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d920      	bls.n	8005e30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4413      	add	r3, r2
 8005df4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <pvPortMalloc+0xfc>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	613b      	str	r3, [r7, #16]
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	1ad2      	subs	r2, r2, r3
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e2a:	69b8      	ldr	r0, [r7, #24]
 8005e2c:	f000 f90a 	bl	8006044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea8 <pvPortMalloc+0x18c>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea8 <pvPortMalloc+0x18c>)
 8005e3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea8 <pvPortMalloc+0x18c>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb0 <pvPortMalloc+0x194>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d203      	bcs.n	8005e52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e4a:	4b17      	ldr	r3, [pc, #92]	@ (8005ea8 <pvPortMalloc+0x18c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <pvPortMalloc+0x194>)
 8005e50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	4b13      	ldr	r3, [pc, #76]	@ (8005ea4 <pvPortMalloc+0x188>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e66:	4b13      	ldr	r3, [pc, #76]	@ (8005eb4 <pvPortMalloc+0x198>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	4a11      	ldr	r2, [pc, #68]	@ (8005eb4 <pvPortMalloc+0x198>)
 8005e6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e70:	f7fe fcdc 	bl	800482c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <pvPortMalloc+0x17a>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	60fb      	str	r3, [r7, #12]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <pvPortMalloc+0x176>
	return pvReturn;
 8005e96:	69fb      	ldr	r3, [r7, #28]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3728      	adds	r7, #40	@ 0x28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20003654 	.word	0x20003654
 8005ea4:	20003668 	.word	0x20003668
 8005ea8:	20003658 	.word	0x20003658
 8005eac:	2000364c 	.word	0x2000364c
 8005eb0:	2000365c 	.word	0x2000365c
 8005eb4:	20003660 	.word	0x20003660

08005eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d04f      	beq.n	8005f6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005eca:	2308      	movs	r3, #8
 8005ecc:	425b      	negs	r3, r3
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	4b25      	ldr	r3, [pc, #148]	@ (8005f74 <vPortFree+0xbc>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10b      	bne.n	8005efe <vPortFree+0x46>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	60fb      	str	r3, [r7, #12]
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00b      	beq.n	8005f1e <vPortFree+0x66>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60bb      	str	r3, [r7, #8]
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	e7fd      	b.n	8005f1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	4b14      	ldr	r3, [pc, #80]	@ (8005f74 <vPortFree+0xbc>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4013      	ands	r3, r2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01e      	beq.n	8005f6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d11a      	bne.n	8005f6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	4b0e      	ldr	r3, [pc, #56]	@ (8005f74 <vPortFree+0xbc>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	401a      	ands	r2, r3
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f44:	f7fe fc64 	bl	8004810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f78 <vPortFree+0xc0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4413      	add	r3, r2
 8005f52:	4a09      	ldr	r2, [pc, #36]	@ (8005f78 <vPortFree+0xc0>)
 8005f54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f56:	6938      	ldr	r0, [r7, #16]
 8005f58:	f000 f874 	bl	8006044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f5c:	4b07      	ldr	r3, [pc, #28]	@ (8005f7c <vPortFree+0xc4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3301      	adds	r3, #1
 8005f62:	4a06      	ldr	r2, [pc, #24]	@ (8005f7c <vPortFree+0xc4>)
 8005f64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f66:	f7fe fc61 	bl	800482c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f6a:	bf00      	nop
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20003668 	.word	0x20003668
 8005f78:	20003658 	.word	0x20003658
 8005f7c:	20003664 	.word	0x20003664

08005f80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f86:	f242 7310 	movw	r3, #10000	@ 0x2710
 8005f8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f8c:	4b27      	ldr	r3, [pc, #156]	@ (800602c <prvHeapInit+0xac>)
 8005f8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00c      	beq.n	8005fb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3307      	adds	r3, #7
 8005f9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0307 	bic.w	r3, r3, #7
 8005fa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	4a1f      	ldr	r2, [pc, #124]	@ (800602c <prvHeapInit+0xac>)
 8005fb0:	4413      	add	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006030 <prvHeapInit+0xb0>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8006030 <prvHeapInit+0xb0>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	4413      	add	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fcc:	2208      	movs	r2, #8
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4a15      	ldr	r2, [pc, #84]	@ (8006034 <prvHeapInit+0xb4>)
 8005fe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fe2:	4b14      	ldr	r3, [pc, #80]	@ (8006034 <prvHeapInit+0xb4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fea:	4b12      	ldr	r3, [pc, #72]	@ (8006034 <prvHeapInit+0xb4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	1ad2      	subs	r2, r2, r3
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006000:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <prvHeapInit+0xb4>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	4a0a      	ldr	r2, [pc, #40]	@ (8006038 <prvHeapInit+0xb8>)
 800600e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4a09      	ldr	r2, [pc, #36]	@ (800603c <prvHeapInit+0xbc>)
 8006016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006018:	4b09      	ldr	r3, [pc, #36]	@ (8006040 <prvHeapInit+0xc0>)
 800601a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000f3c 	.word	0x20000f3c
 8006030:	2000364c 	.word	0x2000364c
 8006034:	20003654 	.word	0x20003654
 8006038:	2000365c 	.word	0x2000365c
 800603c:	20003658 	.word	0x20003658
 8006040:	20003668 	.word	0x20003668

08006044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800604c:	4b28      	ldr	r3, [pc, #160]	@ (80060f0 <prvInsertBlockIntoFreeList+0xac>)
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	e002      	b.n	8006058 <prvInsertBlockIntoFreeList+0x14>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	429a      	cmp	r2, r3
 8006060:	d8f7      	bhi.n	8006052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	4413      	add	r3, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d108      	bne.n	8006086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	441a      	add	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	441a      	add	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d118      	bne.n	80060cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b15      	ldr	r3, [pc, #84]	@ (80060f4 <prvInsertBlockIntoFreeList+0xb0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d00d      	beq.n	80060c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	441a      	add	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	e008      	b.n	80060d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060c2:	4b0c      	ldr	r3, [pc, #48]	@ (80060f4 <prvInsertBlockIntoFreeList+0xb0>)
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	e003      	b.n	80060d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d002      	beq.n	80060e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	2000364c 	.word	0x2000364c
 80060f4:	20003654 	.word	0x20003654

080060f8 <std>:
 80060f8:	2300      	movs	r3, #0
 80060fa:	b510      	push	{r4, lr}
 80060fc:	4604      	mov	r4, r0
 80060fe:	e9c0 3300 	strd	r3, r3, [r0]
 8006102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006106:	6083      	str	r3, [r0, #8]
 8006108:	8181      	strh	r1, [r0, #12]
 800610a:	6643      	str	r3, [r0, #100]	@ 0x64
 800610c:	81c2      	strh	r2, [r0, #14]
 800610e:	6183      	str	r3, [r0, #24]
 8006110:	4619      	mov	r1, r3
 8006112:	2208      	movs	r2, #8
 8006114:	305c      	adds	r0, #92	@ 0x5c
 8006116:	f000 f9e7 	bl	80064e8 <memset>
 800611a:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <std+0x58>)
 800611c:	6263      	str	r3, [r4, #36]	@ 0x24
 800611e:	4b0d      	ldr	r3, [pc, #52]	@ (8006154 <std+0x5c>)
 8006120:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006122:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <std+0x60>)
 8006124:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006126:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <std+0x64>)
 8006128:	6323      	str	r3, [r4, #48]	@ 0x30
 800612a:	4b0d      	ldr	r3, [pc, #52]	@ (8006160 <std+0x68>)
 800612c:	6224      	str	r4, [r4, #32]
 800612e:	429c      	cmp	r4, r3
 8006130:	d006      	beq.n	8006140 <std+0x48>
 8006132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006136:	4294      	cmp	r4, r2
 8006138:	d002      	beq.n	8006140 <std+0x48>
 800613a:	33d0      	adds	r3, #208	@ 0xd0
 800613c:	429c      	cmp	r4, r3
 800613e:	d105      	bne.n	800614c <std+0x54>
 8006140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006148:	f000 ba9c 	b.w	8006684 <__retarget_lock_init_recursive>
 800614c:	bd10      	pop	{r4, pc}
 800614e:	bf00      	nop
 8006150:	08006339 	.word	0x08006339
 8006154:	0800635b 	.word	0x0800635b
 8006158:	08006393 	.word	0x08006393
 800615c:	080063b7 	.word	0x080063b7
 8006160:	2000366c 	.word	0x2000366c

08006164 <stdio_exit_handler>:
 8006164:	4a02      	ldr	r2, [pc, #8]	@ (8006170 <stdio_exit_handler+0xc>)
 8006166:	4903      	ldr	r1, [pc, #12]	@ (8006174 <stdio_exit_handler+0x10>)
 8006168:	4803      	ldr	r0, [pc, #12]	@ (8006178 <stdio_exit_handler+0x14>)
 800616a:	f000 b869 	b.w	8006240 <_fwalk_sglue>
 800616e:	bf00      	nop
 8006170:	20000010 	.word	0x20000010
 8006174:	080069a1 	.word	0x080069a1
 8006178:	20000020 	.word	0x20000020

0800617c <cleanup_stdio>:
 800617c:	6841      	ldr	r1, [r0, #4]
 800617e:	4b0c      	ldr	r3, [pc, #48]	@ (80061b0 <cleanup_stdio+0x34>)
 8006180:	4299      	cmp	r1, r3
 8006182:	b510      	push	{r4, lr}
 8006184:	4604      	mov	r4, r0
 8006186:	d001      	beq.n	800618c <cleanup_stdio+0x10>
 8006188:	f000 fc0a 	bl	80069a0 <_fflush_r>
 800618c:	68a1      	ldr	r1, [r4, #8]
 800618e:	4b09      	ldr	r3, [pc, #36]	@ (80061b4 <cleanup_stdio+0x38>)
 8006190:	4299      	cmp	r1, r3
 8006192:	d002      	beq.n	800619a <cleanup_stdio+0x1e>
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fc03 	bl	80069a0 <_fflush_r>
 800619a:	68e1      	ldr	r1, [r4, #12]
 800619c:	4b06      	ldr	r3, [pc, #24]	@ (80061b8 <cleanup_stdio+0x3c>)
 800619e:	4299      	cmp	r1, r3
 80061a0:	d004      	beq.n	80061ac <cleanup_stdio+0x30>
 80061a2:	4620      	mov	r0, r4
 80061a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a8:	f000 bbfa 	b.w	80069a0 <_fflush_r>
 80061ac:	bd10      	pop	{r4, pc}
 80061ae:	bf00      	nop
 80061b0:	2000366c 	.word	0x2000366c
 80061b4:	200036d4 	.word	0x200036d4
 80061b8:	2000373c 	.word	0x2000373c

080061bc <global_stdio_init.part.0>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	4b0b      	ldr	r3, [pc, #44]	@ (80061ec <global_stdio_init.part.0+0x30>)
 80061c0:	4c0b      	ldr	r4, [pc, #44]	@ (80061f0 <global_stdio_init.part.0+0x34>)
 80061c2:	4a0c      	ldr	r2, [pc, #48]	@ (80061f4 <global_stdio_init.part.0+0x38>)
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	4620      	mov	r0, r4
 80061c8:	2200      	movs	r2, #0
 80061ca:	2104      	movs	r1, #4
 80061cc:	f7ff ff94 	bl	80060f8 <std>
 80061d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061d4:	2201      	movs	r2, #1
 80061d6:	2109      	movs	r1, #9
 80061d8:	f7ff ff8e 	bl	80060f8 <std>
 80061dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061e0:	2202      	movs	r2, #2
 80061e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e6:	2112      	movs	r1, #18
 80061e8:	f7ff bf86 	b.w	80060f8 <std>
 80061ec:	200037a4 	.word	0x200037a4
 80061f0:	2000366c 	.word	0x2000366c
 80061f4:	08006165 	.word	0x08006165

080061f8 <__sfp_lock_acquire>:
 80061f8:	4801      	ldr	r0, [pc, #4]	@ (8006200 <__sfp_lock_acquire+0x8>)
 80061fa:	f000 ba44 	b.w	8006686 <__retarget_lock_acquire_recursive>
 80061fe:	bf00      	nop
 8006200:	200037ad 	.word	0x200037ad

08006204 <__sfp_lock_release>:
 8006204:	4801      	ldr	r0, [pc, #4]	@ (800620c <__sfp_lock_release+0x8>)
 8006206:	f000 ba3f 	b.w	8006688 <__retarget_lock_release_recursive>
 800620a:	bf00      	nop
 800620c:	200037ad 	.word	0x200037ad

08006210 <__sinit>:
 8006210:	b510      	push	{r4, lr}
 8006212:	4604      	mov	r4, r0
 8006214:	f7ff fff0 	bl	80061f8 <__sfp_lock_acquire>
 8006218:	6a23      	ldr	r3, [r4, #32]
 800621a:	b11b      	cbz	r3, 8006224 <__sinit+0x14>
 800621c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006220:	f7ff bff0 	b.w	8006204 <__sfp_lock_release>
 8006224:	4b04      	ldr	r3, [pc, #16]	@ (8006238 <__sinit+0x28>)
 8006226:	6223      	str	r3, [r4, #32]
 8006228:	4b04      	ldr	r3, [pc, #16]	@ (800623c <__sinit+0x2c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f5      	bne.n	800621c <__sinit+0xc>
 8006230:	f7ff ffc4 	bl	80061bc <global_stdio_init.part.0>
 8006234:	e7f2      	b.n	800621c <__sinit+0xc>
 8006236:	bf00      	nop
 8006238:	0800617d 	.word	0x0800617d
 800623c:	200037a4 	.word	0x200037a4

08006240 <_fwalk_sglue>:
 8006240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006244:	4607      	mov	r7, r0
 8006246:	4688      	mov	r8, r1
 8006248:	4614      	mov	r4, r2
 800624a:	2600      	movs	r6, #0
 800624c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006250:	f1b9 0901 	subs.w	r9, r9, #1
 8006254:	d505      	bpl.n	8006262 <_fwalk_sglue+0x22>
 8006256:	6824      	ldr	r4, [r4, #0]
 8006258:	2c00      	cmp	r4, #0
 800625a:	d1f7      	bne.n	800624c <_fwalk_sglue+0xc>
 800625c:	4630      	mov	r0, r6
 800625e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006262:	89ab      	ldrh	r3, [r5, #12]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d907      	bls.n	8006278 <_fwalk_sglue+0x38>
 8006268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800626c:	3301      	adds	r3, #1
 800626e:	d003      	beq.n	8006278 <_fwalk_sglue+0x38>
 8006270:	4629      	mov	r1, r5
 8006272:	4638      	mov	r0, r7
 8006274:	47c0      	blx	r8
 8006276:	4306      	orrs	r6, r0
 8006278:	3568      	adds	r5, #104	@ 0x68
 800627a:	e7e9      	b.n	8006250 <_fwalk_sglue+0x10>

0800627c <_puts_r>:
 800627c:	6a03      	ldr	r3, [r0, #32]
 800627e:	b570      	push	{r4, r5, r6, lr}
 8006280:	6884      	ldr	r4, [r0, #8]
 8006282:	4605      	mov	r5, r0
 8006284:	460e      	mov	r6, r1
 8006286:	b90b      	cbnz	r3, 800628c <_puts_r+0x10>
 8006288:	f7ff ffc2 	bl	8006210 <__sinit>
 800628c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800628e:	07db      	lsls	r3, r3, #31
 8006290:	d405      	bmi.n	800629e <_puts_r+0x22>
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	0598      	lsls	r0, r3, #22
 8006296:	d402      	bmi.n	800629e <_puts_r+0x22>
 8006298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800629a:	f000 f9f4 	bl	8006686 <__retarget_lock_acquire_recursive>
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	0719      	lsls	r1, r3, #28
 80062a2:	d502      	bpl.n	80062aa <_puts_r+0x2e>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d135      	bne.n	8006316 <_puts_r+0x9a>
 80062aa:	4621      	mov	r1, r4
 80062ac:	4628      	mov	r0, r5
 80062ae:	f000 f8c5 	bl	800643c <__swsetup_r>
 80062b2:	b380      	cbz	r0, 8006316 <_puts_r+0x9a>
 80062b4:	f04f 35ff 	mov.w	r5, #4294967295
 80062b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062ba:	07da      	lsls	r2, r3, #31
 80062bc:	d405      	bmi.n	80062ca <_puts_r+0x4e>
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	059b      	lsls	r3, r3, #22
 80062c2:	d402      	bmi.n	80062ca <_puts_r+0x4e>
 80062c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062c6:	f000 f9df 	bl	8006688 <__retarget_lock_release_recursive>
 80062ca:	4628      	mov	r0, r5
 80062cc:	bd70      	pop	{r4, r5, r6, pc}
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	da04      	bge.n	80062dc <_puts_r+0x60>
 80062d2:	69a2      	ldr	r2, [r4, #24]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	dc17      	bgt.n	8006308 <_puts_r+0x8c>
 80062d8:	290a      	cmp	r1, #10
 80062da:	d015      	beq.n	8006308 <_puts_r+0x8c>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	6022      	str	r2, [r4, #0]
 80062e2:	7019      	strb	r1, [r3, #0]
 80062e4:	68a3      	ldr	r3, [r4, #8]
 80062e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062ea:	3b01      	subs	r3, #1
 80062ec:	60a3      	str	r3, [r4, #8]
 80062ee:	2900      	cmp	r1, #0
 80062f0:	d1ed      	bne.n	80062ce <_puts_r+0x52>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da11      	bge.n	800631a <_puts_r+0x9e>
 80062f6:	4622      	mov	r2, r4
 80062f8:	210a      	movs	r1, #10
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 f85f 	bl	80063be <__swbuf_r>
 8006300:	3001      	adds	r0, #1
 8006302:	d0d7      	beq.n	80062b4 <_puts_r+0x38>
 8006304:	250a      	movs	r5, #10
 8006306:	e7d7      	b.n	80062b8 <_puts_r+0x3c>
 8006308:	4622      	mov	r2, r4
 800630a:	4628      	mov	r0, r5
 800630c:	f000 f857 	bl	80063be <__swbuf_r>
 8006310:	3001      	adds	r0, #1
 8006312:	d1e7      	bne.n	80062e4 <_puts_r+0x68>
 8006314:	e7ce      	b.n	80062b4 <_puts_r+0x38>
 8006316:	3e01      	subs	r6, #1
 8006318:	e7e4      	b.n	80062e4 <_puts_r+0x68>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	6022      	str	r2, [r4, #0]
 8006320:	220a      	movs	r2, #10
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	e7ee      	b.n	8006304 <_puts_r+0x88>
	...

08006328 <puts>:
 8006328:	4b02      	ldr	r3, [pc, #8]	@ (8006334 <puts+0xc>)
 800632a:	4601      	mov	r1, r0
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	f7ff bfa5 	b.w	800627c <_puts_r>
 8006332:	bf00      	nop
 8006334:	2000001c 	.word	0x2000001c

08006338 <__sread>:
 8006338:	b510      	push	{r4, lr}
 800633a:	460c      	mov	r4, r1
 800633c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006340:	f000 f952 	bl	80065e8 <_read_r>
 8006344:	2800      	cmp	r0, #0
 8006346:	bfab      	itete	ge
 8006348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800634a:	89a3      	ldrhlt	r3, [r4, #12]
 800634c:	181b      	addge	r3, r3, r0
 800634e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006352:	bfac      	ite	ge
 8006354:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006356:	81a3      	strhlt	r3, [r4, #12]
 8006358:	bd10      	pop	{r4, pc}

0800635a <__swrite>:
 800635a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800635e:	461f      	mov	r7, r3
 8006360:	898b      	ldrh	r3, [r1, #12]
 8006362:	05db      	lsls	r3, r3, #23
 8006364:	4605      	mov	r5, r0
 8006366:	460c      	mov	r4, r1
 8006368:	4616      	mov	r6, r2
 800636a:	d505      	bpl.n	8006378 <__swrite+0x1e>
 800636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006370:	2302      	movs	r3, #2
 8006372:	2200      	movs	r2, #0
 8006374:	f000 f926 	bl	80065c4 <_lseek_r>
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800637e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006382:	81a3      	strh	r3, [r4, #12]
 8006384:	4632      	mov	r2, r6
 8006386:	463b      	mov	r3, r7
 8006388:	4628      	mov	r0, r5
 800638a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800638e:	f000 b93d 	b.w	800660c <_write_r>

08006392 <__sseek>:
 8006392:	b510      	push	{r4, lr}
 8006394:	460c      	mov	r4, r1
 8006396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639a:	f000 f913 	bl	80065c4 <_lseek_r>
 800639e:	1c43      	adds	r3, r0, #1
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	bf15      	itete	ne
 80063a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063ae:	81a3      	strheq	r3, [r4, #12]
 80063b0:	bf18      	it	ne
 80063b2:	81a3      	strhne	r3, [r4, #12]
 80063b4:	bd10      	pop	{r4, pc}

080063b6 <__sclose>:
 80063b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ba:	f000 b89d 	b.w	80064f8 <_close_r>

080063be <__swbuf_r>:
 80063be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c0:	460e      	mov	r6, r1
 80063c2:	4614      	mov	r4, r2
 80063c4:	4605      	mov	r5, r0
 80063c6:	b118      	cbz	r0, 80063d0 <__swbuf_r+0x12>
 80063c8:	6a03      	ldr	r3, [r0, #32]
 80063ca:	b90b      	cbnz	r3, 80063d0 <__swbuf_r+0x12>
 80063cc:	f7ff ff20 	bl	8006210 <__sinit>
 80063d0:	69a3      	ldr	r3, [r4, #24]
 80063d2:	60a3      	str	r3, [r4, #8]
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	071a      	lsls	r2, r3, #28
 80063d8:	d501      	bpl.n	80063de <__swbuf_r+0x20>
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	b943      	cbnz	r3, 80063f0 <__swbuf_r+0x32>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 f82b 	bl	800643c <__swsetup_r>
 80063e6:	b118      	cbz	r0, 80063f0 <__swbuf_r+0x32>
 80063e8:	f04f 37ff 	mov.w	r7, #4294967295
 80063ec:	4638      	mov	r0, r7
 80063ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	6922      	ldr	r2, [r4, #16]
 80063f4:	1a98      	subs	r0, r3, r2
 80063f6:	6963      	ldr	r3, [r4, #20]
 80063f8:	b2f6      	uxtb	r6, r6
 80063fa:	4283      	cmp	r3, r0
 80063fc:	4637      	mov	r7, r6
 80063fe:	dc05      	bgt.n	800640c <__swbuf_r+0x4e>
 8006400:	4621      	mov	r1, r4
 8006402:	4628      	mov	r0, r5
 8006404:	f000 facc 	bl	80069a0 <_fflush_r>
 8006408:	2800      	cmp	r0, #0
 800640a:	d1ed      	bne.n	80063e8 <__swbuf_r+0x2a>
 800640c:	68a3      	ldr	r3, [r4, #8]
 800640e:	3b01      	subs	r3, #1
 8006410:	60a3      	str	r3, [r4, #8]
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	6022      	str	r2, [r4, #0]
 8006418:	701e      	strb	r6, [r3, #0]
 800641a:	6962      	ldr	r2, [r4, #20]
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	429a      	cmp	r2, r3
 8006420:	d004      	beq.n	800642c <__swbuf_r+0x6e>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	07db      	lsls	r3, r3, #31
 8006426:	d5e1      	bpl.n	80063ec <__swbuf_r+0x2e>
 8006428:	2e0a      	cmp	r6, #10
 800642a:	d1df      	bne.n	80063ec <__swbuf_r+0x2e>
 800642c:	4621      	mov	r1, r4
 800642e:	4628      	mov	r0, r5
 8006430:	f000 fab6 	bl	80069a0 <_fflush_r>
 8006434:	2800      	cmp	r0, #0
 8006436:	d0d9      	beq.n	80063ec <__swbuf_r+0x2e>
 8006438:	e7d6      	b.n	80063e8 <__swbuf_r+0x2a>
	...

0800643c <__swsetup_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4b29      	ldr	r3, [pc, #164]	@ (80064e4 <__swsetup_r+0xa8>)
 8006440:	4605      	mov	r5, r0
 8006442:	6818      	ldr	r0, [r3, #0]
 8006444:	460c      	mov	r4, r1
 8006446:	b118      	cbz	r0, 8006450 <__swsetup_r+0x14>
 8006448:	6a03      	ldr	r3, [r0, #32]
 800644a:	b90b      	cbnz	r3, 8006450 <__swsetup_r+0x14>
 800644c:	f7ff fee0 	bl	8006210 <__sinit>
 8006450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006454:	0719      	lsls	r1, r3, #28
 8006456:	d422      	bmi.n	800649e <__swsetup_r+0x62>
 8006458:	06da      	lsls	r2, r3, #27
 800645a:	d407      	bmi.n	800646c <__swsetup_r+0x30>
 800645c:	2209      	movs	r2, #9
 800645e:	602a      	str	r2, [r5, #0]
 8006460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	f04f 30ff 	mov.w	r0, #4294967295
 800646a:	e033      	b.n	80064d4 <__swsetup_r+0x98>
 800646c:	0758      	lsls	r0, r3, #29
 800646e:	d512      	bpl.n	8006496 <__swsetup_r+0x5a>
 8006470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006472:	b141      	cbz	r1, 8006486 <__swsetup_r+0x4a>
 8006474:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006478:	4299      	cmp	r1, r3
 800647a:	d002      	beq.n	8006482 <__swsetup_r+0x46>
 800647c:	4628      	mov	r0, r5
 800647e:	f000 f913 	bl	80066a8 <_free_r>
 8006482:	2300      	movs	r3, #0
 8006484:	6363      	str	r3, [r4, #52]	@ 0x34
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	2300      	movs	r3, #0
 8006490:	6063      	str	r3, [r4, #4]
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	f043 0308 	orr.w	r3, r3, #8
 800649c:	81a3      	strh	r3, [r4, #12]
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	b94b      	cbnz	r3, 80064b6 <__swsetup_r+0x7a>
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ac:	d003      	beq.n	80064b6 <__swsetup_r+0x7a>
 80064ae:	4621      	mov	r1, r4
 80064b0:	4628      	mov	r0, r5
 80064b2:	f000 fac3 	bl	8006a3c <__smakebuf_r>
 80064b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ba:	f013 0201 	ands.w	r2, r3, #1
 80064be:	d00a      	beq.n	80064d6 <__swsetup_r+0x9a>
 80064c0:	2200      	movs	r2, #0
 80064c2:	60a2      	str	r2, [r4, #8]
 80064c4:	6962      	ldr	r2, [r4, #20]
 80064c6:	4252      	negs	r2, r2
 80064c8:	61a2      	str	r2, [r4, #24]
 80064ca:	6922      	ldr	r2, [r4, #16]
 80064cc:	b942      	cbnz	r2, 80064e0 <__swsetup_r+0xa4>
 80064ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064d2:	d1c5      	bne.n	8006460 <__swsetup_r+0x24>
 80064d4:	bd38      	pop	{r3, r4, r5, pc}
 80064d6:	0799      	lsls	r1, r3, #30
 80064d8:	bf58      	it	pl
 80064da:	6962      	ldrpl	r2, [r4, #20]
 80064dc:	60a2      	str	r2, [r4, #8]
 80064de:	e7f4      	b.n	80064ca <__swsetup_r+0x8e>
 80064e0:	2000      	movs	r0, #0
 80064e2:	e7f7      	b.n	80064d4 <__swsetup_r+0x98>
 80064e4:	2000001c 	.word	0x2000001c

080064e8 <memset>:
 80064e8:	4402      	add	r2, r0
 80064ea:	4603      	mov	r3, r0
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d100      	bne.n	80064f2 <memset+0xa>
 80064f0:	4770      	bx	lr
 80064f2:	f803 1b01 	strb.w	r1, [r3], #1
 80064f6:	e7f9      	b.n	80064ec <memset+0x4>

080064f8 <_close_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d06      	ldr	r5, [pc, #24]	@ (8006514 <_close_r+0x1c>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	4608      	mov	r0, r1
 8006502:	602b      	str	r3, [r5, #0]
 8006504:	f7fa fab7 	bl	8000a76 <_close>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_close_r+0x1a>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	b103      	cbz	r3, 8006512 <_close_r+0x1a>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	200037a8 	.word	0x200037a8

08006518 <_reclaim_reent>:
 8006518:	4b29      	ldr	r3, [pc, #164]	@ (80065c0 <_reclaim_reent+0xa8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4283      	cmp	r3, r0
 800651e:	b570      	push	{r4, r5, r6, lr}
 8006520:	4604      	mov	r4, r0
 8006522:	d04b      	beq.n	80065bc <_reclaim_reent+0xa4>
 8006524:	69c3      	ldr	r3, [r0, #28]
 8006526:	b1ab      	cbz	r3, 8006554 <_reclaim_reent+0x3c>
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	b16b      	cbz	r3, 8006548 <_reclaim_reent+0x30>
 800652c:	2500      	movs	r5, #0
 800652e:	69e3      	ldr	r3, [r4, #28]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	5959      	ldr	r1, [r3, r5]
 8006534:	2900      	cmp	r1, #0
 8006536:	d13b      	bne.n	80065b0 <_reclaim_reent+0x98>
 8006538:	3504      	adds	r5, #4
 800653a:	2d80      	cmp	r5, #128	@ 0x80
 800653c:	d1f7      	bne.n	800652e <_reclaim_reent+0x16>
 800653e:	69e3      	ldr	r3, [r4, #28]
 8006540:	4620      	mov	r0, r4
 8006542:	68d9      	ldr	r1, [r3, #12]
 8006544:	f000 f8b0 	bl	80066a8 <_free_r>
 8006548:	69e3      	ldr	r3, [r4, #28]
 800654a:	6819      	ldr	r1, [r3, #0]
 800654c:	b111      	cbz	r1, 8006554 <_reclaim_reent+0x3c>
 800654e:	4620      	mov	r0, r4
 8006550:	f000 f8aa 	bl	80066a8 <_free_r>
 8006554:	6961      	ldr	r1, [r4, #20]
 8006556:	b111      	cbz	r1, 800655e <_reclaim_reent+0x46>
 8006558:	4620      	mov	r0, r4
 800655a:	f000 f8a5 	bl	80066a8 <_free_r>
 800655e:	69e1      	ldr	r1, [r4, #28]
 8006560:	b111      	cbz	r1, 8006568 <_reclaim_reent+0x50>
 8006562:	4620      	mov	r0, r4
 8006564:	f000 f8a0 	bl	80066a8 <_free_r>
 8006568:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800656a:	b111      	cbz	r1, 8006572 <_reclaim_reent+0x5a>
 800656c:	4620      	mov	r0, r4
 800656e:	f000 f89b 	bl	80066a8 <_free_r>
 8006572:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006574:	b111      	cbz	r1, 800657c <_reclaim_reent+0x64>
 8006576:	4620      	mov	r0, r4
 8006578:	f000 f896 	bl	80066a8 <_free_r>
 800657c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800657e:	b111      	cbz	r1, 8006586 <_reclaim_reent+0x6e>
 8006580:	4620      	mov	r0, r4
 8006582:	f000 f891 	bl	80066a8 <_free_r>
 8006586:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006588:	b111      	cbz	r1, 8006590 <_reclaim_reent+0x78>
 800658a:	4620      	mov	r0, r4
 800658c:	f000 f88c 	bl	80066a8 <_free_r>
 8006590:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006592:	b111      	cbz	r1, 800659a <_reclaim_reent+0x82>
 8006594:	4620      	mov	r0, r4
 8006596:	f000 f887 	bl	80066a8 <_free_r>
 800659a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800659c:	b111      	cbz	r1, 80065a4 <_reclaim_reent+0x8c>
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 f882 	bl	80066a8 <_free_r>
 80065a4:	6a23      	ldr	r3, [r4, #32]
 80065a6:	b14b      	cbz	r3, 80065bc <_reclaim_reent+0xa4>
 80065a8:	4620      	mov	r0, r4
 80065aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065ae:	4718      	bx	r3
 80065b0:	680e      	ldr	r6, [r1, #0]
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 f878 	bl	80066a8 <_free_r>
 80065b8:	4631      	mov	r1, r6
 80065ba:	e7bb      	b.n	8006534 <_reclaim_reent+0x1c>
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	bf00      	nop
 80065c0:	2000001c 	.word	0x2000001c

080065c4 <_lseek_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d07      	ldr	r5, [pc, #28]	@ (80065e4 <_lseek_r+0x20>)
 80065c8:	4604      	mov	r4, r0
 80065ca:	4608      	mov	r0, r1
 80065cc:	4611      	mov	r1, r2
 80065ce:	2200      	movs	r2, #0
 80065d0:	602a      	str	r2, [r5, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f7fa fa76 	bl	8000ac4 <_lseek>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_lseek_r+0x1e>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_lseek_r+0x1e>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	200037a8 	.word	0x200037a8

080065e8 <_read_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	@ (8006608 <_read_r+0x20>)
 80065ec:	4604      	mov	r4, r0
 80065ee:	4608      	mov	r0, r1
 80065f0:	4611      	mov	r1, r2
 80065f2:	2200      	movs	r2, #0
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f7fa fa04 	bl	8000a04 <_read>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_read_r+0x1e>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_read_r+0x1e>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	200037a8 	.word	0x200037a8

0800660c <_write_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d07      	ldr	r5, [pc, #28]	@ (800662c <_write_r+0x20>)
 8006610:	4604      	mov	r4, r0
 8006612:	4608      	mov	r0, r1
 8006614:	4611      	mov	r1, r2
 8006616:	2200      	movs	r2, #0
 8006618:	602a      	str	r2, [r5, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	f7fa fa0f 	bl	8000a3e <_write>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_write_r+0x1e>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_write_r+0x1e>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	200037a8 	.word	0x200037a8

08006630 <__errno>:
 8006630:	4b01      	ldr	r3, [pc, #4]	@ (8006638 <__errno+0x8>)
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	2000001c 	.word	0x2000001c

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4d0d      	ldr	r5, [pc, #52]	@ (8006674 <__libc_init_array+0x38>)
 8006640:	4c0d      	ldr	r4, [pc, #52]	@ (8006678 <__libc_init_array+0x3c>)
 8006642:	1b64      	subs	r4, r4, r5
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2600      	movs	r6, #0
 8006648:	42a6      	cmp	r6, r4
 800664a:	d109      	bne.n	8006660 <__libc_init_array+0x24>
 800664c:	4d0b      	ldr	r5, [pc, #44]	@ (800667c <__libc_init_array+0x40>)
 800664e:	4c0c      	ldr	r4, [pc, #48]	@ (8006680 <__libc_init_array+0x44>)
 8006650:	f000 fa62 	bl	8006b18 <_init>
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	2600      	movs	r6, #0
 800665a:	42a6      	cmp	r6, r4
 800665c:	d105      	bne.n	800666a <__libc_init_array+0x2e>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	f855 3b04 	ldr.w	r3, [r5], #4
 8006664:	4798      	blx	r3
 8006666:	3601      	adds	r6, #1
 8006668:	e7ee      	b.n	8006648 <__libc_init_array+0xc>
 800666a:	f855 3b04 	ldr.w	r3, [r5], #4
 800666e:	4798      	blx	r3
 8006670:	3601      	adds	r6, #1
 8006672:	e7f2      	b.n	800665a <__libc_init_array+0x1e>
 8006674:	08006bd8 	.word	0x08006bd8
 8006678:	08006bd8 	.word	0x08006bd8
 800667c:	08006bd8 	.word	0x08006bd8
 8006680:	08006bdc 	.word	0x08006bdc

08006684 <__retarget_lock_init_recursive>:
 8006684:	4770      	bx	lr

08006686 <__retarget_lock_acquire_recursive>:
 8006686:	4770      	bx	lr

08006688 <__retarget_lock_release_recursive>:
 8006688:	4770      	bx	lr

0800668a <memcpy>:
 800668a:	440a      	add	r2, r1
 800668c:	4291      	cmp	r1, r2
 800668e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006692:	d100      	bne.n	8006696 <memcpy+0xc>
 8006694:	4770      	bx	lr
 8006696:	b510      	push	{r4, lr}
 8006698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800669c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a0:	4291      	cmp	r1, r2
 80066a2:	d1f9      	bne.n	8006698 <memcpy+0xe>
 80066a4:	bd10      	pop	{r4, pc}
	...

080066a8 <_free_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4605      	mov	r5, r0
 80066ac:	2900      	cmp	r1, #0
 80066ae:	d041      	beq.n	8006734 <_free_r+0x8c>
 80066b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066b4:	1f0c      	subs	r4, r1, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bfb8      	it	lt
 80066ba:	18e4      	addlt	r4, r4, r3
 80066bc:	f000 f8e0 	bl	8006880 <__malloc_lock>
 80066c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006738 <_free_r+0x90>)
 80066c2:	6813      	ldr	r3, [r2, #0]
 80066c4:	b933      	cbnz	r3, 80066d4 <_free_r+0x2c>
 80066c6:	6063      	str	r3, [r4, #4]
 80066c8:	6014      	str	r4, [r2, #0]
 80066ca:	4628      	mov	r0, r5
 80066cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d0:	f000 b8dc 	b.w	800688c <__malloc_unlock>
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	d908      	bls.n	80066ea <_free_r+0x42>
 80066d8:	6820      	ldr	r0, [r4, #0]
 80066da:	1821      	adds	r1, r4, r0
 80066dc:	428b      	cmp	r3, r1
 80066de:	bf01      	itttt	eq
 80066e0:	6819      	ldreq	r1, [r3, #0]
 80066e2:	685b      	ldreq	r3, [r3, #4]
 80066e4:	1809      	addeq	r1, r1, r0
 80066e6:	6021      	streq	r1, [r4, #0]
 80066e8:	e7ed      	b.n	80066c6 <_free_r+0x1e>
 80066ea:	461a      	mov	r2, r3
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	b10b      	cbz	r3, 80066f4 <_free_r+0x4c>
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	d9fa      	bls.n	80066ea <_free_r+0x42>
 80066f4:	6811      	ldr	r1, [r2, #0]
 80066f6:	1850      	adds	r0, r2, r1
 80066f8:	42a0      	cmp	r0, r4
 80066fa:	d10b      	bne.n	8006714 <_free_r+0x6c>
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	4401      	add	r1, r0
 8006700:	1850      	adds	r0, r2, r1
 8006702:	4283      	cmp	r3, r0
 8006704:	6011      	str	r1, [r2, #0]
 8006706:	d1e0      	bne.n	80066ca <_free_r+0x22>
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	6053      	str	r3, [r2, #4]
 800670e:	4408      	add	r0, r1
 8006710:	6010      	str	r0, [r2, #0]
 8006712:	e7da      	b.n	80066ca <_free_r+0x22>
 8006714:	d902      	bls.n	800671c <_free_r+0x74>
 8006716:	230c      	movs	r3, #12
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	e7d6      	b.n	80066ca <_free_r+0x22>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	1821      	adds	r1, r4, r0
 8006720:	428b      	cmp	r3, r1
 8006722:	bf04      	itt	eq
 8006724:	6819      	ldreq	r1, [r3, #0]
 8006726:	685b      	ldreq	r3, [r3, #4]
 8006728:	6063      	str	r3, [r4, #4]
 800672a:	bf04      	itt	eq
 800672c:	1809      	addeq	r1, r1, r0
 800672e:	6021      	streq	r1, [r4, #0]
 8006730:	6054      	str	r4, [r2, #4]
 8006732:	e7ca      	b.n	80066ca <_free_r+0x22>
 8006734:	bd38      	pop	{r3, r4, r5, pc}
 8006736:	bf00      	nop
 8006738:	200037b4 	.word	0x200037b4

0800673c <sbrk_aligned>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	4e0f      	ldr	r6, [pc, #60]	@ (800677c <sbrk_aligned+0x40>)
 8006740:	460c      	mov	r4, r1
 8006742:	6831      	ldr	r1, [r6, #0]
 8006744:	4605      	mov	r5, r0
 8006746:	b911      	cbnz	r1, 800674e <sbrk_aligned+0x12>
 8006748:	f000 f9d6 	bl	8006af8 <_sbrk_r>
 800674c:	6030      	str	r0, [r6, #0]
 800674e:	4621      	mov	r1, r4
 8006750:	4628      	mov	r0, r5
 8006752:	f000 f9d1 	bl	8006af8 <_sbrk_r>
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d103      	bne.n	8006762 <sbrk_aligned+0x26>
 800675a:	f04f 34ff 	mov.w	r4, #4294967295
 800675e:	4620      	mov	r0, r4
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	1cc4      	adds	r4, r0, #3
 8006764:	f024 0403 	bic.w	r4, r4, #3
 8006768:	42a0      	cmp	r0, r4
 800676a:	d0f8      	beq.n	800675e <sbrk_aligned+0x22>
 800676c:	1a21      	subs	r1, r4, r0
 800676e:	4628      	mov	r0, r5
 8006770:	f000 f9c2 	bl	8006af8 <_sbrk_r>
 8006774:	3001      	adds	r0, #1
 8006776:	d1f2      	bne.n	800675e <sbrk_aligned+0x22>
 8006778:	e7ef      	b.n	800675a <sbrk_aligned+0x1e>
 800677a:	bf00      	nop
 800677c:	200037b0 	.word	0x200037b0

08006780 <_malloc_r>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	1ccd      	adds	r5, r1, #3
 8006786:	f025 0503 	bic.w	r5, r5, #3
 800678a:	3508      	adds	r5, #8
 800678c:	2d0c      	cmp	r5, #12
 800678e:	bf38      	it	cc
 8006790:	250c      	movcc	r5, #12
 8006792:	2d00      	cmp	r5, #0
 8006794:	4606      	mov	r6, r0
 8006796:	db01      	blt.n	800679c <_malloc_r+0x1c>
 8006798:	42a9      	cmp	r1, r5
 800679a:	d904      	bls.n	80067a6 <_malloc_r+0x26>
 800679c:	230c      	movs	r3, #12
 800679e:	6033      	str	r3, [r6, #0]
 80067a0:	2000      	movs	r0, #0
 80067a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800687c <_malloc_r+0xfc>
 80067aa:	f000 f869 	bl	8006880 <__malloc_lock>
 80067ae:	f8d8 3000 	ldr.w	r3, [r8]
 80067b2:	461c      	mov	r4, r3
 80067b4:	bb44      	cbnz	r4, 8006808 <_malloc_r+0x88>
 80067b6:	4629      	mov	r1, r5
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff ffbf 	bl	800673c <sbrk_aligned>
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	4604      	mov	r4, r0
 80067c2:	d158      	bne.n	8006876 <_malloc_r+0xf6>
 80067c4:	f8d8 4000 	ldr.w	r4, [r8]
 80067c8:	4627      	mov	r7, r4
 80067ca:	2f00      	cmp	r7, #0
 80067cc:	d143      	bne.n	8006856 <_malloc_r+0xd6>
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	d04b      	beq.n	800686a <_malloc_r+0xea>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	4639      	mov	r1, r7
 80067d6:	4630      	mov	r0, r6
 80067d8:	eb04 0903 	add.w	r9, r4, r3
 80067dc:	f000 f98c 	bl	8006af8 <_sbrk_r>
 80067e0:	4581      	cmp	r9, r0
 80067e2:	d142      	bne.n	800686a <_malloc_r+0xea>
 80067e4:	6821      	ldr	r1, [r4, #0]
 80067e6:	1a6d      	subs	r5, r5, r1
 80067e8:	4629      	mov	r1, r5
 80067ea:	4630      	mov	r0, r6
 80067ec:	f7ff ffa6 	bl	800673c <sbrk_aligned>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d03a      	beq.n	800686a <_malloc_r+0xea>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	442b      	add	r3, r5
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	f8d8 3000 	ldr.w	r3, [r8]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	bb62      	cbnz	r2, 800685c <_malloc_r+0xdc>
 8006802:	f8c8 7000 	str.w	r7, [r8]
 8006806:	e00f      	b.n	8006828 <_malloc_r+0xa8>
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	1b52      	subs	r2, r2, r5
 800680c:	d420      	bmi.n	8006850 <_malloc_r+0xd0>
 800680e:	2a0b      	cmp	r2, #11
 8006810:	d917      	bls.n	8006842 <_malloc_r+0xc2>
 8006812:	1961      	adds	r1, r4, r5
 8006814:	42a3      	cmp	r3, r4
 8006816:	6025      	str	r5, [r4, #0]
 8006818:	bf18      	it	ne
 800681a:	6059      	strne	r1, [r3, #4]
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	bf08      	it	eq
 8006820:	f8c8 1000 	streq.w	r1, [r8]
 8006824:	5162      	str	r2, [r4, r5]
 8006826:	604b      	str	r3, [r1, #4]
 8006828:	4630      	mov	r0, r6
 800682a:	f000 f82f 	bl	800688c <__malloc_unlock>
 800682e:	f104 000b 	add.w	r0, r4, #11
 8006832:	1d23      	adds	r3, r4, #4
 8006834:	f020 0007 	bic.w	r0, r0, #7
 8006838:	1ac2      	subs	r2, r0, r3
 800683a:	bf1c      	itt	ne
 800683c:	1a1b      	subne	r3, r3, r0
 800683e:	50a3      	strne	r3, [r4, r2]
 8006840:	e7af      	b.n	80067a2 <_malloc_r+0x22>
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	42a3      	cmp	r3, r4
 8006846:	bf0c      	ite	eq
 8006848:	f8c8 2000 	streq.w	r2, [r8]
 800684c:	605a      	strne	r2, [r3, #4]
 800684e:	e7eb      	b.n	8006828 <_malloc_r+0xa8>
 8006850:	4623      	mov	r3, r4
 8006852:	6864      	ldr	r4, [r4, #4]
 8006854:	e7ae      	b.n	80067b4 <_malloc_r+0x34>
 8006856:	463c      	mov	r4, r7
 8006858:	687f      	ldr	r7, [r7, #4]
 800685a:	e7b6      	b.n	80067ca <_malloc_r+0x4a>
 800685c:	461a      	mov	r2, r3
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	42a3      	cmp	r3, r4
 8006862:	d1fb      	bne.n	800685c <_malloc_r+0xdc>
 8006864:	2300      	movs	r3, #0
 8006866:	6053      	str	r3, [r2, #4]
 8006868:	e7de      	b.n	8006828 <_malloc_r+0xa8>
 800686a:	230c      	movs	r3, #12
 800686c:	6033      	str	r3, [r6, #0]
 800686e:	4630      	mov	r0, r6
 8006870:	f000 f80c 	bl	800688c <__malloc_unlock>
 8006874:	e794      	b.n	80067a0 <_malloc_r+0x20>
 8006876:	6005      	str	r5, [r0, #0]
 8006878:	e7d6      	b.n	8006828 <_malloc_r+0xa8>
 800687a:	bf00      	nop
 800687c:	200037b4 	.word	0x200037b4

08006880 <__malloc_lock>:
 8006880:	4801      	ldr	r0, [pc, #4]	@ (8006888 <__malloc_lock+0x8>)
 8006882:	f7ff bf00 	b.w	8006686 <__retarget_lock_acquire_recursive>
 8006886:	bf00      	nop
 8006888:	200037ac 	.word	0x200037ac

0800688c <__malloc_unlock>:
 800688c:	4801      	ldr	r0, [pc, #4]	@ (8006894 <__malloc_unlock+0x8>)
 800688e:	f7ff befb 	b.w	8006688 <__retarget_lock_release_recursive>
 8006892:	bf00      	nop
 8006894:	200037ac 	.word	0x200037ac

08006898 <__sflush_r>:
 8006898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800689c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a0:	0716      	lsls	r6, r2, #28
 80068a2:	4605      	mov	r5, r0
 80068a4:	460c      	mov	r4, r1
 80068a6:	d454      	bmi.n	8006952 <__sflush_r+0xba>
 80068a8:	684b      	ldr	r3, [r1, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dc02      	bgt.n	80068b4 <__sflush_r+0x1c>
 80068ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dd48      	ble.n	8006946 <__sflush_r+0xae>
 80068b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068b6:	2e00      	cmp	r6, #0
 80068b8:	d045      	beq.n	8006946 <__sflush_r+0xae>
 80068ba:	2300      	movs	r3, #0
 80068bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068c0:	682f      	ldr	r7, [r5, #0]
 80068c2:	6a21      	ldr	r1, [r4, #32]
 80068c4:	602b      	str	r3, [r5, #0]
 80068c6:	d030      	beq.n	800692a <__sflush_r+0x92>
 80068c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	0759      	lsls	r1, r3, #29
 80068ce:	d505      	bpl.n	80068dc <__sflush_r+0x44>
 80068d0:	6863      	ldr	r3, [r4, #4]
 80068d2:	1ad2      	subs	r2, r2, r3
 80068d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068d6:	b10b      	cbz	r3, 80068dc <__sflush_r+0x44>
 80068d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	2300      	movs	r3, #0
 80068de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068e0:	6a21      	ldr	r1, [r4, #32]
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b0      	blx	r6
 80068e6:	1c43      	adds	r3, r0, #1
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	d106      	bne.n	80068fa <__sflush_r+0x62>
 80068ec:	6829      	ldr	r1, [r5, #0]
 80068ee:	291d      	cmp	r1, #29
 80068f0:	d82b      	bhi.n	800694a <__sflush_r+0xb2>
 80068f2:	4a2a      	ldr	r2, [pc, #168]	@ (800699c <__sflush_r+0x104>)
 80068f4:	410a      	asrs	r2, r1
 80068f6:	07d6      	lsls	r6, r2, #31
 80068f8:	d427      	bmi.n	800694a <__sflush_r+0xb2>
 80068fa:	2200      	movs	r2, #0
 80068fc:	6062      	str	r2, [r4, #4]
 80068fe:	04d9      	lsls	r1, r3, #19
 8006900:	6922      	ldr	r2, [r4, #16]
 8006902:	6022      	str	r2, [r4, #0]
 8006904:	d504      	bpl.n	8006910 <__sflush_r+0x78>
 8006906:	1c42      	adds	r2, r0, #1
 8006908:	d101      	bne.n	800690e <__sflush_r+0x76>
 800690a:	682b      	ldr	r3, [r5, #0]
 800690c:	b903      	cbnz	r3, 8006910 <__sflush_r+0x78>
 800690e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006912:	602f      	str	r7, [r5, #0]
 8006914:	b1b9      	cbz	r1, 8006946 <__sflush_r+0xae>
 8006916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800691a:	4299      	cmp	r1, r3
 800691c:	d002      	beq.n	8006924 <__sflush_r+0x8c>
 800691e:	4628      	mov	r0, r5
 8006920:	f7ff fec2 	bl	80066a8 <_free_r>
 8006924:	2300      	movs	r3, #0
 8006926:	6363      	str	r3, [r4, #52]	@ 0x34
 8006928:	e00d      	b.n	8006946 <__sflush_r+0xae>
 800692a:	2301      	movs	r3, #1
 800692c:	4628      	mov	r0, r5
 800692e:	47b0      	blx	r6
 8006930:	4602      	mov	r2, r0
 8006932:	1c50      	adds	r0, r2, #1
 8006934:	d1c9      	bne.n	80068ca <__sflush_r+0x32>
 8006936:	682b      	ldr	r3, [r5, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0c6      	beq.n	80068ca <__sflush_r+0x32>
 800693c:	2b1d      	cmp	r3, #29
 800693e:	d001      	beq.n	8006944 <__sflush_r+0xac>
 8006940:	2b16      	cmp	r3, #22
 8006942:	d11e      	bne.n	8006982 <__sflush_r+0xea>
 8006944:	602f      	str	r7, [r5, #0]
 8006946:	2000      	movs	r0, #0
 8006948:	e022      	b.n	8006990 <__sflush_r+0xf8>
 800694a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800694e:	b21b      	sxth	r3, r3
 8006950:	e01b      	b.n	800698a <__sflush_r+0xf2>
 8006952:	690f      	ldr	r7, [r1, #16]
 8006954:	2f00      	cmp	r7, #0
 8006956:	d0f6      	beq.n	8006946 <__sflush_r+0xae>
 8006958:	0793      	lsls	r3, r2, #30
 800695a:	680e      	ldr	r6, [r1, #0]
 800695c:	bf08      	it	eq
 800695e:	694b      	ldreq	r3, [r1, #20]
 8006960:	600f      	str	r7, [r1, #0]
 8006962:	bf18      	it	ne
 8006964:	2300      	movne	r3, #0
 8006966:	eba6 0807 	sub.w	r8, r6, r7
 800696a:	608b      	str	r3, [r1, #8]
 800696c:	f1b8 0f00 	cmp.w	r8, #0
 8006970:	dde9      	ble.n	8006946 <__sflush_r+0xae>
 8006972:	6a21      	ldr	r1, [r4, #32]
 8006974:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006976:	4643      	mov	r3, r8
 8006978:	463a      	mov	r2, r7
 800697a:	4628      	mov	r0, r5
 800697c:	47b0      	blx	r6
 800697e:	2800      	cmp	r0, #0
 8006980:	dc08      	bgt.n	8006994 <__sflush_r+0xfc>
 8006982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006994:	4407      	add	r7, r0
 8006996:	eba8 0800 	sub.w	r8, r8, r0
 800699a:	e7e7      	b.n	800696c <__sflush_r+0xd4>
 800699c:	dfbffffe 	.word	0xdfbffffe

080069a0 <_fflush_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	690b      	ldr	r3, [r1, #16]
 80069a4:	4605      	mov	r5, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	b913      	cbnz	r3, 80069b0 <_fflush_r+0x10>
 80069aa:	2500      	movs	r5, #0
 80069ac:	4628      	mov	r0, r5
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	b118      	cbz	r0, 80069ba <_fflush_r+0x1a>
 80069b2:	6a03      	ldr	r3, [r0, #32]
 80069b4:	b90b      	cbnz	r3, 80069ba <_fflush_r+0x1a>
 80069b6:	f7ff fc2b 	bl	8006210 <__sinit>
 80069ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f3      	beq.n	80069aa <_fflush_r+0xa>
 80069c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069c4:	07d0      	lsls	r0, r2, #31
 80069c6:	d404      	bmi.n	80069d2 <_fflush_r+0x32>
 80069c8:	0599      	lsls	r1, r3, #22
 80069ca:	d402      	bmi.n	80069d2 <_fflush_r+0x32>
 80069cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ce:	f7ff fe5a 	bl	8006686 <__retarget_lock_acquire_recursive>
 80069d2:	4628      	mov	r0, r5
 80069d4:	4621      	mov	r1, r4
 80069d6:	f7ff ff5f 	bl	8006898 <__sflush_r>
 80069da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069dc:	07da      	lsls	r2, r3, #31
 80069de:	4605      	mov	r5, r0
 80069e0:	d4e4      	bmi.n	80069ac <_fflush_r+0xc>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	059b      	lsls	r3, r3, #22
 80069e6:	d4e1      	bmi.n	80069ac <_fflush_r+0xc>
 80069e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ea:	f7ff fe4d 	bl	8006688 <__retarget_lock_release_recursive>
 80069ee:	e7dd      	b.n	80069ac <_fflush_r+0xc>

080069f0 <__swhatbuf_r>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	460c      	mov	r4, r1
 80069f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f8:	2900      	cmp	r1, #0
 80069fa:	b096      	sub	sp, #88	@ 0x58
 80069fc:	4615      	mov	r5, r2
 80069fe:	461e      	mov	r6, r3
 8006a00:	da0d      	bge.n	8006a1e <__swhatbuf_r+0x2e>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a08:	f04f 0100 	mov.w	r1, #0
 8006a0c:	bf14      	ite	ne
 8006a0e:	2340      	movne	r3, #64	@ 0x40
 8006a10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a14:	2000      	movs	r0, #0
 8006a16:	6031      	str	r1, [r6, #0]
 8006a18:	602b      	str	r3, [r5, #0]
 8006a1a:	b016      	add	sp, #88	@ 0x58
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	466a      	mov	r2, sp
 8006a20:	f000 f848 	bl	8006ab4 <_fstat_r>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	dbec      	blt.n	8006a02 <__swhatbuf_r+0x12>
 8006a28:	9901      	ldr	r1, [sp, #4]
 8006a2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a32:	4259      	negs	r1, r3
 8006a34:	4159      	adcs	r1, r3
 8006a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a3a:	e7eb      	b.n	8006a14 <__swhatbuf_r+0x24>

08006a3c <__smakebuf_r>:
 8006a3c:	898b      	ldrh	r3, [r1, #12]
 8006a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a40:	079d      	lsls	r5, r3, #30
 8006a42:	4606      	mov	r6, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	d507      	bpl.n	8006a58 <__smakebuf_r+0x1c>
 8006a48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	6123      	str	r3, [r4, #16]
 8006a50:	2301      	movs	r3, #1
 8006a52:	6163      	str	r3, [r4, #20]
 8006a54:	b003      	add	sp, #12
 8006a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a58:	ab01      	add	r3, sp, #4
 8006a5a:	466a      	mov	r2, sp
 8006a5c:	f7ff ffc8 	bl	80069f0 <__swhatbuf_r>
 8006a60:	9f00      	ldr	r7, [sp, #0]
 8006a62:	4605      	mov	r5, r0
 8006a64:	4639      	mov	r1, r7
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff fe8a 	bl	8006780 <_malloc_r>
 8006a6c:	b948      	cbnz	r0, 8006a82 <__smakebuf_r+0x46>
 8006a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a72:	059a      	lsls	r2, r3, #22
 8006a74:	d4ee      	bmi.n	8006a54 <__smakebuf_r+0x18>
 8006a76:	f023 0303 	bic.w	r3, r3, #3
 8006a7a:	f043 0302 	orr.w	r3, r3, #2
 8006a7e:	81a3      	strh	r3, [r4, #12]
 8006a80:	e7e2      	b.n	8006a48 <__smakebuf_r+0xc>
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	6020      	str	r0, [r4, #0]
 8006a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	9b01      	ldr	r3, [sp, #4]
 8006a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a92:	b15b      	cbz	r3, 8006aac <__smakebuf_r+0x70>
 8006a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f000 f81d 	bl	8006ad8 <_isatty_r>
 8006a9e:	b128      	cbz	r0, 8006aac <__smakebuf_r+0x70>
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	81a3      	strh	r3, [r4, #12]
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	431d      	orrs	r5, r3
 8006ab0:	81a5      	strh	r5, [r4, #12]
 8006ab2:	e7cf      	b.n	8006a54 <__smakebuf_r+0x18>

08006ab4 <_fstat_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d07      	ldr	r5, [pc, #28]	@ (8006ad4 <_fstat_r+0x20>)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4604      	mov	r4, r0
 8006abc:	4608      	mov	r0, r1
 8006abe:	4611      	mov	r1, r2
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	f7f9 ffe4 	bl	8000a8e <_fstat>
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	d102      	bne.n	8006ad0 <_fstat_r+0x1c>
 8006aca:	682b      	ldr	r3, [r5, #0]
 8006acc:	b103      	cbz	r3, 8006ad0 <_fstat_r+0x1c>
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	bd38      	pop	{r3, r4, r5, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200037a8 	.word	0x200037a8

08006ad8 <_isatty_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d06      	ldr	r5, [pc, #24]	@ (8006af4 <_isatty_r+0x1c>)
 8006adc:	2300      	movs	r3, #0
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	f7f9 ffe3 	bl	8000aae <_isatty>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d102      	bne.n	8006af2 <_isatty_r+0x1a>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	b103      	cbz	r3, 8006af2 <_isatty_r+0x1a>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	200037a8 	.word	0x200037a8

08006af8 <_sbrk_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4d06      	ldr	r5, [pc, #24]	@ (8006b14 <_sbrk_r+0x1c>)
 8006afc:	2300      	movs	r3, #0
 8006afe:	4604      	mov	r4, r0
 8006b00:	4608      	mov	r0, r1
 8006b02:	602b      	str	r3, [r5, #0]
 8006b04:	f7f9 ffec 	bl	8000ae0 <_sbrk>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d102      	bne.n	8006b12 <_sbrk_r+0x1a>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	b103      	cbz	r3, 8006b12 <_sbrk_r+0x1a>
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	200037a8 	.word	0x200037a8

08006b18 <_init>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr

08006b24 <_fini>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr
