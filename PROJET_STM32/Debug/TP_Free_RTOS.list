
TP_Free_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006630  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006810  08006810  00007810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c0  080069c0  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080069c0  080069c0  000079c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069c8  080069c8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c8  080069c8  000079c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069cc  080069cc  000079cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080069d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002abc  2000006c  08006a3c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b28  08006a3c  00008b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187a3  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003724  00000000  00000000  0002083f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00023f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001143  00000000  00000000  000255a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004481  00000000  00000000  000266eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019095  00000000  00000000  0002ab6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d060f  00000000  00000000  00043c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006540  00000000  00000000  00114254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0011a794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080067f8 	.word	0x080067f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080067f8 	.word	0x080067f8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b4:	f3bf 8f4f 	dsb	sy
}
 80005b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <__NVIC_SystemReset+0x24>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005c2:	4904      	ldr	r1, [pc, #16]	@ (80005d4 <__NVIC_SystemReset+0x24>)
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <__NVIC_SystemReset+0x28>)
 80005c6:	4313      	orrs	r3, r2
 80005c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ca:	f3bf 8f4f 	dsb	sy
}
 80005ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <__NVIC_SystemReset+0x20>
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	05fa0004 	.word	0x05fa0004

080005dc <__io_putchar>:
void taskTake(void * pvParameters);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2201      	movs	r2, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <__io_putchar+0x20>)
 80005ee:	f002 fa27 	bl	8002a40 <HAL_UART_Transmit>
	return ch;
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000088 	.word	0x20000088

08000600 <LED_Init>:

void LED_Init(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2120      	movs	r1, #32
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f000 fe6c 	bl	80012e8 <HAL_GPIO_WritePin>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <task_switch_LED>:

void task_switch_LED(void * pvParameters){
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
	/* Block for 100ms. */
	const TickType_t xDelay = (TickType_t) DELAY_100 / portTICK_PERIOD_MS;
 8000620:	2364      	movs	r3, #100	@ 0x64
 8000622:	60bb      	str	r3, [r7, #8]
	for(;;){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000624:	2120      	movs	r1, #32
 8000626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062a:	f000 fe75 	bl	8001318 <HAL_GPIO_TogglePin>
		printf("Count : %d\r\n", count);
 800062e:	68f9      	ldr	r1, [r7, #12]
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <task_switch_LED+0x34>)
 8000632:	f005 f9b1 	bl	8005998 <iprintf>
		count++;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
		vTaskDelay(xDelay);
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f003 fea9 	bl	8004394 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000642:	bf00      	nop
 8000644:	e7ee      	b.n	8000624 <task_switch_LED+0x10>
 8000646:	bf00      	nop
 8000648:	08006810 	.word	0x08006810

0800064c <taskGive>:
	}
}

void taskGive(void * pvParameters){
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	TickType_t xDelay = (TickType_t) DELAY_100 / portTICK_PERIOD_MS; //100ms
 8000654:	2364      	movs	r3, #100	@ 0x64
 8000656:	60fb      	str	r3, [r7, #12]
	for(;;){
		printf("Waiting to give the semaphore, Delay = %u\r\n", (unsigned int)xDelay);
 8000658:	68f9      	ldr	r1, [r7, #12]
 800065a:	480a      	ldr	r0, [pc, #40]	@ (8000684 <taskGive+0x38>)
 800065c:	f005 f99c 	bl	8005998 <iprintf>
		xSemaphoreGive(sem1);
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <taskGive+0x3c>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	f003 fa33 	bl	8003ad4 <xQueueGenericSend>
		printf("Semaphore given\r\n");
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <taskGive+0x40>)
 8000670:	f005 f9fa 	bl	8005a68 <puts>
		vTaskDelay(xDelay);
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f003 fe8d 	bl	8004394 <vTaskDelay>
		xDelay += 100;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3364      	adds	r3, #100	@ 0x64
 800067e:	60fb      	str	r3, [r7, #12]
		printf("Waiting to give the semaphore, Delay = %u\r\n", (unsigned int)xDelay);
 8000680:	bf00      	nop
 8000682:	e7e9      	b.n	8000658 <taskGive+0xc>
 8000684:	08006820 	.word	0x08006820
 8000688:	20000120 	.word	0x20000120
 800068c:	0800684c 	.word	0x0800684c

08000690 <taskTake>:
	}
}

void taskTake(void * pvParameters){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
    for(;;){
        printf("Waiting to take the semaphore\r\n");
 8000698:	480a      	ldr	r0, [pc, #40]	@ (80006c4 <taskTake+0x34>)
 800069a:	f005 f9e5 	bl	8005a68 <puts>
        if (xSemaphoreTake(sem1, ((TickType_t) DELAY_1000)) == pdTRUE){
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <taskTake+0x38>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fb16 	bl	8003cd8 <xQueueSemaphoreTake>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d103      	bne.n	80006ba <taskTake+0x2a>
        	printf("Semaphore taken\r\n");
 80006b2:	4806      	ldr	r0, [pc, #24]	@ (80006cc <taskTake+0x3c>)
 80006b4:	f005 f9d8 	bl	8005a68 <puts>
 80006b8:	e7ee      	b.n	8000698 <taskTake+0x8>
    	}
    	else {
			printf("Failed to take semaphore, reset software\r\n");
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <taskTake+0x40>)
 80006bc:	f005 f9d4 	bl	8005a68 <puts>
			NVIC_SystemReset(); // Reset the uC
 80006c0:	f7ff ff76 	bl	80005b0 <__NVIC_SystemReset>
 80006c4:	08006860 	.word	0x08006860
 80006c8:	20000120 	.word	0x20000120
 80006cc:	08006880 	.word	0x08006880
 80006d0:	08006894 	.word	0x08006894

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fb6c 	bl	8000db6 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Init();
 80006de:	f7ff ff8f 	bl	8000600 <LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f859 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f8ed 	bl	80008c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ea:	f000 f89f 	bl	800082c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("==============START==============\r\n");
 80006ee:	4820      	ldr	r0, [pc, #128]	@ (8000770 <main+0x9c>)
 80006f0:	f005 f9ba 	bl	8005a68 <puts>

  sem1 = xSemaphoreCreateBinary();
 80006f4:	2203      	movs	r2, #3
 80006f6:	2100      	movs	r1, #0
 80006f8:	2001      	movs	r0, #1
 80006fa:	f003 f995 	bl	8003a28 <xQueueGenericCreate>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a1c      	ldr	r2, [pc, #112]	@ (8000774 <main+0xa0>)
 8000702:	6013      	str	r3, [r2, #0]
  xTaskCreate(taskGive, "Give the semaphore each 100ms", STACK_SIZE, NULL, 1, NULL);
 8000704:	2300      	movs	r3, #0
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	2301      	movs	r3, #1
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2300      	movs	r3, #0
 800070e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000712:	4919      	ldr	r1, [pc, #100]	@ (8000778 <main+0xa4>)
 8000714:	4819      	ldr	r0, [pc, #100]	@ (800077c <main+0xa8>)
 8000716:	f003 fcf1 	bl	80040fc <xTaskCreate>
  xTaskCreate(taskTake, "Take the semaphore", STACK_SIZE, NULL, 2, NULL);
 800071a:	2300      	movs	r3, #0
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2302      	movs	r3, #2
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2300      	movs	r3, #0
 8000724:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000728:	4915      	ldr	r1, [pc, #84]	@ (8000780 <main+0xac>)
 800072a:	4816      	ldr	r0, [pc, #88]	@ (8000784 <main+0xb0>)
 800072c:	f003 fce6 	bl	80040fc <xTaskCreate>
  xTaskCreate(task_switch_LED, "Toggle LED", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000730:	2300      	movs	r3, #0
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	2300      	movs	r3, #0
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800073e:	4912      	ldr	r1, [pc, #72]	@ (8000788 <main+0xb4>)
 8000740:	4812      	ldr	r0, [pc, #72]	@ (800078c <main+0xb8>)
 8000742:	f003 fcdb 	bl	80040fc <xTaskCreate>

  vTaskStartScheduler();	// démarre le sheduler = boucle infinie
 8000746:	f003 fe5b 	bl	8004400 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <main+0xbc>)
 800074c:	1d3c      	adds	r4, r7, #4
 800074e:	461d      	mov	r5, r3
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	682b      	ldr	r3, [r5, #0]
 8000756:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f003 f80a 	bl	8003776 <osThreadCreate>
 8000762:	4603      	mov	r3, r0
 8000764:	4a0b      	ldr	r2, [pc, #44]	@ (8000794 <main+0xc0>)
 8000766:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000768:	f002 fffe 	bl	8003768 <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <main+0x98>
 8000770:	080068c0 	.word	0x080068c0
 8000774:	20000120 	.word	0x20000120
 8000778:	080068e4 	.word	0x080068e4
 800077c:	0800064d 	.word	0x0800064d
 8000780:	08006904 	.word	0x08006904
 8000784:	08000691 	.word	0x08000691
 8000788:	08006918 	.word	0x08006918
 800078c:	08000615 	.word	0x08000615
 8000790:	08006930 	.word	0x08006930
 8000794:	2000011c 	.word	0x2000011c

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	@ 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2238      	movs	r2, #56	@ 0x38
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 fa3e 	bl	8005c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fdc6 	bl	800134c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	2303      	movs	r3, #3
 80007d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007d2:	2306      	movs	r3, #6
 80007d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007d6:	2355      	movs	r3, #85	@ 0x55
 80007d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fe62 	bl	80014b4 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007f6:	f000 f8e5 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2303      	movs	r3, #3
 8000800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2104      	movs	r1, #4
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f960 	bl	8001ad8 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800081e:	f000 f8d1 	bl	80009c4 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	@ 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 8000832:	4a23      	ldr	r2, [pc, #140]	@ (80008c0 <MX_USART2_UART_Init+0x94>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000874:	4811      	ldr	r0, [pc, #68]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 8000876:	f002 f893 	bl	80029a0 <HAL_UART_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000880:	f000 f8a0 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	480d      	ldr	r0, [pc, #52]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 8000888:	f002 fe8c 	bl	80035a4 <HAL_UARTEx_SetTxFifoThreshold>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000892:	f000 f897 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4808      	ldr	r0, [pc, #32]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 800089a:	f002 fec1 	bl	8003620 <HAL_UARTEx_SetRxFifoThreshold>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008a4:	f000 f88e 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_USART2_UART_Init+0x90>)
 80008aa:	f002 fe42 	bl	8003532 <HAL_UARTEx_DisableFifoMode>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008b4:	f000 f886 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000088 	.word	0x20000088
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <MX_GPIO_Init+0xc4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	4a2a      	ldr	r2, [pc, #168]	@ (8000988 <MX_GPIO_Init+0xc4>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e6:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <MX_GPIO_Init+0xc4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f2:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <MX_GPIO_Init+0xc4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a24      	ldr	r2, [pc, #144]	@ (8000988 <MX_GPIO_Init+0xc4>)
 80008f8:	f043 0320 	orr.w	r3, r3, #32
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_GPIO_Init+0xc4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1e      	ldr	r2, [pc, #120]	@ (8000988 <MX_GPIO_Init+0xc4>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a18      	ldr	r2, [pc, #96]	@ (8000988 <MX_GPIO_Init+0xc4>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_GPIO_Init+0xc4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2120      	movs	r1, #32
 800093e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000942:	f000 fcd1 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000946:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	480b      	ldr	r0, [pc, #44]	@ (800098c <MX_GPIO_Init+0xc8>)
 800095e:	f000 fb41 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Output_Pin */
  GPIO_InitStruct.Pin = LED_Output_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Output_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097c:	f000 fb32 	bl	8000fe4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	@ 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	48000800 	.word	0x48000800

08000990 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f002 ff13 	bl	80037c4 <osDelay>
 800099e:	e7fb      	b.n	8000998 <StartDefaultTask+0x8>

080009a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b2:	f000 fa19 	bl	8000de8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40012c00 	.word	0x40012c00

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_MspInit+0x50>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009da:	4a11      	ldr	r2, [pc, #68]	@ (8000a20 <HAL_MspInit+0x50>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <HAL_MspInit+0x50>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <HAL_MspInit+0x50>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <HAL_MspInit+0x50>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <HAL_MspInit+0x50>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	210f      	movs	r1, #15
 8000a0a:	f06f 0001 	mvn.w	r0, #1
 8000a0e:	f000 fac1 	bl	8000f94 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a12:	f000 fd3f 	bl	8001494 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09a      	sub	sp, #104	@ 0x68
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2244      	movs	r2, #68	@ 0x44
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f005 f8ef 	bl	8005c28 <memset>
  if(huart->Instance==USART2)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000acc <HAL_UART_MspInit+0xa8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d136      	bne.n	8000ac2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fa87 	bl	8001f74 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a6c:	f7ff ffaa 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a74:	4a16      	ldr	r2, [pc, #88]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	4a10      	ldr	r2, [pc, #64]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abe:	f000 fa91 	bl	8000fe4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3768      	adds	r7, #104	@ 0x68
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	@ 0x30
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b98 <HAL_InitTick+0xc4>)
 8000ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8000b98 <HAL_InitTick+0xc4>)
 8000aea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000aee:	6613      	str	r3, [r2, #96]	@ 0x60
 8000af0:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <HAL_InitTick+0xc4>)
 8000af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afc:	f107 020c 	add.w	r2, r7, #12
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 f9bc 	bl	8001e84 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b0c:	f001 f9a4 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 8000b10:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b14:	4a21      	ldr	r2, [pc, #132]	@ (8000b9c <HAL_InitTick+0xc8>)
 8000b16:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1a:	0c9b      	lsrs	r3, r3, #18
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <HAL_InitTick+0xcc>)
 8000b22:	4a20      	ldr	r2, [pc, #128]	@ (8000ba4 <HAL_InitTick+0xd0>)
 8000b24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <HAL_InitTick+0xcc>)
 8000b28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <HAL_InitTick+0xcc>)
 8000b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <HAL_InitTick+0xcc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <HAL_InitTick+0xcc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000b40:	4817      	ldr	r0, [pc, #92]	@ (8000ba0 <HAL_InitTick+0xcc>)
 8000b42:	f001 fc07 	bl	8002354 <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d11b      	bne.n	8000b8c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b54:	4812      	ldr	r0, [pc, #72]	@ (8000ba0 <HAL_InitTick+0xcc>)
 8000b56:	f001 fc5f 	bl	8002418 <HAL_TIM_Base_Start_IT>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d111      	bne.n	8000b8c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b68:	2019      	movs	r0, #25
 8000b6a:	f000 fa2d 	bl	8000fc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d808      	bhi.n	8000b86 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2019      	movs	r0, #25
 8000b7a:	f000 fa0b 	bl	8000f94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_InitTick+0xd4>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	e002      	b.n	8000b8c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3730      	adds	r7, #48	@ 0x30
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	431bde83 	.word	0x431bde83
 8000ba0:	20000124 	.word	0x20000124
 8000ba4:	40012c00 	.word	0x40012c00
 8000ba8:	20000004 	.word	0x20000004

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bea:	f001 fc7f 	bl	80024ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000124 	.word	0x20000124

08000bf8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00a      	b.n	8000c20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0a:	f3af 8000 	nop.w
 8000c0e:	4601      	mov	r1, r0
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf0      	blt.n	8000c0a <_read+0x12>
  }

  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e009      	b.n	8000c58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fcc5 	bl	80005dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf1      	blt.n	8000c44 <_write+0x12>
  }
  return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:

int _close(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c92:	605a      	str	r2, [r3, #4]
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:

int _isatty(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f005 f834 	bl	8005d70 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20008000 	.word	0x20008000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000170 	.word	0x20000170
 8000d3c:	20002b28 	.word	0x20002b28

08000d40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d64:	480d      	ldr	r0, [pc, #52]	@ (8000d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	@ (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f004 fff3 	bl	8005d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fc9d 	bl	80006d4 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   r0, =_estack
 8000d9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000da8:	080069d0 	.word	0x080069d0
  ldr r2, =_sbss
 8000dac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000db0:	20002b28 	.word	0x20002b28

08000db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_2_IRQHandler>

08000db6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f8dc 	bl	8000f7e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f7ff fe84 	bl	8000ad4 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	e001      	b.n	8000ddc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd8:	f7ff fdfa 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]

}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_IncTick+0x1c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_IncTick+0x20>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a03      	ldr	r2, [pc, #12]	@ (8000e04 <HAL_IncTick+0x1c>)
 8000df8:	6013      	str	r3, [r2, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000174 	.word	0x20000174
 8000e08:	20000008 	.word	0x20000008

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000174 	.word	0x20000174

08000e24 <__NVIC_SetPriorityGrouping>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	@ (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ff4c 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa2:	f7ff ff63 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000fa6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	6978      	ldr	r0, [r7, #20]
 8000fae:	f7ff ffb3 	bl	8000f18 <NVIC_EncodePriority>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff82 	bl	8000ec4 <__NVIC_SetPriority>
}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff56 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ff2:	e15a      	b.n	80012aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 814c 	beq.w	80012a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d005      	beq.n	8001024 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001020:	2b02      	cmp	r3, #2
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 0201 	and.w	r2, r3, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b03      	cmp	r3, #3
 8001090:	d017      	beq.n	80010c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d123      	bne.n	8001116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	691a      	ldr	r2, [r3, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0203 	and.w	r2, r3, #3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 80a6 	beq.w	80012a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	4b5b      	ldr	r3, [pc, #364]	@ (80012c8 <HAL_GPIO_Init+0x2e4>)
 800115a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115c:	4a5a      	ldr	r2, [pc, #360]	@ (80012c8 <HAL_GPIO_Init+0x2e4>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6613      	str	r3, [r2, #96]	@ 0x60
 8001164:	4b58      	ldr	r3, [pc, #352]	@ (80012c8 <HAL_GPIO_Init+0x2e4>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001170:	4a56      	ldr	r2, [pc, #344]	@ (80012cc <HAL_GPIO_Init+0x2e8>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800119a:	d01f      	beq.n	80011dc <HAL_GPIO_Init+0x1f8>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a4c      	ldr	r2, [pc, #304]	@ (80012d0 <HAL_GPIO_Init+0x2ec>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d019      	beq.n	80011d8 <HAL_GPIO_Init+0x1f4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a4b      	ldr	r2, [pc, #300]	@ (80012d4 <HAL_GPIO_Init+0x2f0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d013      	beq.n	80011d4 <HAL_GPIO_Init+0x1f0>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a4a      	ldr	r2, [pc, #296]	@ (80012d8 <HAL_GPIO_Init+0x2f4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d00d      	beq.n	80011d0 <HAL_GPIO_Init+0x1ec>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a49      	ldr	r2, [pc, #292]	@ (80012dc <HAL_GPIO_Init+0x2f8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d007      	beq.n	80011cc <HAL_GPIO_Init+0x1e8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a48      	ldr	r2, [pc, #288]	@ (80012e0 <HAL_GPIO_Init+0x2fc>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d101      	bne.n	80011c8 <HAL_GPIO_Init+0x1e4>
 80011c4:	2305      	movs	r3, #5
 80011c6:	e00a      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011c8:	2306      	movs	r3, #6
 80011ca:	e008      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011cc:	2304      	movs	r3, #4
 80011ce:	e006      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011d0:	2303      	movs	r3, #3
 80011d2:	e004      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e002      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011dc:	2300      	movs	r3, #0
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	f002 0203 	and.w	r2, r2, #3
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	4093      	lsls	r3, r2
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ee:	4937      	ldr	r1, [pc, #220]	@ (80012cc <HAL_GPIO_Init+0x2e8>)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011fc:	4b39      	ldr	r3, [pc, #228]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001220:	4a30      	ldr	r2, [pc, #192]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001226:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800124a:	4a26      	ldr	r2, [pc, #152]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001250:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800129e:	4a11      	ldr	r2, [pc, #68]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f47f ae9d 	bne.w	8000ff4 <HAL_GPIO_Init+0x10>
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010000 	.word	0x40010000
 80012d0:	48000400 	.word	0x48000400
 80012d4:	48000800 	.word	0x48000800
 80012d8:	48000c00 	.word	0x48000c00
 80012dc:	48001000 	.word	0x48001000
 80012e0:	48001400 	.word	0x48001400
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001304:	e002      	b.n	800130c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4013      	ands	r3, r2
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43d9      	mvns	r1, r3
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	400b      	ands	r3, r1
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d141      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800135a:	4b4b      	ldr	r3, [pc, #300]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001366:	d131      	bne.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001368:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800136e:	4a46      	ldr	r2, [pc, #280]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001378:	4b43      	ldr	r3, [pc, #268]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001380:	4a41      	ldr	r2, [pc, #260]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001386:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001388:	4b40      	ldr	r3, [pc, #256]	@ (800148c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2232      	movs	r2, #50	@ 0x32
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	4a3f      	ldr	r2, [pc, #252]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	0c9b      	lsrs	r3, r3, #18
 800139a:	3301      	adds	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139e:	e002      	b.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a6:	4b38      	ldr	r3, [pc, #224]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b2:	d102      	bne.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f2      	bne.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ba:	4b33      	ldr	r3, [pc, #204]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c6:	d158      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e057      	b.n	800147c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013dc:	e04d      	b.n	800147a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013e4:	d141      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e6:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f2:	d131      	bne.n	8001458 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f4:	4b24      	ldr	r3, [pc, #144]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013fa:	4a23      	ldr	r2, [pc, #140]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001404:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800140c:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001414:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2232      	movs	r2, #50	@ 0x32
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	4a1c      	ldr	r2, [pc, #112]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	0c9b      	lsrs	r3, r3, #18
 8001426:	3301      	adds	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142a:	e002      	b.n	8001432 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3b01      	subs	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800143e:	d102      	bne.n	8001446 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f2      	bne.n	800142c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001452:	d112      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e011      	b.n	800147c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001458:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001464:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001468:	e007      	b.n	800147a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001472:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001478:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40007000 	.word	0x40007000
 800148c:	20000000 	.word	0x20000000
 8001490:	431bde83 	.word	0x431bde83

08001494 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800149e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a2:	6093      	str	r3, [r2, #8]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40007000 	.word	0x40007000

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e2fe      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d075      	beq.n	80015be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d2:	4b97      	ldr	r3, [pc, #604]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014dc:	4b94      	ldr	r3, [pc, #592]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	d102      	bne.n	80014f2 <HAL_RCC_OscConfig+0x3e>
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d002      	beq.n	80014f8 <HAL_RCC_OscConfig+0x44>
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d10b      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4b8d      	ldr	r3, [pc, #564]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d05b      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d157      	bne.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e2d9      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x74>
 800151a:	4b85      	ldr	r3, [pc, #532]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a84      	ldr	r2, [pc, #528]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x98>
 8001532:	4b7f      	ldr	r3, [pc, #508]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a7e      	ldr	r2, [pc, #504]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b7c      	ldr	r3, [pc, #496]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7b      	ldr	r2, [pc, #492]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 800154c:	4b78      	ldr	r3, [pc, #480]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a77      	ldr	r2, [pc, #476]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b75      	ldr	r3, [pc, #468]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a74      	ldr	r2, [pc, #464]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fc4e 	bl	8000e0c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fc4a 	bl	8000e0c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	@ 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e29e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001586:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xc0>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fc3a 	bl	8000e0c <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fc36 	bl	8000e0c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	@ 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e28a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ae:	4b60      	ldr	r3, [pc, #384]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d075      	beq.n	80016b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ca:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d4:	4b56      	ldr	r3, [pc, #344]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	d102      	bne.n	80015ea <HAL_RCC_OscConfig+0x136>
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d002      	beq.n	80015f0 <HAL_RCC_OscConfig+0x13c>
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d11f      	bne.n	8001630 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x154>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e25d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001608:	4b49      	ldr	r3, [pc, #292]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	061b      	lsls	r3, r3, #24
 8001616:	4946      	ldr	r1, [pc, #280]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800161c:	4b45      	ldr	r3, [pc, #276]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fa57 	bl	8000ad4 <HAL_InitTick>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d043      	beq.n	80016b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e249      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d023      	beq.n	8001680 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b3d      	ldr	r3, [pc, #244]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a3c      	ldr	r2, [pc, #240]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fbe2 	bl	8000e0c <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fbde 	bl	8000e0c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e232      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165e:	4b34      	ldr	r3, [pc, #208]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	061b      	lsls	r3, r3, #24
 8001678:	492d      	ldr	r1, [pc, #180]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 800167a:	4313      	orrs	r3, r2
 800167c:	604b      	str	r3, [r1, #4]
 800167e:	e01a      	b.n	80016b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001680:	4b2b      	ldr	r3, [pc, #172]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a2a      	ldr	r2, [pc, #168]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001686:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800168a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fbbe 	bl	8000e0c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fbba 	bl	8000e0c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e20e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a6:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x1e0>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d041      	beq.n	8001746 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d01c      	beq.n	8001704 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80016cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d0:	4a17      	ldr	r2, [pc, #92]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016da:	f7ff fb97 	bl	8000e0c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e2:	f7ff fb93 	bl	8000e0c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1e7      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0ef      	beq.n	80016e2 <HAL_RCC_OscConfig+0x22e>
 8001702:	e020      	b.n	8001746 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001704:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 8001706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800170a:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff fb7a 	bl	8000e0c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800171a:	e00d      	b.n	8001738 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff fb76 	bl	8000e0c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d906      	bls.n	8001738 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1ca      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001738:	4b8c      	ldr	r3, [pc, #560]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 800173a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ea      	bne.n	800171c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80a6 	beq.w	80018a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001758:	4b84      	ldr	r3, [pc, #528]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_OscConfig+0x2b4>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x2b6>
 8001768:	2300      	movs	r3, #0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00d      	beq.n	800178a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b7f      	ldr	r3, [pc, #508]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001772:	4a7e      	ldr	r2, [pc, #504]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	6593      	str	r3, [r2, #88]	@ 0x58
 800177a:	4b7c      	ldr	r3, [pc, #496]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001786:	2301      	movs	r3, #1
 8001788:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178a:	4b79      	ldr	r3, [pc, #484]	@ (8001970 <HAL_RCC_OscConfig+0x4bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d118      	bne.n	80017c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001796:	4b76      	ldr	r3, [pc, #472]	@ (8001970 <HAL_RCC_OscConfig+0x4bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a75      	ldr	r2, [pc, #468]	@ (8001970 <HAL_RCC_OscConfig+0x4bc>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fb33 	bl	8000e0c <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017aa:	f7ff fb2f 	bl	8000e0c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e183      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001970 <HAL_RCC_OscConfig+0x4bc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d108      	bne.n	80017e2 <HAL_RCC_OscConfig+0x32e>
 80017d0:	4b66      	ldr	r3, [pc, #408]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d6:	4a65      	ldr	r2, [pc, #404]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e0:	e024      	b.n	800182c <HAL_RCC_OscConfig+0x378>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d110      	bne.n	800180c <HAL_RCC_OscConfig+0x358>
 80017ea:	4b60      	ldr	r3, [pc, #384]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f0:	4a5e      	ldr	r2, [pc, #376]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017fa:	4b5c      	ldr	r3, [pc, #368]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 80017fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001800:	4a5a      	ldr	r2, [pc, #360]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800180a:	e00f      	b.n	800182c <HAL_RCC_OscConfig+0x378>
 800180c:	4b57      	ldr	r3, [pc, #348]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001812:	4a56      	ldr	r2, [pc, #344]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800181c:	4b53      	ldr	r3, [pc, #332]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001822:	4a52      	ldr	r2, [pc, #328]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d016      	beq.n	8001862 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff faea 	bl	8000e0c <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183c:	f7ff fae6 	bl	8000e0c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e138      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001852:	4b46      	ldr	r3, [pc, #280]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0ed      	beq.n	800183c <HAL_RCC_OscConfig+0x388>
 8001860:	e015      	b.n	800188e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7ff fad3 	bl	8000e0c <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7ff facf 	bl	8000e0c <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e121      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001880:	4b3a      	ldr	r3, [pc, #232]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1ed      	bne.n	800186a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800188e:	7ffb      	ldrb	r3, [r7, #31]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001894:	4b35      	ldr	r3, [pc, #212]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 8001896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001898:	4a34      	ldr	r2, [pc, #208]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 800189a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800189e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d03c      	beq.n	8001926 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01c      	beq.n	80018ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 80018b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ba:	4a2c      	ldr	r2, [pc, #176]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff faa2 	bl	8000e0c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018cc:	f7ff fa9e 	bl	8000e0c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0f2      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018de:	4b23      	ldr	r3, [pc, #140]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ef      	beq.n	80018cc <HAL_RCC_OscConfig+0x418>
 80018ec:	e01b      	b.n	8001926 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ee:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 80018f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018f4:	4a1d      	ldr	r2, [pc, #116]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7ff fa85 	bl	8000e0c <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001906:	f7ff fa81 	bl	8000e0c <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0d5      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 800191a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ef      	bne.n	8001906 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80c9 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b0c      	cmp	r3, #12
 800193a:	f000 8083 	beq.w	8001a44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d15e      	bne.n	8001a04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a08      	ldr	r2, [pc, #32]	@ (800196c <HAL_RCC_OscConfig+0x4b8>)
 800194c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fa5b 	bl	8000e0c <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001958:	e00c      	b.n	8001974 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff fa57 	bl	8000e0c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d905      	bls.n	8001974 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e0ab      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
 800196c:	40021000 	.word	0x40021000
 8001970:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001974:	4b55      	ldr	r3, [pc, #340]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ec      	bne.n	800195a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001980:	4b52      	ldr	r3, [pc, #328]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4b52      	ldr	r3, [pc, #328]	@ (8001ad0 <HAL_RCC_OscConfig+0x61c>)
 8001986:	4013      	ands	r3, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6a11      	ldr	r1, [r2, #32]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001990:	3a01      	subs	r2, #1
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	4311      	orrs	r1, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800199a:	0212      	lsls	r2, r2, #8
 800199c:	4311      	orrs	r1, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019a2:	0852      	lsrs	r2, r2, #1
 80019a4:	3a01      	subs	r2, #1
 80019a6:	0552      	lsls	r2, r2, #21
 80019a8:	4311      	orrs	r1, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019ae:	0852      	lsrs	r2, r2, #1
 80019b0:	3a01      	subs	r2, #1
 80019b2:	0652      	lsls	r2, r2, #25
 80019b4:	4311      	orrs	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019ba:	06d2      	lsls	r2, r2, #27
 80019bc:	430a      	orrs	r2, r1
 80019be:	4943      	ldr	r1, [pc, #268]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c4:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a40      	ldr	r2, [pc, #256]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d0:	4b3e      	ldr	r3, [pc, #248]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4a3d      	ldr	r2, [pc, #244]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff fa16 	bl	8000e0c <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff fa12 	bl	8000e0c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e066      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f6:	4b35      	ldr	r3, [pc, #212]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x530>
 8001a02:	e05e      	b.n	8001ac2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a30      	ldr	r2, [pc, #192]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 8001a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff f9fc 	bl	8000e0c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff f9f8 	bl	8000e0c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e04c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2a:	4b28      	ldr	r3, [pc, #160]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a36:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	4924      	ldr	r1, [pc, #144]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_RCC_OscConfig+0x620>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60cb      	str	r3, [r1, #12]
 8001a42:	e03e      	b.n	8001ac2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e039      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a50:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <HAL_RCC_OscConfig+0x618>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d12c      	bne.n	8001abe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d123      	bne.n	8001abe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d11b      	bne.n	8001abe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d113      	bne.n	8001abe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d109      	bne.n	8001abe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	019f800c 	.word	0x019f800c
 8001ad4:	feeefffc 	.word	0xfeeefffc

08001ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e11e      	b.n	8001d2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b91      	ldr	r3, [pc, #580]	@ (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d910      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b8e      	ldr	r3, [pc, #568]	@ (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 020f 	bic.w	r2, r3, #15
 8001b06:	498c      	ldr	r1, [pc, #560]	@ (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b8a      	ldr	r3, [pc, #552]	@ (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e106      	b.n	8001d2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d073      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d129      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b34:	4b81      	ldr	r3, [pc, #516]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0f4      	b.n	8001d2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b44:	f000 f9d0 	bl	8001ee8 <RCC_GetSysClockFreqFromPLLSource>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4a7c      	ldr	r2, [pc, #496]	@ (8001d40 <HAL_RCC_ClockConfig+0x268>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d93f      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b52:	4b7a      	ldr	r3, [pc, #488]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d033      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d12f      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b72:	4b72      	ldr	r3, [pc, #456]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b7a:	4a70      	ldr	r2, [pc, #448]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e024      	b.n	8001bd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b90:	4b6a      	ldr	r3, [pc, #424]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0c6      	b.n	8001d2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba0:	4b66      	ldr	r3, [pc, #408]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0be      	b.n	8001d2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bb0:	f000 f8ce 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4a61      	ldr	r2, [pc, #388]	@ (8001d40 <HAL_RCC_ClockConfig+0x268>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d909      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bc6:	4a5d      	ldr	r2, [pc, #372]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4957      	ldr	r1, [pc, #348]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be4:	f7ff f912 	bl	8000e0c <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7ff f90e 	bl	8000e0c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e095      	b.n	8001d2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b4e      	ldr	r3, [pc, #312]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d023      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c2c:	4b43      	ldr	r3, [pc, #268]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a42      	ldr	r2, [pc, #264]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001c32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c44:	4b3d      	ldr	r3, [pc, #244]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b39      	ldr	r3, [pc, #228]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4936      	ldr	r1, [pc, #216]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b80      	cmp	r3, #128	@ 0x80
 8001c6c:	d105      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c6e:	4b33      	ldr	r3, [pc, #204]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4a32      	ldr	r2, [pc, #200]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001c74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d21d      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c88:	4b2b      	ldr	r3, [pc, #172]	@ (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 020f 	bic.w	r2, r3, #15
 8001c90:	4929      	ldr	r1, [pc, #164]	@ (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c98:	f7ff f8b8 	bl	8000e0c <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7ff f8b4 	bl	8000e0c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e03b      	b.n	8001d2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1ed      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4917      	ldr	r1, [pc, #92]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cee:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	490f      	ldr	r1, [pc, #60]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d02:	f000 f825 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <HAL_RCC_ClockConfig+0x264>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	490c      	ldr	r1, [pc, #48]	@ (8001d44 <HAL_RCC_ClockConfig+0x26c>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <HAL_RCC_ClockConfig+0x270>)
 8001d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_RCC_ClockConfig+0x274>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fed4 	bl	8000ad4 <HAL_InitTick>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	04c4b400 	.word	0x04c4b400
 8001d44:	0800694c 	.word	0x0800694c
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d56:	4b2c      	ldr	r3, [pc, #176]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d62:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	e047      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d68:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d102      	bne.n	8001d7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d74:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	e03e      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d7a:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d136      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d86:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	4a16      	ldr	r2, [pc, #88]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dae:	68d2      	ldr	r2, [r2, #12]
 8001db0:	0a12      	lsrs	r2, r2, #8
 8001db2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
      break;
 8001dbc:	e00c      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dbe:	4a13      	ldr	r2, [pc, #76]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4a10      	ldr	r2, [pc, #64]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc8:	68d2      	ldr	r2, [r2, #12]
 8001dca:	0a12      	lsrs	r2, r2, #8
 8001dcc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
      break;
 8001dd6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0e5b      	lsrs	r3, r3, #25
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e001      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001df8:	693b      	ldr	r3, [r7, #16]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	016e3600 	.word	0x016e3600

08001e14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4904      	ldr	r1, [pc, #16]	@ (8001e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	0800695c 	.word	0x0800695c

08001e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e5c:	f7ff ffda 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	0adb      	lsrs	r3, r3, #11
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	4904      	ldr	r1, [pc, #16]	@ (8001e80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e6e:	5ccb      	ldrb	r3, [r1, r3]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	0800695c 	.word	0x0800695c

08001e84 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	220f      	movs	r2, #15
 8001e92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e94:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ec6:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <HAL_RCC_GetClockConfig+0x60>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d10c      	bne.n	8001f26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f0c:	4a17      	ldr	r2, [pc, #92]	@ (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f16:	68d2      	ldr	r2, [r2, #12]
 8001f18:	0a12      	lsrs	r2, r2, #8
 8001f1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
    break;
 8001f24:	e00c      	b.n	8001f40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f30:	68d2      	ldr	r2, [r2, #12]
 8001f32:	0a12      	lsrs	r2, r2, #8
 8001f34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    break;
 8001f3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0e5b      	lsrs	r3, r3, #25
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f5a:	687b      	ldr	r3, [r7, #4]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	016e3600 	.word	0x016e3600
 8001f70:	00f42400 	.word	0x00f42400

08001f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f80:	2300      	movs	r3, #0
 8001f82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8098 	beq.w	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f96:	4b43      	ldr	r3, [pc, #268]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10d      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b40      	ldr	r3, [pc, #256]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a3f      	ldr	r2, [pc, #252]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fae:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a39      	ldr	r2, [pc, #228]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fca:	f7fe ff1f 	bl	8000e0c <HAL_GetTick>
 8001fce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd0:	e009      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7fe ff1b 	bl	8000e0c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d902      	bls.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	74fb      	strb	r3, [r7, #19]
        break;
 8001fe4:	e005      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fe6:	4b30      	ldr	r3, [pc, #192]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0ef      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ff2:	7cfb      	ldrb	r3, [r7, #19]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d159      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002002:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01e      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	d019      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002014:	4b23      	ldr	r3, [pc, #140]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800201e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002020:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002026:	4a1f      	ldr	r2, [pc, #124]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002030:	4b1c      	ldr	r3, [pc, #112]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002036:	4a1b      	ldr	r2, [pc, #108]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002038:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002040:	4a18      	ldr	r2, [pc, #96]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d016      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7fe fedb 	bl	8000e0c <HAL_GetTick>
 8002056:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002058:	e00b      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fed7 	bl	8000e0c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d902      	bls.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	74fb      	strb	r3, [r7, #19]
            break;
 8002070:	e006      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002072:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ec      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10b      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002086:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	4903      	ldr	r1, [pc, #12]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800209c:	e008      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800209e:	7cfb      	ldrb	r3, [r7, #19]
 80020a0:	74bb      	strb	r3, [r7, #18]
 80020a2:	e005      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b0:	7c7b      	ldrb	r3, [r7, #17]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4ba6      	ldr	r3, [pc, #664]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	4aa5      	ldr	r2, [pc, #660]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ce:	4ba0      	ldr	r3, [pc, #640]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f023 0203 	bic.w	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	499c      	ldr	r1, [pc, #624]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f0:	4b97      	ldr	r3, [pc, #604]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f023 020c 	bic.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4994      	ldr	r1, [pc, #592]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002112:	4b8f      	ldr	r3, [pc, #572]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	498b      	ldr	r1, [pc, #556]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002134:	4b86      	ldr	r3, [pc, #536]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	4983      	ldr	r1, [pc, #524]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002156:	4b7e      	ldr	r3, [pc, #504]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	497a      	ldr	r1, [pc, #488]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002178:	4b75      	ldr	r3, [pc, #468]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	4972      	ldr	r1, [pc, #456]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800219a:	4b6d      	ldr	r3, [pc, #436]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	4969      	ldr	r1, [pc, #420]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021bc:	4b64      	ldr	r3, [pc, #400]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4961      	ldr	r1, [pc, #388]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021de:	4b5c      	ldr	r3, [pc, #368]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	4958      	ldr	r1, [pc, #352]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002200:	4b53      	ldr	r3, [pc, #332]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002206:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	4950      	ldr	r1, [pc, #320]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800221e:	d105      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002220:	4b4b      	ldr	r3, [pc, #300]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a4a      	ldr	r2, [pc, #296]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800222a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002234:	2b00      	cmp	r3, #0
 8002236:	d015      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002238:	4b45      	ldr	r3, [pc, #276]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002246:	4942      	ldr	r1, [pc, #264]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002256:	d105      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002258:	4b3d      	ldr	r3, [pc, #244]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a3c      	ldr	r2, [pc, #240]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002262:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002270:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002276:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4934      	ldr	r1, [pc, #208]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800228e:	d105      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002290:	4b2f      	ldr	r3, [pc, #188]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a2e      	ldr	r2, [pc, #184]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800229a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a8:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b6:	4926      	ldr	r1, [pc, #152]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022c6:	d105      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c8:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a20      	ldr	r2, [pc, #128]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ee:	4918      	ldr	r1, [pc, #96]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022fe:	d105      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002300:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800230a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002318:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002326:	490a      	ldr	r1, [pc, #40]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002336:	d105      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002338:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002342:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002344:	7cbb      	ldrb	r3, [r7, #18]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000

08002354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e049      	b.n	80023fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f841 	bl	8002402 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3304      	adds	r3, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f000 fa22 	bl	80027dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d001      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e04a      	b.n	80024c6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a21      	ldr	r2, [pc, #132]	@ (80024d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d018      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x6c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800245a:	d013      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x6c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1d      	ldr	r2, [pc, #116]	@ (80024d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00e      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x6c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <HAL_TIM_Base_Start_IT+0xc4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d009      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x6c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1a      	ldr	r2, [pc, #104]	@ (80024e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d004      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x6c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a19      	ldr	r2, [pc, #100]	@ (80024e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d115      	bne.n	80024b0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b06      	cmp	r3, #6
 8002494:	d015      	beq.n	80024c2 <HAL_TIM_Base_Start_IT+0xaa>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800249c:	d011      	beq.n	80024c2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	e008      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e000      	b.n	80024c4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800
 80024e0:	40013400 	.word	0x40013400
 80024e4:	40014000 	.word	0x40014000
 80024e8:	00010007 	.word	0x00010007

080024ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d020      	beq.n	8002550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01b      	beq.n	8002550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0202 	mvn.w	r2, #2
 8002520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f931 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f923 	bl	800278a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f934 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d020      	beq.n	800259c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0204 	mvn.w	r2, #4
 800256c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f90b 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8fd 	bl	800278a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f90e 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d020      	beq.n	80025e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0208 	mvn.w	r2, #8
 80025b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2204      	movs	r2, #4
 80025be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8e5 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8d7 	bl	800278a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f8e8 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d020      	beq.n	8002634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0210 	mvn.w	r2, #16
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2208      	movs	r2, #8
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8bf 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8b1 	bl	800278a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f8c2 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0201 	mvn.w	r2, #1
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe f9a4 	bl	80009a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d104      	bne.n	800266c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00c      	beq.n	8002686 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800267e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f951 	bl	8002928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00c      	beq.n	80026aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80026a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f949 	bl	800293c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00c      	beq.n	80026ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f87c 	bl	80027c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00c      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0220 	mvn.w	r2, #32
 80026ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f911 	bl	8002914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00c      	beq.n	8002716 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800270e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f91d 	bl	8002950 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f915 	bl	8002964 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00c      	beq.n	800275e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f90d 	bl	8002978 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800277a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f905 	bl	800298c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a42      	ldr	r2, [pc, #264]	@ (80028f8 <TIM_Base_SetConfig+0x11c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00f      	beq.n	8002814 <TIM_Base_SetConfig+0x38>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fa:	d00b      	beq.n	8002814 <TIM_Base_SetConfig+0x38>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a3f      	ldr	r2, [pc, #252]	@ (80028fc <TIM_Base_SetConfig+0x120>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d007      	beq.n	8002814 <TIM_Base_SetConfig+0x38>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3e      	ldr	r2, [pc, #248]	@ (8002900 <TIM_Base_SetConfig+0x124>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d003      	beq.n	8002814 <TIM_Base_SetConfig+0x38>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a3d      	ldr	r2, [pc, #244]	@ (8002904 <TIM_Base_SetConfig+0x128>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d108      	bne.n	8002826 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800281a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a33      	ldr	r2, [pc, #204]	@ (80028f8 <TIM_Base_SetConfig+0x11c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01b      	beq.n	8002866 <TIM_Base_SetConfig+0x8a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002834:	d017      	beq.n	8002866 <TIM_Base_SetConfig+0x8a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a30      	ldr	r2, [pc, #192]	@ (80028fc <TIM_Base_SetConfig+0x120>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <TIM_Base_SetConfig+0x8a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a2f      	ldr	r2, [pc, #188]	@ (8002900 <TIM_Base_SetConfig+0x124>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00f      	beq.n	8002866 <TIM_Base_SetConfig+0x8a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a2e      	ldr	r2, [pc, #184]	@ (8002904 <TIM_Base_SetConfig+0x128>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00b      	beq.n	8002866 <TIM_Base_SetConfig+0x8a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a2d      	ldr	r2, [pc, #180]	@ (8002908 <TIM_Base_SetConfig+0x12c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <TIM_Base_SetConfig+0x8a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a2c      	ldr	r2, [pc, #176]	@ (800290c <TIM_Base_SetConfig+0x130>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d003      	beq.n	8002866 <TIM_Base_SetConfig+0x8a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a2b      	ldr	r2, [pc, #172]	@ (8002910 <TIM_Base_SetConfig+0x134>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d108      	bne.n	8002878 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800286c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a16      	ldr	r2, [pc, #88]	@ (80028f8 <TIM_Base_SetConfig+0x11c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00f      	beq.n	80028c4 <TIM_Base_SetConfig+0xe8>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a17      	ldr	r2, [pc, #92]	@ (8002904 <TIM_Base_SetConfig+0x128>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00b      	beq.n	80028c4 <TIM_Base_SetConfig+0xe8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a16      	ldr	r2, [pc, #88]	@ (8002908 <TIM_Base_SetConfig+0x12c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <TIM_Base_SetConfig+0xe8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a15      	ldr	r2, [pc, #84]	@ (800290c <TIM_Base_SetConfig+0x130>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d003      	beq.n	80028c4 <TIM_Base_SetConfig+0xe8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a14      	ldr	r2, [pc, #80]	@ (8002910 <TIM_Base_SetConfig+0x134>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d103      	bne.n	80028cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f023 0201 	bic.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]
  }
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40000400 	.word	0x40000400
 8002900:	40000800 	.word	0x40000800
 8002904:	40013400 	.word	0x40013400
 8002908:	40014000 	.word	0x40014000
 800290c:	40014400 	.word	0x40014400
 8002910:	40014800 	.word	0x40014800

08002914 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e042      	b.n	8002a38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d106      	bne.n	80029ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fe f82d 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2224      	movs	r2, #36	@ 0x24
 80029ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fb82 	bl	80030f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8b3 	bl	8002b5c <UART_SetConfig>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e01b      	b.n	8002a38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fc01 	bl	8003238 <UART_CheckIdleState>
 8002a36:	4603      	mov	r3, r0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	@ 0x28
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d17b      	bne.n	8002b52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_UART_Transmit+0x26>
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e074      	b.n	8002b54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2221      	movs	r2, #33	@ 0x21
 8002a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a7a:	f7fe f9c7 	bl	8000e0c <HAL_GetTick>
 8002a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	88fa      	ldrh	r2, [r7, #6]
 8002a84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a98:	d108      	bne.n	8002aac <HAL_UART_Transmit+0x6c>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	e003      	b.n	8002ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ab4:	e030      	b.n	8002b18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2180      	movs	r1, #128	@ 0x80
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fc63 	bl	800338c <UART_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e03d      	b.n	8002b54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	3302      	adds	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e007      	b.n	8002b06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1c8      	bne.n	8002ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2140      	movs	r1, #64	@ 0x40
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fc2c 	bl	800338c <UART_WaitOnFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e006      	b.n	8002b54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b60:	b08c      	sub	sp, #48	@ 0x30
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4bab      	ldr	r3, [pc, #684]	@ (8002e38 <UART_SetConfig+0x2dc>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4aa0      	ldr	r2, [pc, #640]	@ (8002e3c <UART_SetConfig+0x2e0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d004      	beq.n	8002bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002bd2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be6:	f023 010f 	bic.w	r1, r3, #15
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a91      	ldr	r2, [pc, #580]	@ (8002e40 <UART_SetConfig+0x2e4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d125      	bne.n	8002c4c <UART_SetConfig+0xf0>
 8002c00:	4b90      	ldr	r3, [pc, #576]	@ (8002e44 <UART_SetConfig+0x2e8>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d81a      	bhi.n	8002c44 <UART_SetConfig+0xe8>
 8002c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <UART_SetConfig+0xb8>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c35 	.word	0x08002c35
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002c3d 	.word	0x08002c3d
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c2a:	e0d6      	b.n	8002dda <UART_SetConfig+0x27e>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c32:	e0d2      	b.n	8002dda <UART_SetConfig+0x27e>
 8002c34:	2304      	movs	r3, #4
 8002c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c3a:	e0ce      	b.n	8002dda <UART_SetConfig+0x27e>
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c42:	e0ca      	b.n	8002dda <UART_SetConfig+0x27e>
 8002c44:	2310      	movs	r3, #16
 8002c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c4a:	e0c6      	b.n	8002dda <UART_SetConfig+0x27e>
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a7d      	ldr	r2, [pc, #500]	@ (8002e48 <UART_SetConfig+0x2ec>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d138      	bne.n	8002cc8 <UART_SetConfig+0x16c>
 8002c56:	4b7b      	ldr	r3, [pc, #492]	@ (8002e44 <UART_SetConfig+0x2e8>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d82d      	bhi.n	8002cc0 <UART_SetConfig+0x164>
 8002c64:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <UART_SetConfig+0x110>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002ca1 	.word	0x08002ca1
 8002c70:	08002cc1 	.word	0x08002cc1
 8002c74:	08002cc1 	.word	0x08002cc1
 8002c78:	08002cc1 	.word	0x08002cc1
 8002c7c:	08002cb1 	.word	0x08002cb1
 8002c80:	08002cc1 	.word	0x08002cc1
 8002c84:	08002cc1 	.word	0x08002cc1
 8002c88:	08002cc1 	.word	0x08002cc1
 8002c8c:	08002ca9 	.word	0x08002ca9
 8002c90:	08002cc1 	.word	0x08002cc1
 8002c94:	08002cc1 	.word	0x08002cc1
 8002c98:	08002cc1 	.word	0x08002cc1
 8002c9c:	08002cb9 	.word	0x08002cb9
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ca6:	e098      	b.n	8002dda <UART_SetConfig+0x27e>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cae:	e094      	b.n	8002dda <UART_SetConfig+0x27e>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cb6:	e090      	b.n	8002dda <UART_SetConfig+0x27e>
 8002cb8:	2308      	movs	r3, #8
 8002cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cbe:	e08c      	b.n	8002dda <UART_SetConfig+0x27e>
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cc6:	e088      	b.n	8002dda <UART_SetConfig+0x27e>
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a5f      	ldr	r2, [pc, #380]	@ (8002e4c <UART_SetConfig+0x2f0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d125      	bne.n	8002d1e <UART_SetConfig+0x1c2>
 8002cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e44 <UART_SetConfig+0x2e8>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002cdc:	2b30      	cmp	r3, #48	@ 0x30
 8002cde:	d016      	beq.n	8002d0e <UART_SetConfig+0x1b2>
 8002ce0:	2b30      	cmp	r3, #48	@ 0x30
 8002ce2:	d818      	bhi.n	8002d16 <UART_SetConfig+0x1ba>
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d00a      	beq.n	8002cfe <UART_SetConfig+0x1a2>
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d814      	bhi.n	8002d16 <UART_SetConfig+0x1ba>
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <UART_SetConfig+0x19a>
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d008      	beq.n	8002d06 <UART_SetConfig+0x1aa>
 8002cf4:	e00f      	b.n	8002d16 <UART_SetConfig+0x1ba>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cfc:	e06d      	b.n	8002dda <UART_SetConfig+0x27e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d04:	e069      	b.n	8002dda <UART_SetConfig+0x27e>
 8002d06:	2304      	movs	r3, #4
 8002d08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d0c:	e065      	b.n	8002dda <UART_SetConfig+0x27e>
 8002d0e:	2308      	movs	r3, #8
 8002d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d14:	e061      	b.n	8002dda <UART_SetConfig+0x27e>
 8002d16:	2310      	movs	r3, #16
 8002d18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d1c:	e05d      	b.n	8002dda <UART_SetConfig+0x27e>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a4b      	ldr	r2, [pc, #300]	@ (8002e50 <UART_SetConfig+0x2f4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d125      	bne.n	8002d74 <UART_SetConfig+0x218>
 8002d28:	4b46      	ldr	r3, [pc, #280]	@ (8002e44 <UART_SetConfig+0x2e8>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d34:	d016      	beq.n	8002d64 <UART_SetConfig+0x208>
 8002d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d38:	d818      	bhi.n	8002d6c <UART_SetConfig+0x210>
 8002d3a:	2b80      	cmp	r3, #128	@ 0x80
 8002d3c:	d00a      	beq.n	8002d54 <UART_SetConfig+0x1f8>
 8002d3e:	2b80      	cmp	r3, #128	@ 0x80
 8002d40:	d814      	bhi.n	8002d6c <UART_SetConfig+0x210>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <UART_SetConfig+0x1f0>
 8002d46:	2b40      	cmp	r3, #64	@ 0x40
 8002d48:	d008      	beq.n	8002d5c <UART_SetConfig+0x200>
 8002d4a:	e00f      	b.n	8002d6c <UART_SetConfig+0x210>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d52:	e042      	b.n	8002dda <UART_SetConfig+0x27e>
 8002d54:	2302      	movs	r3, #2
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d5a:	e03e      	b.n	8002dda <UART_SetConfig+0x27e>
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d62:	e03a      	b.n	8002dda <UART_SetConfig+0x27e>
 8002d64:	2308      	movs	r3, #8
 8002d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d6a:	e036      	b.n	8002dda <UART_SetConfig+0x27e>
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d72:	e032      	b.n	8002dda <UART_SetConfig+0x27e>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a30      	ldr	r2, [pc, #192]	@ (8002e3c <UART_SetConfig+0x2e0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d12a      	bne.n	8002dd4 <UART_SetConfig+0x278>
 8002d7e:	4b31      	ldr	r3, [pc, #196]	@ (8002e44 <UART_SetConfig+0x2e8>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d8c:	d01a      	beq.n	8002dc4 <UART_SetConfig+0x268>
 8002d8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d92:	d81b      	bhi.n	8002dcc <UART_SetConfig+0x270>
 8002d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d98:	d00c      	beq.n	8002db4 <UART_SetConfig+0x258>
 8002d9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d9e:	d815      	bhi.n	8002dcc <UART_SetConfig+0x270>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <UART_SetConfig+0x250>
 8002da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da8:	d008      	beq.n	8002dbc <UART_SetConfig+0x260>
 8002daa:	e00f      	b.n	8002dcc <UART_SetConfig+0x270>
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002db2:	e012      	b.n	8002dda <UART_SetConfig+0x27e>
 8002db4:	2302      	movs	r3, #2
 8002db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dba:	e00e      	b.n	8002dda <UART_SetConfig+0x27e>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dc2:	e00a      	b.n	8002dda <UART_SetConfig+0x27e>
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dca:	e006      	b.n	8002dda <UART_SetConfig+0x27e>
 8002dcc:	2310      	movs	r3, #16
 8002dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dd2:	e002      	b.n	8002dda <UART_SetConfig+0x27e>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a17      	ldr	r2, [pc, #92]	@ (8002e3c <UART_SetConfig+0x2e0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	f040 80a8 	bne.w	8002f36 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002de6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d834      	bhi.n	8002e58 <UART_SetConfig+0x2fc>
 8002dee:	a201      	add	r2, pc, #4	@ (adr r2, 8002df4 <UART_SetConfig+0x298>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e19 	.word	0x08002e19
 8002df8:	08002e59 	.word	0x08002e59
 8002dfc:	08002e21 	.word	0x08002e21
 8002e00:	08002e59 	.word	0x08002e59
 8002e04:	08002e27 	.word	0x08002e27
 8002e08:	08002e59 	.word	0x08002e59
 8002e0c:	08002e59 	.word	0x08002e59
 8002e10:	08002e59 	.word	0x08002e59
 8002e14:	08002e2f 	.word	0x08002e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7ff f808 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002e1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e1e:	e021      	b.n	8002e64 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <UART_SetConfig+0x2f8>)
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e24:	e01e      	b.n	8002e64 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e26:	f7fe ff93 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8002e2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e2c:	e01a      	b.n	8002e64 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e34:	e016      	b.n	8002e64 <UART_SetConfig+0x308>
 8002e36:	bf00      	nop
 8002e38:	cfff69f3 	.word	0xcfff69f3
 8002e3c:	40008000 	.word	0x40008000
 8002e40:	40013800 	.word	0x40013800
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40004400 	.word	0x40004400
 8002e4c:	40004800 	.word	0x40004800
 8002e50:	40004c00 	.word	0x40004c00
 8002e54:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 812a 	beq.w	80030c0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	4a9e      	ldr	r2, [pc, #632]	@ (80030ec <UART_SetConfig+0x590>)
 8002e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e76:	461a      	mov	r2, r3
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d305      	bcc.n	8002e9c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d903      	bls.n	8002ea4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ea2:	e10d      	b.n	80030c0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	60fa      	str	r2, [r7, #12]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	4a8e      	ldr	r2, [pc, #568]	@ (80030ec <UART_SetConfig+0x590>)
 8002eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2200      	movs	r2, #0
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ec2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ec6:	f7fd f9fb 	bl	80002c0 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	020b      	lsls	r3, r1, #8
 8002edc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002ee0:	0202      	lsls	r2, r0, #8
 8002ee2:	6979      	ldr	r1, [r7, #20]
 8002ee4:	6849      	ldr	r1, [r1, #4]
 8002ee6:	0849      	lsrs	r1, r1, #1
 8002ee8:	2000      	movs	r0, #0
 8002eea:	460c      	mov	r4, r1
 8002eec:	4605      	mov	r5, r0
 8002eee:	eb12 0804 	adds.w	r8, r2, r4
 8002ef2:	eb43 0905 	adc.w	r9, r3, r5
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	469a      	mov	sl, r3
 8002efe:	4693      	mov	fp, r2
 8002f00:	4652      	mov	r2, sl
 8002f02:	465b      	mov	r3, fp
 8002f04:	4640      	mov	r0, r8
 8002f06:	4649      	mov	r1, r9
 8002f08:	f7fd f9da 	bl	80002c0 <__aeabi_uldivmod>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4613      	mov	r3, r2
 8002f12:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f1a:	d308      	bcc.n	8002f2e <UART_SetConfig+0x3d2>
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f22:	d204      	bcs.n	8002f2e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	e0c8      	b.n	80030c0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f34:	e0c4      	b.n	80030c0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f3e:	d167      	bne.n	8003010 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002f40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d828      	bhi.n	8002f9a <UART_SetConfig+0x43e>
 8002f48:	a201      	add	r2, pc, #4	@ (adr r2, 8002f50 <UART_SetConfig+0x3f4>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002f7d 	.word	0x08002f7d
 8002f58:	08002f85 	.word	0x08002f85
 8002f5c:	08002f9b 	.word	0x08002f9b
 8002f60:	08002f8b 	.word	0x08002f8b
 8002f64:	08002f9b 	.word	0x08002f9b
 8002f68:	08002f9b 	.word	0x08002f9b
 8002f6c:	08002f9b 	.word	0x08002f9b
 8002f70:	08002f93 	.word	0x08002f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f74:	f7fe ff5a 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002f78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f7a:	e014      	b.n	8002fa6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7fe ff6c 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 8002f80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f82:	e010      	b.n	8002fa6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f84:	4b5a      	ldr	r3, [pc, #360]	@ (80030f0 <UART_SetConfig+0x594>)
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f88:	e00d      	b.n	8002fa6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f8a:	f7fe fee1 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8002f8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f90:	e009      	b.n	8002fa6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f98:	e005      	b.n	8002fa6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 8089 	beq.w	80030c0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	4a4e      	ldr	r2, [pc, #312]	@ (80030ec <UART_SetConfig+0x590>)
 8002fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fc0:	005a      	lsls	r2, r3, #1
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	441a      	add	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	d916      	bls.n	8003008 <UART_SetConfig+0x4ac>
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe0:	d212      	bcs.n	8003008 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f023 030f 	bic.w	r3, r3, #15
 8002fea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	8bfb      	ldrh	r3, [r7, #30]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	8bfa      	ldrh	r2, [r7, #30]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	e05b      	b.n	80030c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800300e:	e057      	b.n	80030c0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003010:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003014:	2b08      	cmp	r3, #8
 8003016:	d828      	bhi.n	800306a <UART_SetConfig+0x50e>
 8003018:	a201      	add	r2, pc, #4	@ (adr r2, 8003020 <UART_SetConfig+0x4c4>)
 800301a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301e:	bf00      	nop
 8003020:	08003045 	.word	0x08003045
 8003024:	0800304d 	.word	0x0800304d
 8003028:	08003055 	.word	0x08003055
 800302c:	0800306b 	.word	0x0800306b
 8003030:	0800305b 	.word	0x0800305b
 8003034:	0800306b 	.word	0x0800306b
 8003038:	0800306b 	.word	0x0800306b
 800303c:	0800306b 	.word	0x0800306b
 8003040:	08003063 	.word	0x08003063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003044:	f7fe fef2 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8003048:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800304a:	e014      	b.n	8003076 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800304c:	f7fe ff04 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 8003050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003052:	e010      	b.n	8003076 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003054:	4b26      	ldr	r3, [pc, #152]	@ (80030f0 <UART_SetConfig+0x594>)
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003058:	e00d      	b.n	8003076 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800305a:	f7fe fe79 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 800305e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003060:	e009      	b.n	8003076 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003068:	e005      	b.n	8003076 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003074:	bf00      	nop
    }

    if (pclk != 0U)
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d021      	beq.n	80030c0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	4a1a      	ldr	r2, [pc, #104]	@ (80030ec <UART_SetConfig+0x590>)
 8003082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003086:	461a      	mov	r2, r3
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	fbb3 f2f2 	udiv	r2, r3, r2
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	441a      	add	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	d909      	bls.n	80030ba <UART_SetConfig+0x55e>
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ac:	d205      	bcs.n	80030ba <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60da      	str	r2, [r3, #12]
 80030b8:	e002      	b.n	80030c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2200      	movs	r2, #0
 80030d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80030dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3730      	adds	r7, #48	@ 0x30
 80030e4:	46bd      	mov	sp, r7
 80030e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ea:	bf00      	nop
 80030ec:	08006964 	.word	0x08006964
 80030f0:	00f42400 	.word	0x00f42400

080030f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01a      	beq.n	800320a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031f2:	d10a      	bne.n	800320a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  }
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b098      	sub	sp, #96	@ 0x60
 800323c:	af02      	add	r7, sp, #8
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003248:	f7fd fde0 	bl	8000e0c <HAL_GetTick>
 800324c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b08      	cmp	r3, #8
 800325a:	d12f      	bne.n	80032bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800325c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003264:	2200      	movs	r2, #0
 8003266:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f88e 	bl	800338c <UART_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d022      	beq.n	80032bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327e:	e853 3f00 	ldrex	r3, [r3]
 8003282:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800328a:	653b      	str	r3, [r7, #80]	@ 0x50
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003294:	647b      	str	r3, [r7, #68]	@ 0x44
 8003296:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800329a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800329c:	e841 2300 	strex	r3, r2, [r1]
 80032a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e6      	bne.n	8003276 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e063      	b.n	8003384 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d149      	bne.n	800335e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d2:	2200      	movs	r2, #0
 80032d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f857 	bl	800338c <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d03c      	beq.n	800335e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	623b      	str	r3, [r7, #32]
   return(result);
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003302:	633b      	str	r3, [r7, #48]	@ 0x30
 8003304:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e6      	bne.n	80032e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3308      	adds	r3, #8
 800331c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	60fb      	str	r3, [r7, #12]
   return(result);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3308      	adds	r3, #8
 8003334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003336:	61fa      	str	r2, [r7, #28]
 8003338:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	69b9      	ldr	r1, [r7, #24]
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	617b      	str	r3, [r7, #20]
   return(result);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e012      	b.n	8003384 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3758      	adds	r7, #88	@ 0x58
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339c:	e04f      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d04b      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a6:	f7fd fd31 	bl	8000e0c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d302      	bcc.n	80033bc <UART_WaitOnFlagUntilTimeout+0x30>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e04e      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d037      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b80      	cmp	r3, #128	@ 0x80
 80033d2:	d034      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b40      	cmp	r3, #64	@ 0x40
 80033d8:	d031      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d110      	bne.n	800340a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2208      	movs	r2, #8
 80033ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f838 	bl	8003466 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2208      	movs	r2, #8
 80033fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e029      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003418:	d111      	bne.n	800343e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f81e 	bl	8003466 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e00f      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d0a0      	beq.n	800339e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003466:	b480      	push	{r7}
 8003468:	b095      	sub	sp, #84	@ 0x54
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800348c:	643b      	str	r3, [r7, #64]	@ 0x40
 800348e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800349a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e6      	bne.n	800346e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3308      	adds	r3, #8
 80034a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3308      	adds	r3, #8
 80034c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e3      	bne.n	80034a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d118      	bne.n	8003512 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f023 0310 	bic.w	r3, r3, #16
 80034f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6979      	ldr	r1, [r7, #20]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	613b      	str	r3, [r7, #16]
   return(result);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e6      	bne.n	80034e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003526:	bf00      	nop
 8003528:	3754      	adds	r7, #84	@ 0x54
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_UARTEx_DisableFifoMode+0x16>
 8003544:	2302      	movs	r3, #2
 8003546:	e027      	b.n	8003598 <HAL_UARTEx_DisableFifoMode+0x66>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	@ 0x24
 8003554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003576:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e02d      	b.n	8003618 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2224      	movs	r2, #36	@ 0x24
 80035c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f84f 	bl	800369c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003634:	2302      	movs	r3, #2
 8003636:	e02d      	b.n	8003694 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	@ 0x24
 8003644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f811 	bl	800369c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d108      	bne.n	80036be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80036bc:	e031      	b.n	8003722 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80036be:	2308      	movs	r3, #8
 80036c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80036c2:	2308      	movs	r3, #8
 80036c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	0e5b      	lsrs	r3, r3, #25
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	0f5b      	lsrs	r3, r3, #29
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036e6:	7bbb      	ldrb	r3, [r7, #14]
 80036e8:	7b3a      	ldrb	r2, [r7, #12]
 80036ea:	4911      	ldr	r1, [pc, #68]	@ (8003730 <UARTEx_SetNbDataToProcess+0x94>)
 80036ec:	5c8a      	ldrb	r2, [r1, r2]
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80036f2:	7b3a      	ldrb	r2, [r7, #12]
 80036f4:	490f      	ldr	r1, [pc, #60]	@ (8003734 <UARTEx_SetNbDataToProcess+0x98>)
 80036f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	7b7a      	ldrb	r2, [r7, #13]
 8003708:	4909      	ldr	r1, [pc, #36]	@ (8003730 <UARTEx_SetNbDataToProcess+0x94>)
 800370a:	5c8a      	ldrb	r2, [r1, r2]
 800370c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003710:	7b7a      	ldrb	r2, [r7, #13]
 8003712:	4908      	ldr	r1, [pc, #32]	@ (8003734 <UARTEx_SetNbDataToProcess+0x98>)
 8003714:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003716:	fb93 f3f2 	sdiv	r3, r3, r2
 800371a:	b29a      	uxth	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	0800697c 	.word	0x0800697c
 8003734:	08006984 	.word	0x08006984

08003738 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800374a:	2b84      	cmp	r3, #132	@ 0x84
 800374c:	d005      	beq.n	800375a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800374e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4413      	add	r3, r2
 8003756:	3303      	adds	r3, #3
 8003758:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800375a:	68fb      	ldr	r3, [r7, #12]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800376c:	f000 fe48 	bl	8004400 <vTaskStartScheduler>
  
  return osOK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	bd80      	pop	{r7, pc}

08003776 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003778:	b087      	sub	sp, #28
 800377a:	af02      	add	r7, sp, #8
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685c      	ldr	r4, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800378c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ffcf 	bl	8003738 <makeFreeRtosPriority>
 800379a:	4602      	mov	r2, r0
 800379c:	f107 030c 	add.w	r3, r7, #12
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	9200      	str	r2, [sp, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4632      	mov	r2, r6
 80037a8:	4629      	mov	r1, r5
 80037aa:	4620      	mov	r0, r4
 80037ac:	f000 fca6 	bl	80040fc <xTaskCreate>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80037ba:	68fb      	ldr	r3, [r7, #12]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <osDelay+0x16>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	e000      	b.n	80037dc <osDelay+0x18>
 80037da:	2301      	movs	r3, #1
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fdd9 	bl	8004394 <vTaskDelay>
  
  return osOK;
 80037e2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f103 0208 	add.w	r2, r3, #8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f04f 32ff 	mov.w	r2, #4294967295
 8003804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f103 0208 	add.w	r2, r3, #8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f103 0208 	add.w	r2, r3, #8
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d103      	bne.n	80038ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e00c      	b.n	80038c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3308      	adds	r3, #8
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	e002      	b.n	80038bc <vListInsert+0x2e>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d2f6      	bcs.n	80038b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6892      	ldr	r2, [r2, #8]
 8003916:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6852      	ldr	r2, [r2, #4]
 8003920:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d103      	bne.n	8003934 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1e5a      	subs	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800397a:	bf00      	nop
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003980:	f001 fc7a 	bl	8005278 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398c:	68f9      	ldr	r1, [r7, #12]
 800398e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	441a      	add	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b0:	3b01      	subs	r3, #1
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	441a      	add	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	22ff      	movs	r2, #255	@ 0xff
 80039c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	22ff      	movs	r2, #255	@ 0xff
 80039cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d114      	bne.n	8003a00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01a      	beq.n	8003a14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3310      	adds	r3, #16
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 ff4e 	bl	8004884 <xTaskRemoveFromEventList>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d012      	beq.n	8003a14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <xQueueGenericReset+0xd0>)
 80039f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	e009      	b.n	8003a14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3310      	adds	r3, #16
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fef1 	bl	80037ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3324      	adds	r3, #36	@ 0x24
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff feec 	bl	80037ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a14:	f001 fc62 	bl	80052dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a18:	2301      	movs	r3, #1
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	@ 0x28
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10b      	bne.n	8003a54 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	613b      	str	r3, [r7, #16]
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3348      	adds	r3, #72	@ 0x48
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 fce8 	bl	8005438 <pvPortMalloc>
 8003a68:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00d      	beq.n	8003a8c <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	3348      	adds	r3, #72	@ 0x48
 8003a78:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a7a:	79fa      	ldrb	r2, [r7, #7]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f805 	bl	8003a96 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e002      	b.n	8003ab8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	69b8      	ldr	r0, [r7, #24]
 8003ac8:	f7ff ff44 	bl	8003954 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08e      	sub	sp, #56	@ 0x38
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <xQueueGenericSend+0x34>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b02:	bf00      	nop
 8003b04:	bf00      	nop
 8003b06:	e7fd      	b.n	8003b04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <xQueueGenericSend+0x42>
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <xQueueGenericSend+0x46>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <xQueueGenericSend+0x48>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <xQueueGenericSend+0x64>
	__asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b32:	bf00      	nop
 8003b34:	bf00      	nop
 8003b36:	e7fd      	b.n	8003b34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d103      	bne.n	8003b46 <xQueueGenericSend+0x72>
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <xQueueGenericSend+0x76>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <xQueueGenericSend+0x78>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <xQueueGenericSend+0x94>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	623b      	str	r3, [r7, #32]
}
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b68:	f001 f832 	bl	8004bd0 <xTaskGetSchedulerState>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <xQueueGenericSend+0xa4>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <xQueueGenericSend+0xa8>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <xQueueGenericSend+0xaa>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <xQueueGenericSend+0xc6>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	61fb      	str	r3, [r7, #28]
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	e7fd      	b.n	8003b96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b9a:	f001 fb6d 	bl	8005278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <xQueueGenericSend+0xdc>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d129      	bne.n	8003c04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bb6:	f000 f9b7 	bl	8003f28 <prvCopyDataToQueue>
 8003bba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d010      	beq.n	8003be6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	3324      	adds	r3, #36	@ 0x24
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fe5b 	bl	8004884 <xTaskRemoveFromEventList>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d013      	beq.n	8003bfc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd4 <xQueueGenericSend+0x200>)
 8003bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	e00a      	b.n	8003bfc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bec:	4b39      	ldr	r3, [pc, #228]	@ (8003cd4 <xQueueGenericSend+0x200>)
 8003bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bfc:	f001 fb6e 	bl	80052dc <vPortExitCritical>
				return pdPASS;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e063      	b.n	8003ccc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c0a:	f001 fb67 	bl	80052dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e05c      	b.n	8003ccc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fe95 	bl	800494c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c22:	2301      	movs	r3, #1
 8003c24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c26:	f001 fb59 	bl	80052dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c2a:	f000 fc3b 	bl	80044a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c2e:	f001 fb23 	bl	8005278 <vPortEnterCritical>
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d103      	bne.n	8003c48 <xQueueGenericSend+0x174>
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d103      	bne.n	8003c5e <xQueueGenericSend+0x18a>
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c5e:	f001 fb3d 	bl	80052dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c62:	1d3a      	adds	r2, r7, #4
 8003c64:	f107 0314 	add.w	r3, r7, #20
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fe84 	bl	8004978 <xTaskCheckForTimeOut>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d124      	bne.n	8003cc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c78:	f000 fa28 	bl	80040cc <prvIsQueueFull>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d018      	beq.n	8003cb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	3310      	adds	r3, #16
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fdd4 	bl	8004838 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c92:	f000 f9b3 	bl	8003ffc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c96:	f000 fc13 	bl	80044c0 <xTaskResumeAll>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f47f af7c 	bne.w	8003b9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <xQueueGenericSend+0x200>)
 8003ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	e772      	b.n	8003b9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cb6:	f000 f9a1 	bl	8003ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cba:	f000 fc01 	bl	80044c0 <xTaskResumeAll>
 8003cbe:	e76c      	b.n	8003b9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cc2:	f000 f99b 	bl	8003ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cc6:	f000 fbfb 	bl	80044c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3738      	adds	r7, #56	@ 0x38
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	e000ed04 	.word	0xe000ed04

08003cd8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08e      	sub	sp, #56	@ 0x38
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10b      	bne.n	8003d0c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	623b      	str	r3, [r7, #32]
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	61fb      	str	r3, [r7, #28]
}
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d2c:	f000 ff50 	bl	8004bd0 <xTaskGetSchedulerState>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <xQueueSemaphoreTake+0x64>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <xQueueSemaphoreTake+0x68>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <xQueueSemaphoreTake+0x6a>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	61bb      	str	r3, [r7, #24]
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	e7fd      	b.n	8003d5a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d5e:	f001 fa8b 	bl	8005278 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d024      	beq.n	8003db8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d70:	1e5a      	subs	r2, r3, #1
 8003d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d74:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d104      	bne.n	8003d88 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003d7e:	f001 f8d3 	bl	8004f28 <pvTaskIncrementMutexHeldCount>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00f      	beq.n	8003db0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d92:	3310      	adds	r3, #16
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fd75 	bl	8004884 <xTaskRemoveFromEventList>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003da0:	4b54      	ldr	r3, [pc, #336]	@ (8003ef4 <xQueueSemaphoreTake+0x21c>)
 8003da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003db0:	f001 fa94 	bl	80052dc <vPortExitCritical>
				return pdPASS;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e098      	b.n	8003eea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d112      	bne.n	8003de4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	617b      	str	r3, [r7, #20]
}
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
 8003dda:	e7fd      	b.n	8003dd8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ddc:	f001 fa7e 	bl	80052dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e082      	b.n	8003eea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dea:	f107 030c 	add.w	r3, r7, #12
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fdac 	bl	800494c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003df8:	f001 fa70 	bl	80052dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dfc:	f000 fb52 	bl	80044a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e00:	f001 fa3a 	bl	8005278 <vPortEnterCritical>
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d103      	bne.n	8003e1a <xQueueSemaphoreTake+0x142>
 8003e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e20:	b25b      	sxtb	r3, r3
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e26:	d103      	bne.n	8003e30 <xQueueSemaphoreTake+0x158>
 8003e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e30:	f001 fa54 	bl	80052dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e34:	463a      	mov	r2, r7
 8003e36:	f107 030c 	add.w	r3, r7, #12
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fd9b 	bl	8004978 <xTaskCheckForTimeOut>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d132      	bne.n	8003eae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e4a:	f000 f929 	bl	80040a0 <prvIsQueueEmpty>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d026      	beq.n	8003ea2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003e5c:	f001 fa0c 	bl	8005278 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fed1 	bl	8004c0c <xTaskPriorityInherit>
 8003e6a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003e6c:	f001 fa36 	bl	80052dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e72:	3324      	adds	r3, #36	@ 0x24
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fcdd 	bl	8004838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e80:	f000 f8bc 	bl	8003ffc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e84:	f000 fb1c 	bl	80044c0 <xTaskResumeAll>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f47f af67 	bne.w	8003d5e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003e90:	4b18      	ldr	r3, [pc, #96]	@ (8003ef4 <xQueueSemaphoreTake+0x21c>)
 8003e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	e75d      	b.n	8003d5e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003ea2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ea4:	f000 f8aa 	bl	8003ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ea8:	f000 fb0a 	bl	80044c0 <xTaskResumeAll>
 8003eac:	e757      	b.n	8003d5e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003eae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003eb0:	f000 f8a4 	bl	8003ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eb4:	f000 fb04 	bl	80044c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003eba:	f000 f8f1 	bl	80040a0 <prvIsQueueEmpty>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f43f af4c 	beq.w	8003d5e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00d      	beq.n	8003ee8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003ecc:	f001 f9d4 	bl	8005278 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ed0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ed2:	f000 f811 	bl	8003ef8 <prvGetDisinheritPriorityAfterTimeout>
 8003ed6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 ff92 	bl	8004e08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ee4:	f001 f9fa 	bl	80052dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ee8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3738      	adds	r7, #56	@ 0x38
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1c3 0307 	rsb	r3, r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e001      	b.n	8003f1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10d      	bne.n	8003f62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d14d      	bne.n	8003fea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fed0 	bl	8004cf8 <xTaskPriorityDisinherit>
 8003f58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	e043      	b.n	8003fea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d119      	bne.n	8003f9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6858      	ldr	r0, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	461a      	mov	r2, r3
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	f001 ff29 	bl	8005dca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	441a      	add	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d32b      	bcc.n	8003fea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	e026      	b.n	8003fea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68d8      	ldr	r0, [r3, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	f001 ff0f 	bl	8005dca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	425b      	negs	r3, r3
 8003fb6:	441a      	add	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d207      	bcs.n	8003fd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	425b      	negs	r3, r3
 8003fd2:	441a      	add	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d105      	bne.n	8003fea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003ff2:	697b      	ldr	r3, [r7, #20]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004004:	f001 f938 	bl	8005278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800400e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004010:	e011      	b.n	8004036 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d012      	beq.n	8004040 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3324      	adds	r3, #36	@ 0x24
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fc30 	bl	8004884 <xTaskRemoveFromEventList>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800402a:	f000 fd09 	bl	8004a40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	3b01      	subs	r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	dce9      	bgt.n	8004012 <prvUnlockQueue+0x16>
 800403e:	e000      	b.n	8004042 <prvUnlockQueue+0x46>
					break;
 8004040:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	22ff      	movs	r2, #255	@ 0xff
 8004046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800404a:	f001 f947 	bl	80052dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800404e:	f001 f913 	bl	8005278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004058:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800405a:	e011      	b.n	8004080 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d012      	beq.n	800408a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3310      	adds	r3, #16
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fc0b 	bl	8004884 <xTaskRemoveFromEventList>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004074:	f000 fce4 	bl	8004a40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004078:	7bbb      	ldrb	r3, [r7, #14]
 800407a:	3b01      	subs	r3, #1
 800407c:	b2db      	uxtb	r3, r3
 800407e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004084:	2b00      	cmp	r3, #0
 8004086:	dce9      	bgt.n	800405c <prvUnlockQueue+0x60>
 8004088:	e000      	b.n	800408c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800408a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	22ff      	movs	r2, #255	@ 0xff
 8004090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004094:	f001 f922 	bl	80052dc <vPortExitCritical>
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040a8:	f001 f8e6 	bl	8005278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d102      	bne.n	80040ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040b4:	2301      	movs	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	e001      	b.n	80040be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040be:	f001 f90d 	bl	80052dc <vPortExitCritical>

	return xReturn;
 80040c2:	68fb      	ldr	r3, [r7, #12]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040d4:	f001 f8d0 	bl	8005278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d102      	bne.n	80040ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e001      	b.n	80040ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040ee:	f001 f8f5 	bl	80052dc <vPortExitCritical>

	return xReturn;
 80040f2:	68fb      	ldr	r3, [r7, #12]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08c      	sub	sp, #48	@ 0x30
 8004100:	af04      	add	r7, sp, #16
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4618      	mov	r0, r3
 8004112:	f001 f991 	bl	8005438 <pvPortMalloc>
 8004116:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00e      	beq.n	800413c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800411e:	20a0      	movs	r0, #160	@ 0xa0
 8004120:	f001 f98a 	bl	8005438 <pvPortMalloc>
 8004124:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	631a      	str	r2, [r3, #48]	@ 0x30
 8004132:	e005      	b.n	8004140 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004134:	6978      	ldr	r0, [r7, #20]
 8004136:	f001 fa4d 	bl	80055d4 <vPortFree>
 800413a:	e001      	b.n	8004140 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d013      	beq.n	800416e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	2300      	movs	r3, #0
 800414a:	9303      	str	r3, [sp, #12]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	9302      	str	r3, [sp, #8]
 8004150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f80f 	bl	8004180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004162:	69f8      	ldr	r0, [r7, #28]
 8004164:	f000 f8ac 	bl	80042c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004168:	2301      	movs	r3, #1
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	e002      	b.n	8004174 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800416e:	f04f 33ff 	mov.w	r3, #4294967295
 8004172:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004174:	69bb      	ldr	r3, [r7, #24]
	}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004198:	3b01      	subs	r3, #1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f023 0307 	bic.w	r3, r3, #7
 80041a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <prvInitialiseNewTask+0x4a>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	617b      	str	r3, [r7, #20]
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	e7fd      	b.n	80041c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01f      	beq.n	8004210 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	e012      	b.n	80041fc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	4413      	add	r3, r2
 80041dc:	7819      	ldrb	r1, [r3, #0]
 80041de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	3334      	adds	r3, #52	@ 0x34
 80041e6:	460a      	mov	r2, r1
 80041e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	3301      	adds	r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b0f      	cmp	r3, #15
 8004200:	d9e9      	bls.n	80041d6 <prvInitialiseNewTask+0x56>
 8004202:	e000      	b.n	8004206 <prvInitialiseNewTask+0x86>
			{
				break;
 8004204:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800420e:	e003      	b.n	8004218 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421a:	2b06      	cmp	r3, #6
 800421c:	d901      	bls.n	8004222 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800421e:	2306      	movs	r3, #6
 8004220:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004226:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	2200      	movs	r2, #0
 8004232:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004236:	3304      	adds	r3, #4
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff faf7 	bl	800382c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	3318      	adds	r3, #24
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff faf2 	bl	800382c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800424c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800424e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004250:	f1c3 0207 	rsb	r2, r3, #7
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800425c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	2200      	movs	r2, #0
 8004262:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	2200      	movs	r2, #0
 800426a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004270:	334c      	adds	r3, #76	@ 0x4c
 8004272:	224c      	movs	r2, #76	@ 0x4c
 8004274:	2100      	movs	r1, #0
 8004276:	4618      	mov	r0, r3
 8004278:	f001 fcd6 	bl	8005c28 <memset>
 800427c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427e:	4a0d      	ldr	r2, [pc, #52]	@ (80042b4 <prvInitialiseNewTask+0x134>)
 8004280:	651a      	str	r2, [r3, #80]	@ 0x50
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	4a0c      	ldr	r2, [pc, #48]	@ (80042b8 <prvInitialiseNewTask+0x138>)
 8004286:	655a      	str	r2, [r3, #84]	@ 0x54
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	4a0c      	ldr	r2, [pc, #48]	@ (80042bc <prvInitialiseNewTask+0x13c>)
 800428c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	68f9      	ldr	r1, [r7, #12]
 8004292:	69b8      	ldr	r0, [r7, #24]
 8004294:	f000 fec2 	bl	800501c <pxPortInitialiseStack>
 8004298:	4602      	mov	r2, r0
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800429e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042aa:	bf00      	nop
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200029dc 	.word	0x200029dc
 80042b8:	20002a44 	.word	0x20002a44
 80042bc:	20002aac 	.word	0x20002aac

080042c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042c8:	f000 ffd6 	bl	8005278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004378 <prvAddNewTaskToReadyList+0xb8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	4a29      	ldr	r2, [pc, #164]	@ (8004378 <prvAddNewTaskToReadyList+0xb8>)
 80042d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042d6:	4b29      	ldr	r3, [pc, #164]	@ (800437c <prvAddNewTaskToReadyList+0xbc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042de:	4a27      	ldr	r2, [pc, #156]	@ (800437c <prvAddNewTaskToReadyList+0xbc>)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042e4:	4b24      	ldr	r3, [pc, #144]	@ (8004378 <prvAddNewTaskToReadyList+0xb8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d110      	bne.n	800430e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042ec:	f000 fbcc 	bl	8004a88 <prvInitialiseTaskLists>
 80042f0:	e00d      	b.n	800430e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042f2:	4b23      	ldr	r3, [pc, #140]	@ (8004380 <prvAddNewTaskToReadyList+0xc0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042fa:	4b20      	ldr	r3, [pc, #128]	@ (800437c <prvAddNewTaskToReadyList+0xbc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	429a      	cmp	r2, r3
 8004306:	d802      	bhi.n	800430e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004308:	4a1c      	ldr	r2, [pc, #112]	@ (800437c <prvAddNewTaskToReadyList+0xbc>)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800430e:	4b1d      	ldr	r3, [pc, #116]	@ (8004384 <prvAddNewTaskToReadyList+0xc4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	4a1b      	ldr	r2, [pc, #108]	@ (8004384 <prvAddNewTaskToReadyList+0xc4>)
 8004316:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	2201      	movs	r2, #1
 800431e:	409a      	lsls	r2, r3
 8004320:	4b19      	ldr	r3, [pc, #100]	@ (8004388 <prvAddNewTaskToReadyList+0xc8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4313      	orrs	r3, r2
 8004326:	4a18      	ldr	r2, [pc, #96]	@ (8004388 <prvAddNewTaskToReadyList+0xc8>)
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a15      	ldr	r2, [pc, #84]	@ (800438c <prvAddNewTaskToReadyList+0xcc>)
 8004338:	441a      	add	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3304      	adds	r3, #4
 800433e:	4619      	mov	r1, r3
 8004340:	4610      	mov	r0, r2
 8004342:	f7ff fa80 	bl	8003846 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004346:	f000 ffc9 	bl	80052dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <prvAddNewTaskToReadyList+0xc0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00e      	beq.n	8004370 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004352:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <prvAddNewTaskToReadyList+0xbc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435c:	429a      	cmp	r2, r3
 800435e:	d207      	bcs.n	8004370 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004360:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <prvAddNewTaskToReadyList+0xd0>)
 8004362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000278 	.word	0x20000278
 800437c:	20000178 	.word	0x20000178
 8004380:	20000284 	.word	0x20000284
 8004384:	20000294 	.word	0x20000294
 8004388:	20000280 	.word	0x20000280
 800438c:	2000017c 	.word	0x2000017c
 8004390:	e000ed04 	.word	0xe000ed04

08004394 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d018      	beq.n	80043d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043a6:	4b14      	ldr	r3, [pc, #80]	@ (80043f8 <vTaskDelay+0x64>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <vTaskDelay+0x32>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	60bb      	str	r3, [r7, #8]
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	e7fd      	b.n	80043c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043c6:	f000 f86d 	bl	80044a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043ca:	2100      	movs	r1, #0
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fdbf 	bl	8004f50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043d2:	f000 f875 	bl	80044c0 <xTaskResumeAll>
 80043d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d107      	bne.n	80043ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80043de:	4b07      	ldr	r3, [pc, #28]	@ (80043fc <vTaskDelay+0x68>)
 80043e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	200002a0 	.word	0x200002a0
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004406:	4b1f      	ldr	r3, [pc, #124]	@ (8004484 <vTaskStartScheduler+0x84>)
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	2300      	movs	r3, #0
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2300      	movs	r3, #0
 8004410:	2280      	movs	r2, #128	@ 0x80
 8004412:	491d      	ldr	r1, [pc, #116]	@ (8004488 <vTaskStartScheduler+0x88>)
 8004414:	481d      	ldr	r0, [pc, #116]	@ (800448c <vTaskStartScheduler+0x8c>)
 8004416:	f7ff fe71 	bl	80040fc <xTaskCreate>
 800441a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d11b      	bne.n	800445a <vTaskStartScheduler+0x5a>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60bb      	str	r3, [r7, #8]
}
 8004434:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004436:	4b16      	ldr	r3, [pc, #88]	@ (8004490 <vTaskStartScheduler+0x90>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	334c      	adds	r3, #76	@ 0x4c
 800443c:	4a15      	ldr	r2, [pc, #84]	@ (8004494 <vTaskStartScheduler+0x94>)
 800443e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004440:	4b15      	ldr	r3, [pc, #84]	@ (8004498 <vTaskStartScheduler+0x98>)
 8004442:	f04f 32ff 	mov.w	r2, #4294967295
 8004446:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004448:	4b14      	ldr	r3, [pc, #80]	@ (800449c <vTaskStartScheduler+0x9c>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800444e:	4b14      	ldr	r3, [pc, #80]	@ (80044a0 <vTaskStartScheduler+0xa0>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004454:	f000 fe6c 	bl	8005130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004458:	e00f      	b.n	800447a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d10b      	bne.n	800447a <vTaskStartScheduler+0x7a>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	607b      	str	r3, [r7, #4]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <vTaskStartScheduler+0x76>
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	2000029c 	.word	0x2000029c
 8004488:	08006944 	.word	0x08006944
 800448c:	08004a59 	.word	0x08004a59
 8004490:	20000178 	.word	0x20000178
 8004494:	2000001c 	.word	0x2000001c
 8004498:	20000298 	.word	0x20000298
 800449c:	20000284 	.word	0x20000284
 80044a0:	2000027c 	.word	0x2000027c

080044a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <vTaskSuspendAll+0x18>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a03      	ldr	r2, [pc, #12]	@ (80044bc <vTaskSuspendAll+0x18>)
 80044b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	200002a0 	.word	0x200002a0

080044c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ce:	4b42      	ldr	r3, [pc, #264]	@ (80045d8 <xTaskResumeAll+0x118>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <xTaskResumeAll+0x2e>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	603b      	str	r3, [r7, #0]
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044ee:	f000 fec3 	bl	8005278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044f2:	4b39      	ldr	r3, [pc, #228]	@ (80045d8 <xTaskResumeAll+0x118>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	4a37      	ldr	r2, [pc, #220]	@ (80045d8 <xTaskResumeAll+0x118>)
 80044fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044fc:	4b36      	ldr	r3, [pc, #216]	@ (80045d8 <xTaskResumeAll+0x118>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d161      	bne.n	80045c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004504:	4b35      	ldr	r3, [pc, #212]	@ (80045dc <xTaskResumeAll+0x11c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d05d      	beq.n	80045c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800450c:	e02e      	b.n	800456c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450e:	4b34      	ldr	r3, [pc, #208]	@ (80045e0 <xTaskResumeAll+0x120>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3318      	adds	r3, #24
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff f9f0 	bl	8003900 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3304      	adds	r3, #4
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff f9eb 	bl	8003900 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	2201      	movs	r2, #1
 8004530:	409a      	lsls	r2, r3
 8004532:	4b2c      	ldr	r3, [pc, #176]	@ (80045e4 <xTaskResumeAll+0x124>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4313      	orrs	r3, r2
 8004538:	4a2a      	ldr	r2, [pc, #168]	@ (80045e4 <xTaskResumeAll+0x124>)
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4a27      	ldr	r2, [pc, #156]	@ (80045e8 <xTaskResumeAll+0x128>)
 800454a:	441a      	add	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f7ff f977 	bl	8003846 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455c:	4b23      	ldr	r3, [pc, #140]	@ (80045ec <xTaskResumeAll+0x12c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004566:	4b22      	ldr	r3, [pc, #136]	@ (80045f0 <xTaskResumeAll+0x130>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800456c:	4b1c      	ldr	r3, [pc, #112]	@ (80045e0 <xTaskResumeAll+0x120>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1cc      	bne.n	800450e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800457a:	f000 fb09 	bl	8004b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800457e:	4b1d      	ldr	r3, [pc, #116]	@ (80045f4 <xTaskResumeAll+0x134>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d010      	beq.n	80045ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800458a:	f000 f837 	bl	80045fc <xTaskIncrementTick>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004594:	4b16      	ldr	r3, [pc, #88]	@ (80045f0 <xTaskResumeAll+0x130>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3b01      	subs	r3, #1
 800459e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f1      	bne.n	800458a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80045a6:	4b13      	ldr	r3, [pc, #76]	@ (80045f4 <xTaskResumeAll+0x134>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045ac:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <xTaskResumeAll+0x130>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d009      	beq.n	80045c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045b4:	2301      	movs	r3, #1
 80045b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045b8:	4b0f      	ldr	r3, [pc, #60]	@ (80045f8 <xTaskResumeAll+0x138>)
 80045ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045c8:	f000 fe88 	bl	80052dc <vPortExitCritical>

	return xAlreadyYielded;
 80045cc:	68bb      	ldr	r3, [r7, #8]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200002a0 	.word	0x200002a0
 80045dc:	20000278 	.word	0x20000278
 80045e0:	20000238 	.word	0x20000238
 80045e4:	20000280 	.word	0x20000280
 80045e8:	2000017c 	.word	0x2000017c
 80045ec:	20000178 	.word	0x20000178
 80045f0:	2000028c 	.word	0x2000028c
 80045f4:	20000288 	.word	0x20000288
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004606:	4b4f      	ldr	r3, [pc, #316]	@ (8004744 <xTaskIncrementTick+0x148>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 808f 	bne.w	800472e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004610:	4b4d      	ldr	r3, [pc, #308]	@ (8004748 <xTaskIncrementTick+0x14c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004618:	4a4b      	ldr	r2, [pc, #300]	@ (8004748 <xTaskIncrementTick+0x14c>)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d121      	bne.n	8004668 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004624:	4b49      	ldr	r3, [pc, #292]	@ (800474c <xTaskIncrementTick+0x150>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <xTaskIncrementTick+0x4a>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	603b      	str	r3, [r7, #0]
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	e7fd      	b.n	8004642 <xTaskIncrementTick+0x46>
 8004646:	4b41      	ldr	r3, [pc, #260]	@ (800474c <xTaskIncrementTick+0x150>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	4b40      	ldr	r3, [pc, #256]	@ (8004750 <xTaskIncrementTick+0x154>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a3e      	ldr	r2, [pc, #248]	@ (800474c <xTaskIncrementTick+0x150>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4a3e      	ldr	r2, [pc, #248]	@ (8004750 <xTaskIncrementTick+0x154>)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <xTaskIncrementTick+0x158>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	4a3c      	ldr	r2, [pc, #240]	@ (8004754 <xTaskIncrementTick+0x158>)
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	f000 fa94 	bl	8004b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004668:	4b3b      	ldr	r3, [pc, #236]	@ (8004758 <xTaskIncrementTick+0x15c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	429a      	cmp	r2, r3
 8004670:	d348      	bcc.n	8004704 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004672:	4b36      	ldr	r3, [pc, #216]	@ (800474c <xTaskIncrementTick+0x150>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800467c:	4b36      	ldr	r3, [pc, #216]	@ (8004758 <xTaskIncrementTick+0x15c>)
 800467e:	f04f 32ff 	mov.w	r2, #4294967295
 8004682:	601a      	str	r2, [r3, #0]
					break;
 8004684:	e03e      	b.n	8004704 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004686:	4b31      	ldr	r3, [pc, #196]	@ (800474c <xTaskIncrementTick+0x150>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	429a      	cmp	r2, r3
 800469c:	d203      	bcs.n	80046a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800469e:	4a2e      	ldr	r2, [pc, #184]	@ (8004758 <xTaskIncrementTick+0x15c>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046a4:	e02e      	b.n	8004704 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff f928 	bl	8003900 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3318      	adds	r3, #24
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff f91f 	bl	8003900 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	2201      	movs	r2, #1
 80046c8:	409a      	lsls	r2, r3
 80046ca:	4b24      	ldr	r3, [pc, #144]	@ (800475c <xTaskIncrementTick+0x160>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	4a22      	ldr	r2, [pc, #136]	@ (800475c <xTaskIncrementTick+0x160>)
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004760 <xTaskIncrementTick+0x164>)
 80046e2:	441a      	add	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7ff f8ab 	bl	8003846 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <xTaskIncrementTick+0x168>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d3b9      	bcc.n	8004672 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80046fe:	2301      	movs	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004702:	e7b6      	b.n	8004672 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004704:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <xTaskIncrementTick+0x168>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470a:	4915      	ldr	r1, [pc, #84]	@ (8004760 <xTaskIncrementTick+0x164>)
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d901      	bls.n	8004720 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800471c:	2301      	movs	r3, #1
 800471e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004720:	4b11      	ldr	r3, [pc, #68]	@ (8004768 <xTaskIncrementTick+0x16c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e004      	b.n	8004738 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800472e:	4b0f      	ldr	r3, [pc, #60]	@ (800476c <xTaskIncrementTick+0x170>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	4a0d      	ldr	r2, [pc, #52]	@ (800476c <xTaskIncrementTick+0x170>)
 8004736:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004738:	697b      	ldr	r3, [r7, #20]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	200002a0 	.word	0x200002a0
 8004748:	2000027c 	.word	0x2000027c
 800474c:	20000230 	.word	0x20000230
 8004750:	20000234 	.word	0x20000234
 8004754:	20000290 	.word	0x20000290
 8004758:	20000298 	.word	0x20000298
 800475c:	20000280 	.word	0x20000280
 8004760:	2000017c 	.word	0x2000017c
 8004764:	20000178 	.word	0x20000178
 8004768:	2000028c 	.word	0x2000028c
 800476c:	20000288 	.word	0x20000288

08004770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004776:	4b2a      	ldr	r3, [pc, #168]	@ (8004820 <vTaskSwitchContext+0xb0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800477e:	4b29      	ldr	r3, [pc, #164]	@ (8004824 <vTaskSwitchContext+0xb4>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004784:	e045      	b.n	8004812 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004786:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <vTaskSwitchContext+0xb4>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478c:	4b26      	ldr	r3, [pc, #152]	@ (8004828 <vTaskSwitchContext+0xb8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800479a:	7afb      	ldrb	r3, [r7, #11]
 800479c:	f1c3 031f 	rsb	r3, r3, #31
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	4922      	ldr	r1, [pc, #136]	@ (800482c <vTaskSwitchContext+0xbc>)
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <vTaskSwitchContext+0x5e>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	607b      	str	r3, [r7, #4]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <vTaskSwitchContext+0x5a>
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4a14      	ldr	r2, [pc, #80]	@ (800482c <vTaskSwitchContext+0xbc>)
 80047da:	4413      	add	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	3308      	adds	r3, #8
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d104      	bne.n	80047fe <vTaskSwitchContext+0x8e>
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a0a      	ldr	r2, [pc, #40]	@ (8004830 <vTaskSwitchContext+0xc0>)
 8004806:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004808:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <vTaskSwitchContext+0xc0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	334c      	adds	r3, #76	@ 0x4c
 800480e:	4a09      	ldr	r2, [pc, #36]	@ (8004834 <vTaskSwitchContext+0xc4>)
 8004810:	6013      	str	r3, [r2, #0]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	200002a0 	.word	0x200002a0
 8004824:	2000028c 	.word	0x2000028c
 8004828:	20000280 	.word	0x20000280
 800482c:	2000017c 	.word	0x2000017c
 8004830:	20000178 	.word	0x20000178
 8004834:	2000001c 	.word	0x2000001c

08004838 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	60fb      	str	r3, [r7, #12]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004860:	4b07      	ldr	r3, [pc, #28]	@ (8004880 <vTaskPlaceOnEventList+0x48>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3318      	adds	r3, #24
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff f810 	bl	800388e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800486e:	2101      	movs	r1, #1
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	f000 fb6d 	bl	8004f50 <prvAddCurrentTaskToDelayedList>
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000178 	.word	0x20000178

08004884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	60fb      	str	r3, [r7, #12]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3318      	adds	r3, #24
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f822 	bl	8003900 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004934 <xTaskRemoveFromEventList+0xb0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d11c      	bne.n	80048fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff f819 	bl	8003900 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d2:	2201      	movs	r2, #1
 80048d4:	409a      	lsls	r2, r3
 80048d6:	4b18      	ldr	r3, [pc, #96]	@ (8004938 <xTaskRemoveFromEventList+0xb4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	4a16      	ldr	r2, [pc, #88]	@ (8004938 <xTaskRemoveFromEventList+0xb4>)
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4a13      	ldr	r2, [pc, #76]	@ (800493c <xTaskRemoveFromEventList+0xb8>)
 80048ee:	441a      	add	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7fe ffa5 	bl	8003846 <vListInsertEnd>
 80048fc:	e005      	b.n	800490a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	3318      	adds	r3, #24
 8004902:	4619      	mov	r1, r3
 8004904:	480e      	ldr	r0, [pc, #56]	@ (8004940 <xTaskRemoveFromEventList+0xbc>)
 8004906:	f7fe ff9e 	bl	8003846 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <xTaskRemoveFromEventList+0xc0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	429a      	cmp	r2, r3
 8004916:	d905      	bls.n	8004924 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800491c:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <xTaskRemoveFromEventList+0xc4>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e001      	b.n	8004928 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004928:	697b      	ldr	r3, [r7, #20]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	200002a0 	.word	0x200002a0
 8004938:	20000280 	.word	0x20000280
 800493c:	2000017c 	.word	0x2000017c
 8004940:	20000238 	.word	0x20000238
 8004944:	20000178 	.word	0x20000178
 8004948:	2000028c 	.word	0x2000028c

0800494c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <vTaskInternalSetTimeOutState+0x24>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <vTaskInternalSetTimeOutState+0x28>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	20000290 	.word	0x20000290
 8004974:	2000027c 	.word	0x2000027c

08004978 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	613b      	str	r3, [r7, #16]
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60fb      	str	r3, [r7, #12]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80049be:	f000 fc5b 	bl	8005278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a38 <xTaskCheckForTimeOut+0xc0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d102      	bne.n	80049e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049dc:	2300      	movs	r3, #0
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	e023      	b.n	8004a2a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <xTaskCheckForTimeOut+0xc4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d007      	beq.n	80049fe <xTaskCheckForTimeOut+0x86>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e015      	b.n	8004a2a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d20b      	bcs.n	8004a20 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff99 	bl	800494c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e004      	b.n	8004a2a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a2a:	f000 fc57 	bl	80052dc <vPortExitCritical>

	return xReturn;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	2000027c 	.word	0x2000027c
 8004a3c:	20000290 	.word	0x20000290

08004a40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a44:	4b03      	ldr	r3, [pc, #12]	@ (8004a54 <vTaskMissedYield+0x14>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	2000028c 	.word	0x2000028c

08004a58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a60:	f000 f852 	bl	8004b08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a64:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <prvIdleTask+0x28>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d9f9      	bls.n	8004a60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <prvIdleTask+0x2c>)
 8004a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a7c:	e7f0      	b.n	8004a60 <prvIdleTask+0x8>
 8004a7e:	bf00      	nop
 8004a80:	2000017c 	.word	0x2000017c
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	e00c      	b.n	8004aae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4a12      	ldr	r2, [pc, #72]	@ (8004ae8 <prvInitialiseTaskLists+0x60>)
 8004aa0:	4413      	add	r3, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe fea2 	bl	80037ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b06      	cmp	r3, #6
 8004ab2:	d9ef      	bls.n	8004a94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ab4:	480d      	ldr	r0, [pc, #52]	@ (8004aec <prvInitialiseTaskLists+0x64>)
 8004ab6:	f7fe fe99 	bl	80037ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aba:	480d      	ldr	r0, [pc, #52]	@ (8004af0 <prvInitialiseTaskLists+0x68>)
 8004abc:	f7fe fe96 	bl	80037ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ac0:	480c      	ldr	r0, [pc, #48]	@ (8004af4 <prvInitialiseTaskLists+0x6c>)
 8004ac2:	f7fe fe93 	bl	80037ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ac6:	480c      	ldr	r0, [pc, #48]	@ (8004af8 <prvInitialiseTaskLists+0x70>)
 8004ac8:	f7fe fe90 	bl	80037ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004acc:	480b      	ldr	r0, [pc, #44]	@ (8004afc <prvInitialiseTaskLists+0x74>)
 8004ace:	f7fe fe8d 	bl	80037ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <prvInitialiseTaskLists+0x78>)
 8004ad4:	4a05      	ldr	r2, [pc, #20]	@ (8004aec <prvInitialiseTaskLists+0x64>)
 8004ad6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <prvInitialiseTaskLists+0x7c>)
 8004ada:	4a05      	ldr	r2, [pc, #20]	@ (8004af0 <prvInitialiseTaskLists+0x68>)
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	2000017c 	.word	0x2000017c
 8004aec:	20000208 	.word	0x20000208
 8004af0:	2000021c 	.word	0x2000021c
 8004af4:	20000238 	.word	0x20000238
 8004af8:	2000024c 	.word	0x2000024c
 8004afc:	20000264 	.word	0x20000264
 8004b00:	20000230 	.word	0x20000230
 8004b04:	20000234 	.word	0x20000234

08004b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b0e:	e019      	b.n	8004b44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b10:	f000 fbb2 	bl	8005278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b14:	4b10      	ldr	r3, [pc, #64]	@ (8004b58 <prvCheckTasksWaitingTermination+0x50>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fe feed 	bl	8003900 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b26:	4b0d      	ldr	r3, [pc, #52]	@ (8004b5c <prvCheckTasksWaitingTermination+0x54>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004b5c <prvCheckTasksWaitingTermination+0x54>)
 8004b2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b30:	4b0b      	ldr	r3, [pc, #44]	@ (8004b60 <prvCheckTasksWaitingTermination+0x58>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	4a0a      	ldr	r2, [pc, #40]	@ (8004b60 <prvCheckTasksWaitingTermination+0x58>)
 8004b38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b3a:	f000 fbcf 	bl	80052dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f810 	bl	8004b64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b44:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <prvCheckTasksWaitingTermination+0x58>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e1      	bne.n	8004b10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2000024c 	.word	0x2000024c
 8004b5c:	20000278 	.word	0x20000278
 8004b60:	20000260 	.word	0x20000260

08004b64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	334c      	adds	r3, #76	@ 0x4c
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 f871 	bl	8005c58 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fd2a 	bl	80055d4 <vPortFree>
			vPortFree( pxTCB );
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fd27 	bl	80055d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b96:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <prvResetNextTaskUnblockTime+0x38>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <prvResetNextTaskUnblockTime+0x3c>)
 8004ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ba8:	e008      	b.n	8004bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004baa:	4b07      	ldr	r3, [pc, #28]	@ (8004bc8 <prvResetNextTaskUnblockTime+0x38>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a04      	ldr	r2, [pc, #16]	@ (8004bcc <prvResetNextTaskUnblockTime+0x3c>)
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	20000230 	.word	0x20000230
 8004bcc:	20000298 	.word	0x20000298

08004bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c04 <xTaskGetSchedulerState+0x34>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bde:	2301      	movs	r3, #1
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	e008      	b.n	8004bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be4:	4b08      	ldr	r3, [pc, #32]	@ (8004c08 <xTaskGetSchedulerState+0x38>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bec:	2302      	movs	r3, #2
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	e001      	b.n	8004bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bf6:	687b      	ldr	r3, [r7, #4]
	}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	20000284 	.word	0x20000284
 8004c08:	200002a0 	.word	0x200002a0

08004c0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d05e      	beq.n	8004ce0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c26:	4b31      	ldr	r3, [pc, #196]	@ (8004cec <xTaskPriorityInherit+0xe0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d24e      	bcs.n	8004cce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	db06      	blt.n	8004c46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c38:	4b2c      	ldr	r3, [pc, #176]	@ (8004cec <xTaskPriorityInherit+0xe0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	f1c3 0207 	rsb	r2, r3, #7
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	6959      	ldr	r1, [r3, #20]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4a26      	ldr	r2, [pc, #152]	@ (8004cf0 <xTaskPriorityInherit+0xe4>)
 8004c58:	4413      	add	r3, r2
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	d12f      	bne.n	8004cbe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fe4c 	bl	8003900 <uxListRemove>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c72:	2201      	movs	r2, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43da      	mvns	r2, r3
 8004c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf4 <xTaskPriorityInherit+0xe8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf4 <xTaskPriorityInherit+0xe8>)
 8004c82:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c84:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <xTaskPriorityInherit+0xe0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c92:	2201      	movs	r2, #1
 8004c94:	409a      	lsls	r2, r3
 8004c96:	4b17      	ldr	r3, [pc, #92]	@ (8004cf4 <xTaskPriorityInherit+0xe8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	4a15      	ldr	r2, [pc, #84]	@ (8004cf4 <xTaskPriorityInherit+0xe8>)
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4a10      	ldr	r2, [pc, #64]	@ (8004cf0 <xTaskPriorityInherit+0xe4>)
 8004cae:	441a      	add	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f7fe fdc5 	bl	8003846 <vListInsertEnd>
 8004cbc:	e004      	b.n	8004cc8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <xTaskPriorityInherit+0xe0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	e008      	b.n	8004ce0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cd2:	4b06      	ldr	r3, [pc, #24]	@ (8004cec <xTaskPriorityInherit+0xe0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d201      	bcs.n	8004ce0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
	}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000178 	.word	0x20000178
 8004cf0:	2000017c 	.word	0x2000017c
 8004cf4:	20000280 	.word	0x20000280

08004cf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d070      	beq.n	8004df0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004dfc <xTaskPriorityDisinherit+0x104>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d00b      	beq.n	8004d30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	60fb      	str	r3, [r7, #12]
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	e7fd      	b.n	8004d2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	60bb      	str	r3, [r7, #8]
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	e7fd      	b.n	8004d4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d044      	beq.n	8004df0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d140      	bne.n	8004df0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe fdc4 	bl	8003900 <uxListRemove>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d115      	bne.n	8004daa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d82:	491f      	ldr	r1, [pc, #124]	@ (8004e00 <xTaskPriorityDisinherit+0x108>)
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <xTaskPriorityDisinherit+0xb2>
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	2201      	movs	r2, #1
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	4b18      	ldr	r3, [pc, #96]	@ (8004e04 <xTaskPriorityDisinherit+0x10c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4013      	ands	r3, r2
 8004da6:	4a17      	ldr	r2, [pc, #92]	@ (8004e04 <xTaskPriorityDisinherit+0x10c>)
 8004da8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	f1c3 0207 	rsb	r2, r3, #7
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e04 <xTaskPriorityDisinherit+0x10c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004e04 <xTaskPriorityDisinherit+0x10c>)
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4a08      	ldr	r2, [pc, #32]	@ (8004e00 <xTaskPriorityDisinherit+0x108>)
 8004dde:	441a      	add	r2, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f7fe fd2d 	bl	8003846 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004dec:	2301      	movs	r3, #1
 8004dee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004df0:	697b      	ldr	r3, [r7, #20]
	}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000178 	.word	0x20000178
 8004e00:	2000017c 	.word	0x2000017c
 8004e04:	20000280 	.word	0x20000280

08004e08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d079      	beq.n	8004f14 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10b      	bne.n	8004e40 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	60fb      	str	r3, [r7, #12]
}
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	e7fd      	b.n	8004e3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d902      	bls.n	8004e50 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e002      	b.n	8004e56 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e54:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d059      	beq.n	8004f14 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d154      	bne.n	8004f14 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004f1c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d10b      	bne.n	8004e8c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	60bb      	str	r3, [r7, #8]
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	db04      	blt.n	8004eaa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f1c3 0207 	rsb	r2, r3, #7
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	6959      	ldr	r1, [r3, #20]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4a19      	ldr	r2, [pc, #100]	@ (8004f20 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004eba:	4413      	add	r3, r2
 8004ebc:	4299      	cmp	r1, r3
 8004ebe:	d129      	bne.n	8004f14 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fd1b 	bl	8003900 <uxListRemove>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43da      	mvns	r2, r3
 8004edc:	4b11      	ldr	r3, [pc, #68]	@ (8004f24 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	4a10      	ldr	r2, [pc, #64]	@ (8004f24 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004ee4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	2201      	movs	r2, #1
 8004eec:	409a      	lsls	r2, r3
 8004eee:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8004f24 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4a06      	ldr	r2, [pc, #24]	@ (8004f20 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004f06:	441a      	add	r2, r3
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f7fe fc99 	bl	8003846 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f14:	bf00      	nop
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000178 	.word	0x20000178
 8004f20:	2000017c 	.word	0x2000017c
 8004f24:	20000280 	.word	0x20000280

08004f28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004f2c:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f34:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f3a:	3201      	adds	r2, #1
 8004f3c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004f3e:	4b03      	ldr	r3, [pc, #12]	@ (8004f4c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f40:	681b      	ldr	r3, [r3, #0]
	}
 8004f42:	4618      	mov	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	20000178 	.word	0x20000178

08004f50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f5a:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f60:	4b28      	ldr	r3, [pc, #160]	@ (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe fcca 	bl	8003900 <uxListRemove>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f72:	4b24      	ldr	r3, [pc, #144]	@ (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	2201      	movs	r2, #1
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43da      	mvns	r2, r3
 8004f80:	4b21      	ldr	r3, [pc, #132]	@ (8005008 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4013      	ands	r3, r2
 8004f86:	4a20      	ldr	r2, [pc, #128]	@ (8005008 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d10a      	bne.n	8004fa8 <prvAddCurrentTaskToDelayedList+0x58>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f98:	4b1a      	ldr	r3, [pc, #104]	@ (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	481a      	ldr	r0, [pc, #104]	@ (800500c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fa2:	f7fe fc50 	bl	8003846 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fa6:	e026      	b.n	8004ff6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fb0:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d209      	bcs.n	8004fd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fc0:	4b13      	ldr	r3, [pc, #76]	@ (8005010 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f7fe fc5e 	bl	800388e <vListInsert>
}
 8004fd2:	e010      	b.n	8004ff6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f7fe fc54 	bl	800388e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8005018 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d202      	bcs.n	8004ff6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ff0:	4a09      	ldr	r2, [pc, #36]	@ (8005018 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	6013      	str	r3, [r2, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	2000027c 	.word	0x2000027c
 8005004:	20000178 	.word	0x20000178
 8005008:	20000280 	.word	0x20000280
 800500c:	20000264 	.word	0x20000264
 8005010:	20000234 	.word	0x20000234
 8005014:	20000230 	.word	0x20000230
 8005018:	20000298 	.word	0x20000298

0800501c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3b04      	subs	r3, #4
 800502c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3b04      	subs	r3, #4
 800503a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f023 0201 	bic.w	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3b04      	subs	r3, #4
 800504a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800504c:	4a0c      	ldr	r2, [pc, #48]	@ (8005080 <pxPortInitialiseStack+0x64>)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3b14      	subs	r3, #20
 8005056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3b04      	subs	r3, #4
 8005062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f06f 0202 	mvn.w	r2, #2
 800506a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3b20      	subs	r3, #32
 8005070:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005072:	68fb      	ldr	r3, [r7, #12]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	08005085 	.word	0x08005085

08005084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800508e:	4b13      	ldr	r3, [pc, #76]	@ (80050dc <prvTaskExitError+0x58>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d00b      	beq.n	80050b0 <prvTaskExitError+0x2c>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	60fb      	str	r3, [r7, #12]
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	e7fd      	b.n	80050ac <prvTaskExitError+0x28>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60bb      	str	r3, [r7, #8]
}
 80050c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050c4:	bf00      	nop
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0fc      	beq.n	80050c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	2000000c 	.word	0x2000000c

080050e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050e0:	4b07      	ldr	r3, [pc, #28]	@ (8005100 <pxCurrentTCBConst2>)
 80050e2:	6819      	ldr	r1, [r3, #0]
 80050e4:	6808      	ldr	r0, [r1, #0]
 80050e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ea:	f380 8809 	msr	PSP, r0
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8811 	msr	BASEPRI, r0
 80050fa:	4770      	bx	lr
 80050fc:	f3af 8000 	nop.w

08005100 <pxCurrentTCBConst2>:
 8005100:	20000178 	.word	0x20000178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop

08005108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005108:	4808      	ldr	r0, [pc, #32]	@ (800512c <prvPortStartFirstTask+0x24>)
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	6800      	ldr	r0, [r0, #0]
 800510e:	f380 8808 	msr	MSP, r0
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8814 	msr	CONTROL, r0
 800511a:	b662      	cpsie	i
 800511c:	b661      	cpsie	f
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	df00      	svc	0
 8005128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800512a:	bf00      	nop
 800512c:	e000ed08 	.word	0xe000ed08

08005130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005136:	4b47      	ldr	r3, [pc, #284]	@ (8005254 <xPortStartScheduler+0x124>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a47      	ldr	r2, [pc, #284]	@ (8005258 <xPortStartScheduler+0x128>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10b      	bne.n	8005158 <xPortStartScheduler+0x28>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	613b      	str	r3, [r7, #16]
}
 8005152:	bf00      	nop
 8005154:	bf00      	nop
 8005156:	e7fd      	b.n	8005154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005158:	4b3e      	ldr	r3, [pc, #248]	@ (8005254 <xPortStartScheduler+0x124>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3f      	ldr	r2, [pc, #252]	@ (800525c <xPortStartScheduler+0x12c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d10b      	bne.n	800517a <xPortStartScheduler+0x4a>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	60fb      	str	r3, [r7, #12]
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	e7fd      	b.n	8005176 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800517a:	4b39      	ldr	r3, [pc, #228]	@ (8005260 <xPortStartScheduler+0x130>)
 800517c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	22ff      	movs	r2, #255	@ 0xff
 800518a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800519c:	b2da      	uxtb	r2, r3
 800519e:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <xPortStartScheduler+0x134>)
 80051a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051a2:	4b31      	ldr	r3, [pc, #196]	@ (8005268 <xPortStartScheduler+0x138>)
 80051a4:	2207      	movs	r2, #7
 80051a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051a8:	e009      	b.n	80051be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80051aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005268 <xPortStartScheduler+0x138>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005268 <xPortStartScheduler+0x138>)
 80051b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b80      	cmp	r3, #128	@ 0x80
 80051c8:	d0ef      	beq.n	80051aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051ca:	4b27      	ldr	r3, [pc, #156]	@ (8005268 <xPortStartScheduler+0x138>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f1c3 0307 	rsb	r3, r3, #7
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d00b      	beq.n	80051ee <xPortStartScheduler+0xbe>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60bb      	str	r3, [r7, #8]
}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	e7fd      	b.n	80051ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005268 <xPortStartScheduler+0x138>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005268 <xPortStartScheduler+0x138>)
 80051f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005268 <xPortStartScheduler+0x138>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005200:	4a19      	ldr	r2, [pc, #100]	@ (8005268 <xPortStartScheduler+0x138>)
 8005202:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	b2da      	uxtb	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800520c:	4b17      	ldr	r3, [pc, #92]	@ (800526c <xPortStartScheduler+0x13c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a16      	ldr	r2, [pc, #88]	@ (800526c <xPortStartScheduler+0x13c>)
 8005212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005216:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005218:	4b14      	ldr	r3, [pc, #80]	@ (800526c <xPortStartScheduler+0x13c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a13      	ldr	r2, [pc, #76]	@ (800526c <xPortStartScheduler+0x13c>)
 800521e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005222:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005224:	f000 f8da 	bl	80053dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005228:	4b11      	ldr	r3, [pc, #68]	@ (8005270 <xPortStartScheduler+0x140>)
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800522e:	f000 f8f9 	bl	8005424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <xPortStartScheduler+0x144>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a0f      	ldr	r2, [pc, #60]	@ (8005274 <xPortStartScheduler+0x144>)
 8005238:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800523c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800523e:	f7ff ff63 	bl	8005108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005242:	f7ff fa95 	bl	8004770 <vTaskSwitchContext>
	prvTaskExitError();
 8005246:	f7ff ff1d 	bl	8005084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	e000ed00 	.word	0xe000ed00
 8005258:	410fc271 	.word	0x410fc271
 800525c:	410fc270 	.word	0x410fc270
 8005260:	e000e400 	.word	0xe000e400
 8005264:	200002a4 	.word	0x200002a4
 8005268:	200002a8 	.word	0x200002a8
 800526c:	e000ed20 	.word	0xe000ed20
 8005270:	2000000c 	.word	0x2000000c
 8005274:	e000ef34 	.word	0xe000ef34

08005278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
}
 8005290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005292:	4b10      	ldr	r3, [pc, #64]	@ (80052d4 <vPortEnterCritical+0x5c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3301      	adds	r3, #1
 8005298:	4a0e      	ldr	r2, [pc, #56]	@ (80052d4 <vPortEnterCritical+0x5c>)
 800529a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800529c:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <vPortEnterCritical+0x5c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d110      	bne.n	80052c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052a4:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <vPortEnterCritical+0x60>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	603b      	str	r3, [r7, #0]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <vPortEnterCritical+0x4a>
	}
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	2000000c 	.word	0x2000000c
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052e2:	4b12      	ldr	r3, [pc, #72]	@ (800532c <vPortExitCritical+0x50>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10b      	bne.n	8005302 <vPortExitCritical+0x26>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	607b      	str	r3, [r7, #4]
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	e7fd      	b.n	80052fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005302:	4b0a      	ldr	r3, [pc, #40]	@ (800532c <vPortExitCritical+0x50>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3b01      	subs	r3, #1
 8005308:	4a08      	ldr	r2, [pc, #32]	@ (800532c <vPortExitCritical+0x50>)
 800530a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800530c:	4b07      	ldr	r3, [pc, #28]	@ (800532c <vPortExitCritical+0x50>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <vPortExitCritical+0x44>
 8005314:	2300      	movs	r3, #0
 8005316:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800531e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	2000000c 	.word	0x2000000c

08005330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005330:	f3ef 8009 	mrs	r0, PSP
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	4b15      	ldr	r3, [pc, #84]	@ (8005390 <pxCurrentTCBConst>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	f01e 0f10 	tst.w	lr, #16
 8005340:	bf08      	it	eq
 8005342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	6010      	str	r0, [r2, #0]
 800534c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005354:	f380 8811 	msr	BASEPRI, r0
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f7ff fa06 	bl	8004770 <vTaskSwitchContext>
 8005364:	f04f 0000 	mov.w	r0, #0
 8005368:	f380 8811 	msr	BASEPRI, r0
 800536c:	bc09      	pop	{r0, r3}
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	6808      	ldr	r0, [r1, #0]
 8005372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005376:	f01e 0f10 	tst.w	lr, #16
 800537a:	bf08      	it	eq
 800537c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005380:	f380 8809 	msr	PSP, r0
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	f3af 8000 	nop.w

08005390 <pxCurrentTCBConst>:
 8005390:	20000178 	.word	0x20000178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop

08005398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
}
 80053b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053b2:	f7ff f923 	bl	80045fc <xTaskIncrementTick>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053bc:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <SysTick_Handler+0x40>)
 80053be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	2300      	movs	r3, #0
 80053c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f383 8811 	msr	BASEPRI, r3
}
 80053ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <vPortSetupTimerInterrupt+0x34>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <vPortSetupTimerInterrupt+0x38>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <vPortSetupTimerInterrupt+0x3c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0a      	ldr	r2, [pc, #40]	@ (800541c <vPortSetupTimerInterrupt+0x40>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	099b      	lsrs	r3, r3, #6
 80053f8:	4a09      	ldr	r2, [pc, #36]	@ (8005420 <vPortSetupTimerInterrupt+0x44>)
 80053fa:	3b01      	subs	r3, #1
 80053fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053fe:	4b04      	ldr	r3, [pc, #16]	@ (8005410 <vPortSetupTimerInterrupt+0x34>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
}
 8005404:	bf00      	nop
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	e000e010 	.word	0xe000e010
 8005414:	e000e018 	.word	0xe000e018
 8005418:	20000000 	.word	0x20000000
 800541c:	10624dd3 	.word	0x10624dd3
 8005420:	e000e014 	.word	0xe000e014

08005424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005434 <vPortEnableVFP+0x10>
 8005428:	6801      	ldr	r1, [r0, #0]
 800542a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800542e:	6001      	str	r1, [r0, #0]
 8005430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005432:	bf00      	nop
 8005434:	e000ed88 	.word	0xe000ed88

08005438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	@ 0x28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005444:	f7ff f82e 	bl	80044a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005448:	4b5c      	ldr	r3, [pc, #368]	@ (80055bc <pvPortMalloc+0x184>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005450:	f000 f924 	bl	800569c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005454:	4b5a      	ldr	r3, [pc, #360]	@ (80055c0 <pvPortMalloc+0x188>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	f040 8095 	bne.w	800558c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01e      	beq.n	80054a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005468:	2208      	movs	r2, #8
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4413      	add	r3, r2
 800546e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	2b00      	cmp	r3, #0
 8005478:	d015      	beq.n	80054a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f023 0307 	bic.w	r3, r3, #7
 8005480:	3308      	adds	r3, #8
 8005482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <pvPortMalloc+0x6e>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	617b      	str	r3, [r7, #20]
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	e7fd      	b.n	80054a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d06f      	beq.n	800558c <pvPortMalloc+0x154>
 80054ac:	4b45      	ldr	r3, [pc, #276]	@ (80055c4 <pvPortMalloc+0x18c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d86a      	bhi.n	800558c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054b6:	4b44      	ldr	r3, [pc, #272]	@ (80055c8 <pvPortMalloc+0x190>)
 80054b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054ba:	4b43      	ldr	r3, [pc, #268]	@ (80055c8 <pvPortMalloc+0x190>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054c0:	e004      	b.n	80054cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d903      	bls.n	80054de <pvPortMalloc+0xa6>
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f1      	bne.n	80054c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054de:	4b37      	ldr	r3, [pc, #220]	@ (80055bc <pvPortMalloc+0x184>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d051      	beq.n	800558c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2208      	movs	r2, #8
 80054ee:	4413      	add	r3, r2
 80054f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	1ad2      	subs	r2, r2, r3
 8005502:	2308      	movs	r3, #8
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	429a      	cmp	r2, r3
 8005508:	d920      	bls.n	800554c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800550a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4413      	add	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <pvPortMalloc+0xfc>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	613b      	str	r3, [r7, #16]
}
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1ad2      	subs	r2, r2, r3
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005546:	69b8      	ldr	r0, [r7, #24]
 8005548:	f000 f90a 	bl	8005760 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800554c:	4b1d      	ldr	r3, [pc, #116]	@ (80055c4 <pvPortMalloc+0x18c>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	4a1b      	ldr	r2, [pc, #108]	@ (80055c4 <pvPortMalloc+0x18c>)
 8005558:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800555a:	4b1a      	ldr	r3, [pc, #104]	@ (80055c4 <pvPortMalloc+0x18c>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <pvPortMalloc+0x194>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d203      	bcs.n	800556e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005566:	4b17      	ldr	r3, [pc, #92]	@ (80055c4 <pvPortMalloc+0x18c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a18      	ldr	r2, [pc, #96]	@ (80055cc <pvPortMalloc+0x194>)
 800556c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	4b13      	ldr	r3, [pc, #76]	@ (80055c0 <pvPortMalloc+0x188>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	431a      	orrs	r2, r3
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005582:	4b13      	ldr	r3, [pc, #76]	@ (80055d0 <pvPortMalloc+0x198>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	4a11      	ldr	r2, [pc, #68]	@ (80055d0 <pvPortMalloc+0x198>)
 800558a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800558c:	f7fe ff98 	bl	80044c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <pvPortMalloc+0x17a>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	60fb      	str	r3, [r7, #12]
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	e7fd      	b.n	80055ae <pvPortMalloc+0x176>
	return pvReturn;
 80055b2:	69fb      	ldr	r3, [r7, #28]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3728      	adds	r7, #40	@ 0x28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	200029c4 	.word	0x200029c4
 80055c0:	200029d8 	.word	0x200029d8
 80055c4:	200029c8 	.word	0x200029c8
 80055c8:	200029bc 	.word	0x200029bc
 80055cc:	200029cc 	.word	0x200029cc
 80055d0:	200029d0 	.word	0x200029d0

080055d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d04f      	beq.n	8005686 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055e6:	2308      	movs	r3, #8
 80055e8:	425b      	negs	r3, r3
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4413      	add	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	4b25      	ldr	r3, [pc, #148]	@ (8005690 <vPortFree+0xbc>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <vPortFree+0x46>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	60fb      	str	r3, [r7, #12]
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00b      	beq.n	800563a <vPortFree+0x66>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60bb      	str	r3, [r7, #8]
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	4b14      	ldr	r3, [pc, #80]	@ (8005690 <vPortFree+0xbc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01e      	beq.n	8005686 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d11a      	bne.n	8005686 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4b0e      	ldr	r3, [pc, #56]	@ (8005690 <vPortFree+0xbc>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	43db      	mvns	r3, r3
 800565a:	401a      	ands	r2, r3
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005660:	f7fe ff20 	bl	80044a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <vPortFree+0xc0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4413      	add	r3, r2
 800566e:	4a09      	ldr	r2, [pc, #36]	@ (8005694 <vPortFree+0xc0>)
 8005670:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005672:	6938      	ldr	r0, [r7, #16]
 8005674:	f000 f874 	bl	8005760 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005678:	4b07      	ldr	r3, [pc, #28]	@ (8005698 <vPortFree+0xc4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	4a06      	ldr	r2, [pc, #24]	@ (8005698 <vPortFree+0xc4>)
 8005680:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005682:	f7fe ff1d 	bl	80044c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005686:	bf00      	nop
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200029d8 	.word	0x200029d8
 8005694:	200029c8 	.word	0x200029c8
 8005698:	200029d4 	.word	0x200029d4

0800569c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80056a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056a8:	4b27      	ldr	r3, [pc, #156]	@ (8005748 <prvHeapInit+0xac>)
 80056aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3307      	adds	r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005748 <prvHeapInit+0xac>)
 80056cc:	4413      	add	r3, r2
 80056ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056d4:	4a1d      	ldr	r2, [pc, #116]	@ (800574c <prvHeapInit+0xb0>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056da:	4b1c      	ldr	r3, [pc, #112]	@ (800574c <prvHeapInit+0xb0>)
 80056dc:	2200      	movs	r2, #0
 80056de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	4413      	add	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056e8:	2208      	movs	r2, #8
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0307 	bic.w	r3, r3, #7
 80056f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a15      	ldr	r2, [pc, #84]	@ (8005750 <prvHeapInit+0xb4>)
 80056fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056fe:	4b14      	ldr	r3, [pc, #80]	@ (8005750 <prvHeapInit+0xb4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005706:	4b12      	ldr	r3, [pc, #72]	@ (8005750 <prvHeapInit+0xb4>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	1ad2      	subs	r2, r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800571c:	4b0c      	ldr	r3, [pc, #48]	@ (8005750 <prvHeapInit+0xb4>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4a0a      	ldr	r2, [pc, #40]	@ (8005754 <prvHeapInit+0xb8>)
 800572a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	4a09      	ldr	r2, [pc, #36]	@ (8005758 <prvHeapInit+0xbc>)
 8005732:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005734:	4b09      	ldr	r3, [pc, #36]	@ (800575c <prvHeapInit+0xc0>)
 8005736:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800573a:	601a      	str	r2, [r3, #0]
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	200002ac 	.word	0x200002ac
 800574c:	200029bc 	.word	0x200029bc
 8005750:	200029c4 	.word	0x200029c4
 8005754:	200029cc 	.word	0x200029cc
 8005758:	200029c8 	.word	0x200029c8
 800575c:	200029d8 	.word	0x200029d8

08005760 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005768:	4b28      	ldr	r3, [pc, #160]	@ (800580c <prvInsertBlockIntoFreeList+0xac>)
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e002      	b.n	8005774 <prvInsertBlockIntoFreeList+0x14>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	429a      	cmp	r2, r3
 800577c:	d8f7      	bhi.n	800576e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4413      	add	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d108      	bne.n	80057a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	441a      	add	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	441a      	add	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d118      	bne.n	80057e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b15      	ldr	r3, [pc, #84]	@ (8005810 <prvInsertBlockIntoFreeList+0xb0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d00d      	beq.n	80057de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	441a      	add	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e008      	b.n	80057f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057de:	4b0c      	ldr	r3, [pc, #48]	@ (8005810 <prvInsertBlockIntoFreeList+0xb0>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e003      	b.n	80057f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d002      	beq.n	80057fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	200029bc 	.word	0x200029bc
 8005810:	200029c4 	.word	0x200029c4

08005814 <std>:
 8005814:	2300      	movs	r3, #0
 8005816:	b510      	push	{r4, lr}
 8005818:	4604      	mov	r4, r0
 800581a:	e9c0 3300 	strd	r3, r3, [r0]
 800581e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005822:	6083      	str	r3, [r0, #8]
 8005824:	8181      	strh	r1, [r0, #12]
 8005826:	6643      	str	r3, [r0, #100]	@ 0x64
 8005828:	81c2      	strh	r2, [r0, #14]
 800582a:	6183      	str	r3, [r0, #24]
 800582c:	4619      	mov	r1, r3
 800582e:	2208      	movs	r2, #8
 8005830:	305c      	adds	r0, #92	@ 0x5c
 8005832:	f000 f9f9 	bl	8005c28 <memset>
 8005836:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <std+0x58>)
 8005838:	6263      	str	r3, [r4, #36]	@ 0x24
 800583a:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <std+0x5c>)
 800583c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800583e:	4b0d      	ldr	r3, [pc, #52]	@ (8005874 <std+0x60>)
 8005840:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005842:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <std+0x64>)
 8005844:	6323      	str	r3, [r4, #48]	@ 0x30
 8005846:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <std+0x68>)
 8005848:	6224      	str	r4, [r4, #32]
 800584a:	429c      	cmp	r4, r3
 800584c:	d006      	beq.n	800585c <std+0x48>
 800584e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005852:	4294      	cmp	r4, r2
 8005854:	d002      	beq.n	800585c <std+0x48>
 8005856:	33d0      	adds	r3, #208	@ 0xd0
 8005858:	429c      	cmp	r4, r3
 800585a:	d105      	bne.n	8005868 <std+0x54>
 800585c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005864:	f000 baae 	b.w	8005dc4 <__retarget_lock_init_recursive>
 8005868:	bd10      	pop	{r4, pc}
 800586a:	bf00      	nop
 800586c:	08005a79 	.word	0x08005a79
 8005870:	08005a9b 	.word	0x08005a9b
 8005874:	08005ad3 	.word	0x08005ad3
 8005878:	08005af7 	.word	0x08005af7
 800587c:	200029dc 	.word	0x200029dc

08005880 <stdio_exit_handler>:
 8005880:	4a02      	ldr	r2, [pc, #8]	@ (800588c <stdio_exit_handler+0xc>)
 8005882:	4903      	ldr	r1, [pc, #12]	@ (8005890 <stdio_exit_handler+0x10>)
 8005884:	4803      	ldr	r0, [pc, #12]	@ (8005894 <stdio_exit_handler+0x14>)
 8005886:	f000 b869 	b.w	800595c <_fwalk_sglue>
 800588a:	bf00      	nop
 800588c:	20000010 	.word	0x20000010
 8005890:	08006681 	.word	0x08006681
 8005894:	20000020 	.word	0x20000020

08005898 <cleanup_stdio>:
 8005898:	6841      	ldr	r1, [r0, #4]
 800589a:	4b0c      	ldr	r3, [pc, #48]	@ (80058cc <cleanup_stdio+0x34>)
 800589c:	4299      	cmp	r1, r3
 800589e:	b510      	push	{r4, lr}
 80058a0:	4604      	mov	r4, r0
 80058a2:	d001      	beq.n	80058a8 <cleanup_stdio+0x10>
 80058a4:	f000 feec 	bl	8006680 <_fflush_r>
 80058a8:	68a1      	ldr	r1, [r4, #8]
 80058aa:	4b09      	ldr	r3, [pc, #36]	@ (80058d0 <cleanup_stdio+0x38>)
 80058ac:	4299      	cmp	r1, r3
 80058ae:	d002      	beq.n	80058b6 <cleanup_stdio+0x1e>
 80058b0:	4620      	mov	r0, r4
 80058b2:	f000 fee5 	bl	8006680 <_fflush_r>
 80058b6:	68e1      	ldr	r1, [r4, #12]
 80058b8:	4b06      	ldr	r3, [pc, #24]	@ (80058d4 <cleanup_stdio+0x3c>)
 80058ba:	4299      	cmp	r1, r3
 80058bc:	d004      	beq.n	80058c8 <cleanup_stdio+0x30>
 80058be:	4620      	mov	r0, r4
 80058c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c4:	f000 bedc 	b.w	8006680 <_fflush_r>
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	bf00      	nop
 80058cc:	200029dc 	.word	0x200029dc
 80058d0:	20002a44 	.word	0x20002a44
 80058d4:	20002aac 	.word	0x20002aac

080058d8 <global_stdio_init.part.0>:
 80058d8:	b510      	push	{r4, lr}
 80058da:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <global_stdio_init.part.0+0x30>)
 80058dc:	4c0b      	ldr	r4, [pc, #44]	@ (800590c <global_stdio_init.part.0+0x34>)
 80058de:	4a0c      	ldr	r2, [pc, #48]	@ (8005910 <global_stdio_init.part.0+0x38>)
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	4620      	mov	r0, r4
 80058e4:	2200      	movs	r2, #0
 80058e6:	2104      	movs	r1, #4
 80058e8:	f7ff ff94 	bl	8005814 <std>
 80058ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058f0:	2201      	movs	r2, #1
 80058f2:	2109      	movs	r1, #9
 80058f4:	f7ff ff8e 	bl	8005814 <std>
 80058f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058fc:	2202      	movs	r2, #2
 80058fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005902:	2112      	movs	r1, #18
 8005904:	f7ff bf86 	b.w	8005814 <std>
 8005908:	20002b14 	.word	0x20002b14
 800590c:	200029dc 	.word	0x200029dc
 8005910:	08005881 	.word	0x08005881

08005914 <__sfp_lock_acquire>:
 8005914:	4801      	ldr	r0, [pc, #4]	@ (800591c <__sfp_lock_acquire+0x8>)
 8005916:	f000 ba56 	b.w	8005dc6 <__retarget_lock_acquire_recursive>
 800591a:	bf00      	nop
 800591c:	20002b1d 	.word	0x20002b1d

08005920 <__sfp_lock_release>:
 8005920:	4801      	ldr	r0, [pc, #4]	@ (8005928 <__sfp_lock_release+0x8>)
 8005922:	f000 ba51 	b.w	8005dc8 <__retarget_lock_release_recursive>
 8005926:	bf00      	nop
 8005928:	20002b1d 	.word	0x20002b1d

0800592c <__sinit>:
 800592c:	b510      	push	{r4, lr}
 800592e:	4604      	mov	r4, r0
 8005930:	f7ff fff0 	bl	8005914 <__sfp_lock_acquire>
 8005934:	6a23      	ldr	r3, [r4, #32]
 8005936:	b11b      	cbz	r3, 8005940 <__sinit+0x14>
 8005938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800593c:	f7ff bff0 	b.w	8005920 <__sfp_lock_release>
 8005940:	4b04      	ldr	r3, [pc, #16]	@ (8005954 <__sinit+0x28>)
 8005942:	6223      	str	r3, [r4, #32]
 8005944:	4b04      	ldr	r3, [pc, #16]	@ (8005958 <__sinit+0x2c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f5      	bne.n	8005938 <__sinit+0xc>
 800594c:	f7ff ffc4 	bl	80058d8 <global_stdio_init.part.0>
 8005950:	e7f2      	b.n	8005938 <__sinit+0xc>
 8005952:	bf00      	nop
 8005954:	08005899 	.word	0x08005899
 8005958:	20002b14 	.word	0x20002b14

0800595c <_fwalk_sglue>:
 800595c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005960:	4607      	mov	r7, r0
 8005962:	4688      	mov	r8, r1
 8005964:	4614      	mov	r4, r2
 8005966:	2600      	movs	r6, #0
 8005968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800596c:	f1b9 0901 	subs.w	r9, r9, #1
 8005970:	d505      	bpl.n	800597e <_fwalk_sglue+0x22>
 8005972:	6824      	ldr	r4, [r4, #0]
 8005974:	2c00      	cmp	r4, #0
 8005976:	d1f7      	bne.n	8005968 <_fwalk_sglue+0xc>
 8005978:	4630      	mov	r0, r6
 800597a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597e:	89ab      	ldrh	r3, [r5, #12]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d907      	bls.n	8005994 <_fwalk_sglue+0x38>
 8005984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005988:	3301      	adds	r3, #1
 800598a:	d003      	beq.n	8005994 <_fwalk_sglue+0x38>
 800598c:	4629      	mov	r1, r5
 800598e:	4638      	mov	r0, r7
 8005990:	47c0      	blx	r8
 8005992:	4306      	orrs	r6, r0
 8005994:	3568      	adds	r5, #104	@ 0x68
 8005996:	e7e9      	b.n	800596c <_fwalk_sglue+0x10>

08005998 <iprintf>:
 8005998:	b40f      	push	{r0, r1, r2, r3}
 800599a:	b507      	push	{r0, r1, r2, lr}
 800599c:	4906      	ldr	r1, [pc, #24]	@ (80059b8 <iprintf+0x20>)
 800599e:	ab04      	add	r3, sp, #16
 80059a0:	6808      	ldr	r0, [r1, #0]
 80059a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a6:	6881      	ldr	r1, [r0, #8]
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	f000 fb3f 	bl	800602c <_vfiprintf_r>
 80059ae:	b003      	add	sp, #12
 80059b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b4:	b004      	add	sp, #16
 80059b6:	4770      	bx	lr
 80059b8:	2000001c 	.word	0x2000001c

080059bc <_puts_r>:
 80059bc:	6a03      	ldr	r3, [r0, #32]
 80059be:	b570      	push	{r4, r5, r6, lr}
 80059c0:	6884      	ldr	r4, [r0, #8]
 80059c2:	4605      	mov	r5, r0
 80059c4:	460e      	mov	r6, r1
 80059c6:	b90b      	cbnz	r3, 80059cc <_puts_r+0x10>
 80059c8:	f7ff ffb0 	bl	800592c <__sinit>
 80059cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059ce:	07db      	lsls	r3, r3, #31
 80059d0:	d405      	bmi.n	80059de <_puts_r+0x22>
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	0598      	lsls	r0, r3, #22
 80059d6:	d402      	bmi.n	80059de <_puts_r+0x22>
 80059d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059da:	f000 f9f4 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	0719      	lsls	r1, r3, #28
 80059e2:	d502      	bpl.n	80059ea <_puts_r+0x2e>
 80059e4:	6923      	ldr	r3, [r4, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d135      	bne.n	8005a56 <_puts_r+0x9a>
 80059ea:	4621      	mov	r1, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	f000 f8c5 	bl	8005b7c <__swsetup_r>
 80059f2:	b380      	cbz	r0, 8005a56 <_puts_r+0x9a>
 80059f4:	f04f 35ff 	mov.w	r5, #4294967295
 80059f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059fa:	07da      	lsls	r2, r3, #31
 80059fc:	d405      	bmi.n	8005a0a <_puts_r+0x4e>
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	059b      	lsls	r3, r3, #22
 8005a02:	d402      	bmi.n	8005a0a <_puts_r+0x4e>
 8005a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a06:	f000 f9df 	bl	8005dc8 <__retarget_lock_release_recursive>
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	bd70      	pop	{r4, r5, r6, pc}
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	da04      	bge.n	8005a1c <_puts_r+0x60>
 8005a12:	69a2      	ldr	r2, [r4, #24]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	dc17      	bgt.n	8005a48 <_puts_r+0x8c>
 8005a18:	290a      	cmp	r1, #10
 8005a1a:	d015      	beq.n	8005a48 <_puts_r+0x8c>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	6022      	str	r2, [r4, #0]
 8005a22:	7019      	strb	r1, [r3, #0]
 8005a24:	68a3      	ldr	r3, [r4, #8]
 8005a26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	60a3      	str	r3, [r4, #8]
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d1ed      	bne.n	8005a0e <_puts_r+0x52>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	da11      	bge.n	8005a5a <_puts_r+0x9e>
 8005a36:	4622      	mov	r2, r4
 8005a38:	210a      	movs	r1, #10
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 f85f 	bl	8005afe <__swbuf_r>
 8005a40:	3001      	adds	r0, #1
 8005a42:	d0d7      	beq.n	80059f4 <_puts_r+0x38>
 8005a44:	250a      	movs	r5, #10
 8005a46:	e7d7      	b.n	80059f8 <_puts_r+0x3c>
 8005a48:	4622      	mov	r2, r4
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 f857 	bl	8005afe <__swbuf_r>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d1e7      	bne.n	8005a24 <_puts_r+0x68>
 8005a54:	e7ce      	b.n	80059f4 <_puts_r+0x38>
 8005a56:	3e01      	subs	r6, #1
 8005a58:	e7e4      	b.n	8005a24 <_puts_r+0x68>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	6022      	str	r2, [r4, #0]
 8005a60:	220a      	movs	r2, #10
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e7ee      	b.n	8005a44 <_puts_r+0x88>
	...

08005a68 <puts>:
 8005a68:	4b02      	ldr	r3, [pc, #8]	@ (8005a74 <puts+0xc>)
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	f7ff bfa5 	b.w	80059bc <_puts_r>
 8005a72:	bf00      	nop
 8005a74:	2000001c 	.word	0x2000001c

08005a78 <__sread>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a80:	f000 f952 	bl	8005d28 <_read_r>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	bfab      	itete	ge
 8005a88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a8c:	181b      	addge	r3, r3, r0
 8005a8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a92:	bfac      	ite	ge
 8005a94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a96:	81a3      	strhlt	r3, [r4, #12]
 8005a98:	bd10      	pop	{r4, pc}

08005a9a <__swrite>:
 8005a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9e:	461f      	mov	r7, r3
 8005aa0:	898b      	ldrh	r3, [r1, #12]
 8005aa2:	05db      	lsls	r3, r3, #23
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	d505      	bpl.n	8005ab8 <__swrite+0x1e>
 8005aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f000 f926 	bl	8005d04 <_lseek_r>
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005abe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ac2:	81a3      	strh	r3, [r4, #12]
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	4628      	mov	r0, r5
 8005aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ace:	f000 b93d 	b.w	8005d4c <_write_r>

08005ad2 <__sseek>:
 8005ad2:	b510      	push	{r4, lr}
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ada:	f000 f913 	bl	8005d04 <_lseek_r>
 8005ade:	1c43      	adds	r3, r0, #1
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	bf15      	itete	ne
 8005ae4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ae6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005aea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005aee:	81a3      	strheq	r3, [r4, #12]
 8005af0:	bf18      	it	ne
 8005af2:	81a3      	strhne	r3, [r4, #12]
 8005af4:	bd10      	pop	{r4, pc}

08005af6 <__sclose>:
 8005af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afa:	f000 b89d 	b.w	8005c38 <_close_r>

08005afe <__swbuf_r>:
 8005afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b00:	460e      	mov	r6, r1
 8005b02:	4614      	mov	r4, r2
 8005b04:	4605      	mov	r5, r0
 8005b06:	b118      	cbz	r0, 8005b10 <__swbuf_r+0x12>
 8005b08:	6a03      	ldr	r3, [r0, #32]
 8005b0a:	b90b      	cbnz	r3, 8005b10 <__swbuf_r+0x12>
 8005b0c:	f7ff ff0e 	bl	800592c <__sinit>
 8005b10:	69a3      	ldr	r3, [r4, #24]
 8005b12:	60a3      	str	r3, [r4, #8]
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	071a      	lsls	r2, r3, #28
 8005b18:	d501      	bpl.n	8005b1e <__swbuf_r+0x20>
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	b943      	cbnz	r3, 8005b30 <__swbuf_r+0x32>
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 f82b 	bl	8005b7c <__swsetup_r>
 8005b26:	b118      	cbz	r0, 8005b30 <__swbuf_r+0x32>
 8005b28:	f04f 37ff 	mov.w	r7, #4294967295
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	6922      	ldr	r2, [r4, #16]
 8005b34:	1a98      	subs	r0, r3, r2
 8005b36:	6963      	ldr	r3, [r4, #20]
 8005b38:	b2f6      	uxtb	r6, r6
 8005b3a:	4283      	cmp	r3, r0
 8005b3c:	4637      	mov	r7, r6
 8005b3e:	dc05      	bgt.n	8005b4c <__swbuf_r+0x4e>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 fd9c 	bl	8006680 <_fflush_r>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d1ed      	bne.n	8005b28 <__swbuf_r+0x2a>
 8005b4c:	68a3      	ldr	r3, [r4, #8]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	60a3      	str	r3, [r4, #8]
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	6022      	str	r2, [r4, #0]
 8005b58:	701e      	strb	r6, [r3, #0]
 8005b5a:	6962      	ldr	r2, [r4, #20]
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d004      	beq.n	8005b6c <__swbuf_r+0x6e>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	07db      	lsls	r3, r3, #31
 8005b66:	d5e1      	bpl.n	8005b2c <__swbuf_r+0x2e>
 8005b68:	2e0a      	cmp	r6, #10
 8005b6a:	d1df      	bne.n	8005b2c <__swbuf_r+0x2e>
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 fd86 	bl	8006680 <_fflush_r>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d0d9      	beq.n	8005b2c <__swbuf_r+0x2e>
 8005b78:	e7d6      	b.n	8005b28 <__swbuf_r+0x2a>
	...

08005b7c <__swsetup_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4b29      	ldr	r3, [pc, #164]	@ (8005c24 <__swsetup_r+0xa8>)
 8005b80:	4605      	mov	r5, r0
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	460c      	mov	r4, r1
 8005b86:	b118      	cbz	r0, 8005b90 <__swsetup_r+0x14>
 8005b88:	6a03      	ldr	r3, [r0, #32]
 8005b8a:	b90b      	cbnz	r3, 8005b90 <__swsetup_r+0x14>
 8005b8c:	f7ff fece 	bl	800592c <__sinit>
 8005b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b94:	0719      	lsls	r1, r3, #28
 8005b96:	d422      	bmi.n	8005bde <__swsetup_r+0x62>
 8005b98:	06da      	lsls	r2, r3, #27
 8005b9a:	d407      	bmi.n	8005bac <__swsetup_r+0x30>
 8005b9c:	2209      	movs	r2, #9
 8005b9e:	602a      	str	r2, [r5, #0]
 8005ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8005baa:	e033      	b.n	8005c14 <__swsetup_r+0x98>
 8005bac:	0758      	lsls	r0, r3, #29
 8005bae:	d512      	bpl.n	8005bd6 <__swsetup_r+0x5a>
 8005bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bb2:	b141      	cbz	r1, 8005bc6 <__swsetup_r+0x4a>
 8005bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	d002      	beq.n	8005bc2 <__swsetup_r+0x46>
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 f913 	bl	8005de8 <_free_r>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6063      	str	r3, [r4, #4]
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f043 0308 	orr.w	r3, r3, #8
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	b94b      	cbnz	r3, 8005bf6 <__swsetup_r+0x7a>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bec:	d003      	beq.n	8005bf6 <__swsetup_r+0x7a>
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 fd93 	bl	800671c <__smakebuf_r>
 8005bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bfa:	f013 0201 	ands.w	r2, r3, #1
 8005bfe:	d00a      	beq.n	8005c16 <__swsetup_r+0x9a>
 8005c00:	2200      	movs	r2, #0
 8005c02:	60a2      	str	r2, [r4, #8]
 8005c04:	6962      	ldr	r2, [r4, #20]
 8005c06:	4252      	negs	r2, r2
 8005c08:	61a2      	str	r2, [r4, #24]
 8005c0a:	6922      	ldr	r2, [r4, #16]
 8005c0c:	b942      	cbnz	r2, 8005c20 <__swsetup_r+0xa4>
 8005c0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c12:	d1c5      	bne.n	8005ba0 <__swsetup_r+0x24>
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	0799      	lsls	r1, r3, #30
 8005c18:	bf58      	it	pl
 8005c1a:	6962      	ldrpl	r2, [r4, #20]
 8005c1c:	60a2      	str	r2, [r4, #8]
 8005c1e:	e7f4      	b.n	8005c0a <__swsetup_r+0x8e>
 8005c20:	2000      	movs	r0, #0
 8005c22:	e7f7      	b.n	8005c14 <__swsetup_r+0x98>
 8005c24:	2000001c 	.word	0x2000001c

08005c28 <memset>:
 8005c28:	4402      	add	r2, r0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d100      	bne.n	8005c32 <memset+0xa>
 8005c30:	4770      	bx	lr
 8005c32:	f803 1b01 	strb.w	r1, [r3], #1
 8005c36:	e7f9      	b.n	8005c2c <memset+0x4>

08005c38 <_close_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4d06      	ldr	r5, [pc, #24]	@ (8005c54 <_close_r+0x1c>)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4604      	mov	r4, r0
 8005c40:	4608      	mov	r0, r1
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	f7fb f811 	bl	8000c6a <_close>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_close_r+0x1a>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_close_r+0x1a>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	20002b18 	.word	0x20002b18

08005c58 <_reclaim_reent>:
 8005c58:	4b29      	ldr	r3, [pc, #164]	@ (8005d00 <_reclaim_reent+0xa8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4283      	cmp	r3, r0
 8005c5e:	b570      	push	{r4, r5, r6, lr}
 8005c60:	4604      	mov	r4, r0
 8005c62:	d04b      	beq.n	8005cfc <_reclaim_reent+0xa4>
 8005c64:	69c3      	ldr	r3, [r0, #28]
 8005c66:	b1ab      	cbz	r3, 8005c94 <_reclaim_reent+0x3c>
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	b16b      	cbz	r3, 8005c88 <_reclaim_reent+0x30>
 8005c6c:	2500      	movs	r5, #0
 8005c6e:	69e3      	ldr	r3, [r4, #28]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	5959      	ldr	r1, [r3, r5]
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d13b      	bne.n	8005cf0 <_reclaim_reent+0x98>
 8005c78:	3504      	adds	r5, #4
 8005c7a:	2d80      	cmp	r5, #128	@ 0x80
 8005c7c:	d1f7      	bne.n	8005c6e <_reclaim_reent+0x16>
 8005c7e:	69e3      	ldr	r3, [r4, #28]
 8005c80:	4620      	mov	r0, r4
 8005c82:	68d9      	ldr	r1, [r3, #12]
 8005c84:	f000 f8b0 	bl	8005de8 <_free_r>
 8005c88:	69e3      	ldr	r3, [r4, #28]
 8005c8a:	6819      	ldr	r1, [r3, #0]
 8005c8c:	b111      	cbz	r1, 8005c94 <_reclaim_reent+0x3c>
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f000 f8aa 	bl	8005de8 <_free_r>
 8005c94:	6961      	ldr	r1, [r4, #20]
 8005c96:	b111      	cbz	r1, 8005c9e <_reclaim_reent+0x46>
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 f8a5 	bl	8005de8 <_free_r>
 8005c9e:	69e1      	ldr	r1, [r4, #28]
 8005ca0:	b111      	cbz	r1, 8005ca8 <_reclaim_reent+0x50>
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f000 f8a0 	bl	8005de8 <_free_r>
 8005ca8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005caa:	b111      	cbz	r1, 8005cb2 <_reclaim_reent+0x5a>
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 f89b 	bl	8005de8 <_free_r>
 8005cb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cb4:	b111      	cbz	r1, 8005cbc <_reclaim_reent+0x64>
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 f896 	bl	8005de8 <_free_r>
 8005cbc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005cbe:	b111      	cbz	r1, 8005cc6 <_reclaim_reent+0x6e>
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f000 f891 	bl	8005de8 <_free_r>
 8005cc6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005cc8:	b111      	cbz	r1, 8005cd0 <_reclaim_reent+0x78>
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 f88c 	bl	8005de8 <_free_r>
 8005cd0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005cd2:	b111      	cbz	r1, 8005cda <_reclaim_reent+0x82>
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 f887 	bl	8005de8 <_free_r>
 8005cda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005cdc:	b111      	cbz	r1, 8005ce4 <_reclaim_reent+0x8c>
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f000 f882 	bl	8005de8 <_free_r>
 8005ce4:	6a23      	ldr	r3, [r4, #32]
 8005ce6:	b14b      	cbz	r3, 8005cfc <_reclaim_reent+0xa4>
 8005ce8:	4620      	mov	r0, r4
 8005cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005cee:	4718      	bx	r3
 8005cf0:	680e      	ldr	r6, [r1, #0]
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 f878 	bl	8005de8 <_free_r>
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	e7bb      	b.n	8005c74 <_reclaim_reent+0x1c>
 8005cfc:	bd70      	pop	{r4, r5, r6, pc}
 8005cfe:	bf00      	nop
 8005d00:	2000001c 	.word	0x2000001c

08005d04 <_lseek_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d07      	ldr	r5, [pc, #28]	@ (8005d24 <_lseek_r+0x20>)
 8005d08:	4604      	mov	r4, r0
 8005d0a:	4608      	mov	r0, r1
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	602a      	str	r2, [r5, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7fa ffd0 	bl	8000cb8 <_lseek>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_lseek_r+0x1e>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_lseek_r+0x1e>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20002b18 	.word	0x20002b18

08005d28 <_read_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d07      	ldr	r5, [pc, #28]	@ (8005d48 <_read_r+0x20>)
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	4608      	mov	r0, r1
 8005d30:	4611      	mov	r1, r2
 8005d32:	2200      	movs	r2, #0
 8005d34:	602a      	str	r2, [r5, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f7fa ff5e 	bl	8000bf8 <_read>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_read_r+0x1e>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_read_r+0x1e>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	20002b18 	.word	0x20002b18

08005d4c <_write_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d07      	ldr	r5, [pc, #28]	@ (8005d6c <_write_r+0x20>)
 8005d50:	4604      	mov	r4, r0
 8005d52:	4608      	mov	r0, r1
 8005d54:	4611      	mov	r1, r2
 8005d56:	2200      	movs	r2, #0
 8005d58:	602a      	str	r2, [r5, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f7fa ff69 	bl	8000c32 <_write>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_write_r+0x1e>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_write_r+0x1e>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	20002b18 	.word	0x20002b18

08005d70 <__errno>:
 8005d70:	4b01      	ldr	r3, [pc, #4]	@ (8005d78 <__errno+0x8>)
 8005d72:	6818      	ldr	r0, [r3, #0]
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	2000001c 	.word	0x2000001c

08005d7c <__libc_init_array>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005db4 <__libc_init_array+0x38>)
 8005d80:	4c0d      	ldr	r4, [pc, #52]	@ (8005db8 <__libc_init_array+0x3c>)
 8005d82:	1b64      	subs	r4, r4, r5
 8005d84:	10a4      	asrs	r4, r4, #2
 8005d86:	2600      	movs	r6, #0
 8005d88:	42a6      	cmp	r6, r4
 8005d8a:	d109      	bne.n	8005da0 <__libc_init_array+0x24>
 8005d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005dbc <__libc_init_array+0x40>)
 8005d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005dc0 <__libc_init_array+0x44>)
 8005d90:	f000 fd32 	bl	80067f8 <_init>
 8005d94:	1b64      	subs	r4, r4, r5
 8005d96:	10a4      	asrs	r4, r4, #2
 8005d98:	2600      	movs	r6, #0
 8005d9a:	42a6      	cmp	r6, r4
 8005d9c:	d105      	bne.n	8005daa <__libc_init_array+0x2e>
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da4:	4798      	blx	r3
 8005da6:	3601      	adds	r6, #1
 8005da8:	e7ee      	b.n	8005d88 <__libc_init_array+0xc>
 8005daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dae:	4798      	blx	r3
 8005db0:	3601      	adds	r6, #1
 8005db2:	e7f2      	b.n	8005d9a <__libc_init_array+0x1e>
 8005db4:	080069c8 	.word	0x080069c8
 8005db8:	080069c8 	.word	0x080069c8
 8005dbc:	080069c8 	.word	0x080069c8
 8005dc0:	080069cc 	.word	0x080069cc

08005dc4 <__retarget_lock_init_recursive>:
 8005dc4:	4770      	bx	lr

08005dc6 <__retarget_lock_acquire_recursive>:
 8005dc6:	4770      	bx	lr

08005dc8 <__retarget_lock_release_recursive>:
 8005dc8:	4770      	bx	lr

08005dca <memcpy>:
 8005dca:	440a      	add	r2, r1
 8005dcc:	4291      	cmp	r1, r2
 8005dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dd2:	d100      	bne.n	8005dd6 <memcpy+0xc>
 8005dd4:	4770      	bx	lr
 8005dd6:	b510      	push	{r4, lr}
 8005dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005de0:	4291      	cmp	r1, r2
 8005de2:	d1f9      	bne.n	8005dd8 <memcpy+0xe>
 8005de4:	bd10      	pop	{r4, pc}
	...

08005de8 <_free_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4605      	mov	r5, r0
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d041      	beq.n	8005e74 <_free_r+0x8c>
 8005df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df4:	1f0c      	subs	r4, r1, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfb8      	it	lt
 8005dfa:	18e4      	addlt	r4, r4, r3
 8005dfc:	f000 f8e0 	bl	8005fc0 <__malloc_lock>
 8005e00:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <_free_r+0x90>)
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	b933      	cbnz	r3, 8005e14 <_free_r+0x2c>
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	6014      	str	r4, [r2, #0]
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e10:	f000 b8dc 	b.w	8005fcc <__malloc_unlock>
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d908      	bls.n	8005e2a <_free_r+0x42>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	1821      	adds	r1, r4, r0
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf01      	itttt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	1809      	addeq	r1, r1, r0
 8005e26:	6021      	streq	r1, [r4, #0]
 8005e28:	e7ed      	b.n	8005e06 <_free_r+0x1e>
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b10b      	cbz	r3, 8005e34 <_free_r+0x4c>
 8005e30:	42a3      	cmp	r3, r4
 8005e32:	d9fa      	bls.n	8005e2a <_free_r+0x42>
 8005e34:	6811      	ldr	r1, [r2, #0]
 8005e36:	1850      	adds	r0, r2, r1
 8005e38:	42a0      	cmp	r0, r4
 8005e3a:	d10b      	bne.n	8005e54 <_free_r+0x6c>
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	4401      	add	r1, r0
 8005e40:	1850      	adds	r0, r2, r1
 8005e42:	4283      	cmp	r3, r0
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	d1e0      	bne.n	8005e0a <_free_r+0x22>
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	6053      	str	r3, [r2, #4]
 8005e4e:	4408      	add	r0, r1
 8005e50:	6010      	str	r0, [r2, #0]
 8005e52:	e7da      	b.n	8005e0a <_free_r+0x22>
 8005e54:	d902      	bls.n	8005e5c <_free_r+0x74>
 8005e56:	230c      	movs	r3, #12
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	e7d6      	b.n	8005e0a <_free_r+0x22>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	1821      	adds	r1, r4, r0
 8005e60:	428b      	cmp	r3, r1
 8005e62:	bf04      	itt	eq
 8005e64:	6819      	ldreq	r1, [r3, #0]
 8005e66:	685b      	ldreq	r3, [r3, #4]
 8005e68:	6063      	str	r3, [r4, #4]
 8005e6a:	bf04      	itt	eq
 8005e6c:	1809      	addeq	r1, r1, r0
 8005e6e:	6021      	streq	r1, [r4, #0]
 8005e70:	6054      	str	r4, [r2, #4]
 8005e72:	e7ca      	b.n	8005e0a <_free_r+0x22>
 8005e74:	bd38      	pop	{r3, r4, r5, pc}
 8005e76:	bf00      	nop
 8005e78:	20002b24 	.word	0x20002b24

08005e7c <sbrk_aligned>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8005ebc <sbrk_aligned+0x40>)
 8005e80:	460c      	mov	r4, r1
 8005e82:	6831      	ldr	r1, [r6, #0]
 8005e84:	4605      	mov	r5, r0
 8005e86:	b911      	cbnz	r1, 8005e8e <sbrk_aligned+0x12>
 8005e88:	f000 fca6 	bl	80067d8 <_sbrk_r>
 8005e8c:	6030      	str	r0, [r6, #0]
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 fca1 	bl	80067d8 <_sbrk_r>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d103      	bne.n	8005ea2 <sbrk_aligned+0x26>
 8005e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
 8005ea2:	1cc4      	adds	r4, r0, #3
 8005ea4:	f024 0403 	bic.w	r4, r4, #3
 8005ea8:	42a0      	cmp	r0, r4
 8005eaa:	d0f8      	beq.n	8005e9e <sbrk_aligned+0x22>
 8005eac:	1a21      	subs	r1, r4, r0
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f000 fc92 	bl	80067d8 <_sbrk_r>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d1f2      	bne.n	8005e9e <sbrk_aligned+0x22>
 8005eb8:	e7ef      	b.n	8005e9a <sbrk_aligned+0x1e>
 8005eba:	bf00      	nop
 8005ebc:	20002b20 	.word	0x20002b20

08005ec0 <_malloc_r>:
 8005ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	1ccd      	adds	r5, r1, #3
 8005ec6:	f025 0503 	bic.w	r5, r5, #3
 8005eca:	3508      	adds	r5, #8
 8005ecc:	2d0c      	cmp	r5, #12
 8005ece:	bf38      	it	cc
 8005ed0:	250c      	movcc	r5, #12
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	db01      	blt.n	8005edc <_malloc_r+0x1c>
 8005ed8:	42a9      	cmp	r1, r5
 8005eda:	d904      	bls.n	8005ee6 <_malloc_r+0x26>
 8005edc:	230c      	movs	r3, #12
 8005ede:	6033      	str	r3, [r6, #0]
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fbc <_malloc_r+0xfc>
 8005eea:	f000 f869 	bl	8005fc0 <__malloc_lock>
 8005eee:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef2:	461c      	mov	r4, r3
 8005ef4:	bb44      	cbnz	r4, 8005f48 <_malloc_r+0x88>
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f7ff ffbf 	bl	8005e7c <sbrk_aligned>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	4604      	mov	r4, r0
 8005f02:	d158      	bne.n	8005fb6 <_malloc_r+0xf6>
 8005f04:	f8d8 4000 	ldr.w	r4, [r8]
 8005f08:	4627      	mov	r7, r4
 8005f0a:	2f00      	cmp	r7, #0
 8005f0c:	d143      	bne.n	8005f96 <_malloc_r+0xd6>
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	d04b      	beq.n	8005faa <_malloc_r+0xea>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	4639      	mov	r1, r7
 8005f16:	4630      	mov	r0, r6
 8005f18:	eb04 0903 	add.w	r9, r4, r3
 8005f1c:	f000 fc5c 	bl	80067d8 <_sbrk_r>
 8005f20:	4581      	cmp	r9, r0
 8005f22:	d142      	bne.n	8005faa <_malloc_r+0xea>
 8005f24:	6821      	ldr	r1, [r4, #0]
 8005f26:	1a6d      	subs	r5, r5, r1
 8005f28:	4629      	mov	r1, r5
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7ff ffa6 	bl	8005e7c <sbrk_aligned>
 8005f30:	3001      	adds	r0, #1
 8005f32:	d03a      	beq.n	8005faa <_malloc_r+0xea>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	442b      	add	r3, r5
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	bb62      	cbnz	r2, 8005f9c <_malloc_r+0xdc>
 8005f42:	f8c8 7000 	str.w	r7, [r8]
 8005f46:	e00f      	b.n	8005f68 <_malloc_r+0xa8>
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	1b52      	subs	r2, r2, r5
 8005f4c:	d420      	bmi.n	8005f90 <_malloc_r+0xd0>
 8005f4e:	2a0b      	cmp	r2, #11
 8005f50:	d917      	bls.n	8005f82 <_malloc_r+0xc2>
 8005f52:	1961      	adds	r1, r4, r5
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	6025      	str	r5, [r4, #0]
 8005f58:	bf18      	it	ne
 8005f5a:	6059      	strne	r1, [r3, #4]
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	bf08      	it	eq
 8005f60:	f8c8 1000 	streq.w	r1, [r8]
 8005f64:	5162      	str	r2, [r4, r5]
 8005f66:	604b      	str	r3, [r1, #4]
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 f82f 	bl	8005fcc <__malloc_unlock>
 8005f6e:	f104 000b 	add.w	r0, r4, #11
 8005f72:	1d23      	adds	r3, r4, #4
 8005f74:	f020 0007 	bic.w	r0, r0, #7
 8005f78:	1ac2      	subs	r2, r0, r3
 8005f7a:	bf1c      	itt	ne
 8005f7c:	1a1b      	subne	r3, r3, r0
 8005f7e:	50a3      	strne	r3, [r4, r2]
 8005f80:	e7af      	b.n	8005ee2 <_malloc_r+0x22>
 8005f82:	6862      	ldr	r2, [r4, #4]
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	bf0c      	ite	eq
 8005f88:	f8c8 2000 	streq.w	r2, [r8]
 8005f8c:	605a      	strne	r2, [r3, #4]
 8005f8e:	e7eb      	b.n	8005f68 <_malloc_r+0xa8>
 8005f90:	4623      	mov	r3, r4
 8005f92:	6864      	ldr	r4, [r4, #4]
 8005f94:	e7ae      	b.n	8005ef4 <_malloc_r+0x34>
 8005f96:	463c      	mov	r4, r7
 8005f98:	687f      	ldr	r7, [r7, #4]
 8005f9a:	e7b6      	b.n	8005f0a <_malloc_r+0x4a>
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	d1fb      	bne.n	8005f9c <_malloc_r+0xdc>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	6053      	str	r3, [r2, #4]
 8005fa8:	e7de      	b.n	8005f68 <_malloc_r+0xa8>
 8005faa:	230c      	movs	r3, #12
 8005fac:	6033      	str	r3, [r6, #0]
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f000 f80c 	bl	8005fcc <__malloc_unlock>
 8005fb4:	e794      	b.n	8005ee0 <_malloc_r+0x20>
 8005fb6:	6005      	str	r5, [r0, #0]
 8005fb8:	e7d6      	b.n	8005f68 <_malloc_r+0xa8>
 8005fba:	bf00      	nop
 8005fbc:	20002b24 	.word	0x20002b24

08005fc0 <__malloc_lock>:
 8005fc0:	4801      	ldr	r0, [pc, #4]	@ (8005fc8 <__malloc_lock+0x8>)
 8005fc2:	f7ff bf00 	b.w	8005dc6 <__retarget_lock_acquire_recursive>
 8005fc6:	bf00      	nop
 8005fc8:	20002b1c 	.word	0x20002b1c

08005fcc <__malloc_unlock>:
 8005fcc:	4801      	ldr	r0, [pc, #4]	@ (8005fd4 <__malloc_unlock+0x8>)
 8005fce:	f7ff befb 	b.w	8005dc8 <__retarget_lock_release_recursive>
 8005fd2:	bf00      	nop
 8005fd4:	20002b1c 	.word	0x20002b1c

08005fd8 <__sfputc_r>:
 8005fd8:	6893      	ldr	r3, [r2, #8]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	b410      	push	{r4}
 8005fe0:	6093      	str	r3, [r2, #8]
 8005fe2:	da08      	bge.n	8005ff6 <__sfputc_r+0x1e>
 8005fe4:	6994      	ldr	r4, [r2, #24]
 8005fe6:	42a3      	cmp	r3, r4
 8005fe8:	db01      	blt.n	8005fee <__sfputc_r+0x16>
 8005fea:	290a      	cmp	r1, #10
 8005fec:	d103      	bne.n	8005ff6 <__sfputc_r+0x1e>
 8005fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff2:	f7ff bd84 	b.w	8005afe <__swbuf_r>
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	1c58      	adds	r0, r3, #1
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	7019      	strb	r1, [r3, #0]
 8005ffe:	4608      	mov	r0, r1
 8006000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006004:	4770      	bx	lr

08006006 <__sfputs_r>:
 8006006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006008:	4606      	mov	r6, r0
 800600a:	460f      	mov	r7, r1
 800600c:	4614      	mov	r4, r2
 800600e:	18d5      	adds	r5, r2, r3
 8006010:	42ac      	cmp	r4, r5
 8006012:	d101      	bne.n	8006018 <__sfputs_r+0x12>
 8006014:	2000      	movs	r0, #0
 8006016:	e007      	b.n	8006028 <__sfputs_r+0x22>
 8006018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800601c:	463a      	mov	r2, r7
 800601e:	4630      	mov	r0, r6
 8006020:	f7ff ffda 	bl	8005fd8 <__sfputc_r>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d1f3      	bne.n	8006010 <__sfputs_r+0xa>
 8006028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800602c <_vfiprintf_r>:
 800602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	460d      	mov	r5, r1
 8006032:	b09d      	sub	sp, #116	@ 0x74
 8006034:	4614      	mov	r4, r2
 8006036:	4698      	mov	r8, r3
 8006038:	4606      	mov	r6, r0
 800603a:	b118      	cbz	r0, 8006044 <_vfiprintf_r+0x18>
 800603c:	6a03      	ldr	r3, [r0, #32]
 800603e:	b90b      	cbnz	r3, 8006044 <_vfiprintf_r+0x18>
 8006040:	f7ff fc74 	bl	800592c <__sinit>
 8006044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006046:	07d9      	lsls	r1, r3, #31
 8006048:	d405      	bmi.n	8006056 <_vfiprintf_r+0x2a>
 800604a:	89ab      	ldrh	r3, [r5, #12]
 800604c:	059a      	lsls	r2, r3, #22
 800604e:	d402      	bmi.n	8006056 <_vfiprintf_r+0x2a>
 8006050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006052:	f7ff feb8 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 8006056:	89ab      	ldrh	r3, [r5, #12]
 8006058:	071b      	lsls	r3, r3, #28
 800605a:	d501      	bpl.n	8006060 <_vfiprintf_r+0x34>
 800605c:	692b      	ldr	r3, [r5, #16]
 800605e:	b99b      	cbnz	r3, 8006088 <_vfiprintf_r+0x5c>
 8006060:	4629      	mov	r1, r5
 8006062:	4630      	mov	r0, r6
 8006064:	f7ff fd8a 	bl	8005b7c <__swsetup_r>
 8006068:	b170      	cbz	r0, 8006088 <_vfiprintf_r+0x5c>
 800606a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800606c:	07dc      	lsls	r4, r3, #31
 800606e:	d504      	bpl.n	800607a <_vfiprintf_r+0x4e>
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	b01d      	add	sp, #116	@ 0x74
 8006076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607a:	89ab      	ldrh	r3, [r5, #12]
 800607c:	0598      	lsls	r0, r3, #22
 800607e:	d4f7      	bmi.n	8006070 <_vfiprintf_r+0x44>
 8006080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006082:	f7ff fea1 	bl	8005dc8 <__retarget_lock_release_recursive>
 8006086:	e7f3      	b.n	8006070 <_vfiprintf_r+0x44>
 8006088:	2300      	movs	r3, #0
 800608a:	9309      	str	r3, [sp, #36]	@ 0x24
 800608c:	2320      	movs	r3, #32
 800608e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006092:	f8cd 800c 	str.w	r8, [sp, #12]
 8006096:	2330      	movs	r3, #48	@ 0x30
 8006098:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006248 <_vfiprintf_r+0x21c>
 800609c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060a0:	f04f 0901 	mov.w	r9, #1
 80060a4:	4623      	mov	r3, r4
 80060a6:	469a      	mov	sl, r3
 80060a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ac:	b10a      	cbz	r2, 80060b2 <_vfiprintf_r+0x86>
 80060ae:	2a25      	cmp	r2, #37	@ 0x25
 80060b0:	d1f9      	bne.n	80060a6 <_vfiprintf_r+0x7a>
 80060b2:	ebba 0b04 	subs.w	fp, sl, r4
 80060b6:	d00b      	beq.n	80060d0 <_vfiprintf_r+0xa4>
 80060b8:	465b      	mov	r3, fp
 80060ba:	4622      	mov	r2, r4
 80060bc:	4629      	mov	r1, r5
 80060be:	4630      	mov	r0, r6
 80060c0:	f7ff ffa1 	bl	8006006 <__sfputs_r>
 80060c4:	3001      	adds	r0, #1
 80060c6:	f000 80a7 	beq.w	8006218 <_vfiprintf_r+0x1ec>
 80060ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060cc:	445a      	add	r2, fp
 80060ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80060d0:	f89a 3000 	ldrb.w	r3, [sl]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 809f 	beq.w	8006218 <_vfiprintf_r+0x1ec>
 80060da:	2300      	movs	r3, #0
 80060dc:	f04f 32ff 	mov.w	r2, #4294967295
 80060e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e4:	f10a 0a01 	add.w	sl, sl, #1
 80060e8:	9304      	str	r3, [sp, #16]
 80060ea:	9307      	str	r3, [sp, #28]
 80060ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80060f2:	4654      	mov	r4, sl
 80060f4:	2205      	movs	r2, #5
 80060f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fa:	4853      	ldr	r0, [pc, #332]	@ (8006248 <_vfiprintf_r+0x21c>)
 80060fc:	f7fa f890 	bl	8000220 <memchr>
 8006100:	9a04      	ldr	r2, [sp, #16]
 8006102:	b9d8      	cbnz	r0, 800613c <_vfiprintf_r+0x110>
 8006104:	06d1      	lsls	r1, r2, #27
 8006106:	bf44      	itt	mi
 8006108:	2320      	movmi	r3, #32
 800610a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800610e:	0713      	lsls	r3, r2, #28
 8006110:	bf44      	itt	mi
 8006112:	232b      	movmi	r3, #43	@ 0x2b
 8006114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006118:	f89a 3000 	ldrb.w	r3, [sl]
 800611c:	2b2a      	cmp	r3, #42	@ 0x2a
 800611e:	d015      	beq.n	800614c <_vfiprintf_r+0x120>
 8006120:	9a07      	ldr	r2, [sp, #28]
 8006122:	4654      	mov	r4, sl
 8006124:	2000      	movs	r0, #0
 8006126:	f04f 0c0a 	mov.w	ip, #10
 800612a:	4621      	mov	r1, r4
 800612c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006130:	3b30      	subs	r3, #48	@ 0x30
 8006132:	2b09      	cmp	r3, #9
 8006134:	d94b      	bls.n	80061ce <_vfiprintf_r+0x1a2>
 8006136:	b1b0      	cbz	r0, 8006166 <_vfiprintf_r+0x13a>
 8006138:	9207      	str	r2, [sp, #28]
 800613a:	e014      	b.n	8006166 <_vfiprintf_r+0x13a>
 800613c:	eba0 0308 	sub.w	r3, r0, r8
 8006140:	fa09 f303 	lsl.w	r3, r9, r3
 8006144:	4313      	orrs	r3, r2
 8006146:	9304      	str	r3, [sp, #16]
 8006148:	46a2      	mov	sl, r4
 800614a:	e7d2      	b.n	80060f2 <_vfiprintf_r+0xc6>
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	1d19      	adds	r1, r3, #4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	9103      	str	r1, [sp, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	bfbb      	ittet	lt
 8006158:	425b      	neglt	r3, r3
 800615a:	f042 0202 	orrlt.w	r2, r2, #2
 800615e:	9307      	strge	r3, [sp, #28]
 8006160:	9307      	strlt	r3, [sp, #28]
 8006162:	bfb8      	it	lt
 8006164:	9204      	strlt	r2, [sp, #16]
 8006166:	7823      	ldrb	r3, [r4, #0]
 8006168:	2b2e      	cmp	r3, #46	@ 0x2e
 800616a:	d10a      	bne.n	8006182 <_vfiprintf_r+0x156>
 800616c:	7863      	ldrb	r3, [r4, #1]
 800616e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006170:	d132      	bne.n	80061d8 <_vfiprintf_r+0x1ac>
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	1d1a      	adds	r2, r3, #4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	9203      	str	r2, [sp, #12]
 800617a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800617e:	3402      	adds	r4, #2
 8006180:	9305      	str	r3, [sp, #20]
 8006182:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006258 <_vfiprintf_r+0x22c>
 8006186:	7821      	ldrb	r1, [r4, #0]
 8006188:	2203      	movs	r2, #3
 800618a:	4650      	mov	r0, sl
 800618c:	f7fa f848 	bl	8000220 <memchr>
 8006190:	b138      	cbz	r0, 80061a2 <_vfiprintf_r+0x176>
 8006192:	9b04      	ldr	r3, [sp, #16]
 8006194:	eba0 000a 	sub.w	r0, r0, sl
 8006198:	2240      	movs	r2, #64	@ 0x40
 800619a:	4082      	lsls	r2, r0
 800619c:	4313      	orrs	r3, r2
 800619e:	3401      	adds	r4, #1
 80061a0:	9304      	str	r3, [sp, #16]
 80061a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a6:	4829      	ldr	r0, [pc, #164]	@ (800624c <_vfiprintf_r+0x220>)
 80061a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061ac:	2206      	movs	r2, #6
 80061ae:	f7fa f837 	bl	8000220 <memchr>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d03f      	beq.n	8006236 <_vfiprintf_r+0x20a>
 80061b6:	4b26      	ldr	r3, [pc, #152]	@ (8006250 <_vfiprintf_r+0x224>)
 80061b8:	bb1b      	cbnz	r3, 8006202 <_vfiprintf_r+0x1d6>
 80061ba:	9b03      	ldr	r3, [sp, #12]
 80061bc:	3307      	adds	r3, #7
 80061be:	f023 0307 	bic.w	r3, r3, #7
 80061c2:	3308      	adds	r3, #8
 80061c4:	9303      	str	r3, [sp, #12]
 80061c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c8:	443b      	add	r3, r7
 80061ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80061cc:	e76a      	b.n	80060a4 <_vfiprintf_r+0x78>
 80061ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d2:	460c      	mov	r4, r1
 80061d4:	2001      	movs	r0, #1
 80061d6:	e7a8      	b.n	800612a <_vfiprintf_r+0xfe>
 80061d8:	2300      	movs	r3, #0
 80061da:	3401      	adds	r4, #1
 80061dc:	9305      	str	r3, [sp, #20]
 80061de:	4619      	mov	r1, r3
 80061e0:	f04f 0c0a 	mov.w	ip, #10
 80061e4:	4620      	mov	r0, r4
 80061e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ea:	3a30      	subs	r2, #48	@ 0x30
 80061ec:	2a09      	cmp	r2, #9
 80061ee:	d903      	bls.n	80061f8 <_vfiprintf_r+0x1cc>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0c6      	beq.n	8006182 <_vfiprintf_r+0x156>
 80061f4:	9105      	str	r1, [sp, #20]
 80061f6:	e7c4      	b.n	8006182 <_vfiprintf_r+0x156>
 80061f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80061fc:	4604      	mov	r4, r0
 80061fe:	2301      	movs	r3, #1
 8006200:	e7f0      	b.n	80061e4 <_vfiprintf_r+0x1b8>
 8006202:	ab03      	add	r3, sp, #12
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	462a      	mov	r2, r5
 8006208:	4b12      	ldr	r3, [pc, #72]	@ (8006254 <_vfiprintf_r+0x228>)
 800620a:	a904      	add	r1, sp, #16
 800620c:	4630      	mov	r0, r6
 800620e:	f3af 8000 	nop.w
 8006212:	4607      	mov	r7, r0
 8006214:	1c78      	adds	r0, r7, #1
 8006216:	d1d6      	bne.n	80061c6 <_vfiprintf_r+0x19a>
 8006218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800621a:	07d9      	lsls	r1, r3, #31
 800621c:	d405      	bmi.n	800622a <_vfiprintf_r+0x1fe>
 800621e:	89ab      	ldrh	r3, [r5, #12]
 8006220:	059a      	lsls	r2, r3, #22
 8006222:	d402      	bmi.n	800622a <_vfiprintf_r+0x1fe>
 8006224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006226:	f7ff fdcf 	bl	8005dc8 <__retarget_lock_release_recursive>
 800622a:	89ab      	ldrh	r3, [r5, #12]
 800622c:	065b      	lsls	r3, r3, #25
 800622e:	f53f af1f 	bmi.w	8006070 <_vfiprintf_r+0x44>
 8006232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006234:	e71e      	b.n	8006074 <_vfiprintf_r+0x48>
 8006236:	ab03      	add	r3, sp, #12
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	462a      	mov	r2, r5
 800623c:	4b05      	ldr	r3, [pc, #20]	@ (8006254 <_vfiprintf_r+0x228>)
 800623e:	a904      	add	r1, sp, #16
 8006240:	4630      	mov	r0, r6
 8006242:	f000 f879 	bl	8006338 <_printf_i>
 8006246:	e7e4      	b.n	8006212 <_vfiprintf_r+0x1e6>
 8006248:	0800698c 	.word	0x0800698c
 800624c:	08006996 	.word	0x08006996
 8006250:	00000000 	.word	0x00000000
 8006254:	08006007 	.word	0x08006007
 8006258:	08006992 	.word	0x08006992

0800625c <_printf_common>:
 800625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	4616      	mov	r6, r2
 8006262:	4698      	mov	r8, r3
 8006264:	688a      	ldr	r2, [r1, #8]
 8006266:	690b      	ldr	r3, [r1, #16]
 8006268:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800626c:	4293      	cmp	r3, r2
 800626e:	bfb8      	it	lt
 8006270:	4613      	movlt	r3, r2
 8006272:	6033      	str	r3, [r6, #0]
 8006274:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006278:	4607      	mov	r7, r0
 800627a:	460c      	mov	r4, r1
 800627c:	b10a      	cbz	r2, 8006282 <_printf_common+0x26>
 800627e:	3301      	adds	r3, #1
 8006280:	6033      	str	r3, [r6, #0]
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	0699      	lsls	r1, r3, #26
 8006286:	bf42      	ittt	mi
 8006288:	6833      	ldrmi	r3, [r6, #0]
 800628a:	3302      	addmi	r3, #2
 800628c:	6033      	strmi	r3, [r6, #0]
 800628e:	6825      	ldr	r5, [r4, #0]
 8006290:	f015 0506 	ands.w	r5, r5, #6
 8006294:	d106      	bne.n	80062a4 <_printf_common+0x48>
 8006296:	f104 0a19 	add.w	sl, r4, #25
 800629a:	68e3      	ldr	r3, [r4, #12]
 800629c:	6832      	ldr	r2, [r6, #0]
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	42ab      	cmp	r3, r5
 80062a2:	dc26      	bgt.n	80062f2 <_printf_common+0x96>
 80062a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062a8:	6822      	ldr	r2, [r4, #0]
 80062aa:	3b00      	subs	r3, #0
 80062ac:	bf18      	it	ne
 80062ae:	2301      	movne	r3, #1
 80062b0:	0692      	lsls	r2, r2, #26
 80062b2:	d42b      	bmi.n	800630c <_printf_common+0xb0>
 80062b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062b8:	4641      	mov	r1, r8
 80062ba:	4638      	mov	r0, r7
 80062bc:	47c8      	blx	r9
 80062be:	3001      	adds	r0, #1
 80062c0:	d01e      	beq.n	8006300 <_printf_common+0xa4>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	6922      	ldr	r2, [r4, #16]
 80062c6:	f003 0306 	and.w	r3, r3, #6
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	bf02      	ittt	eq
 80062ce:	68e5      	ldreq	r5, [r4, #12]
 80062d0:	6833      	ldreq	r3, [r6, #0]
 80062d2:	1aed      	subeq	r5, r5, r3
 80062d4:	68a3      	ldr	r3, [r4, #8]
 80062d6:	bf0c      	ite	eq
 80062d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062dc:	2500      	movne	r5, #0
 80062de:	4293      	cmp	r3, r2
 80062e0:	bfc4      	itt	gt
 80062e2:	1a9b      	subgt	r3, r3, r2
 80062e4:	18ed      	addgt	r5, r5, r3
 80062e6:	2600      	movs	r6, #0
 80062e8:	341a      	adds	r4, #26
 80062ea:	42b5      	cmp	r5, r6
 80062ec:	d11a      	bne.n	8006324 <_printf_common+0xc8>
 80062ee:	2000      	movs	r0, #0
 80062f0:	e008      	b.n	8006304 <_printf_common+0xa8>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4652      	mov	r2, sl
 80062f6:	4641      	mov	r1, r8
 80062f8:	4638      	mov	r0, r7
 80062fa:	47c8      	blx	r9
 80062fc:	3001      	adds	r0, #1
 80062fe:	d103      	bne.n	8006308 <_printf_common+0xac>
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006308:	3501      	adds	r5, #1
 800630a:	e7c6      	b.n	800629a <_printf_common+0x3e>
 800630c:	18e1      	adds	r1, r4, r3
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	2030      	movs	r0, #48	@ 0x30
 8006312:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006316:	4422      	add	r2, r4
 8006318:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800631c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006320:	3302      	adds	r3, #2
 8006322:	e7c7      	b.n	80062b4 <_printf_common+0x58>
 8006324:	2301      	movs	r3, #1
 8006326:	4622      	mov	r2, r4
 8006328:	4641      	mov	r1, r8
 800632a:	4638      	mov	r0, r7
 800632c:	47c8      	blx	r9
 800632e:	3001      	adds	r0, #1
 8006330:	d0e6      	beq.n	8006300 <_printf_common+0xa4>
 8006332:	3601      	adds	r6, #1
 8006334:	e7d9      	b.n	80062ea <_printf_common+0x8e>
	...

08006338 <_printf_i>:
 8006338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	7e0f      	ldrb	r7, [r1, #24]
 800633e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006340:	2f78      	cmp	r7, #120	@ 0x78
 8006342:	4691      	mov	r9, r2
 8006344:	4680      	mov	r8, r0
 8006346:	460c      	mov	r4, r1
 8006348:	469a      	mov	sl, r3
 800634a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800634e:	d807      	bhi.n	8006360 <_printf_i+0x28>
 8006350:	2f62      	cmp	r7, #98	@ 0x62
 8006352:	d80a      	bhi.n	800636a <_printf_i+0x32>
 8006354:	2f00      	cmp	r7, #0
 8006356:	f000 80d2 	beq.w	80064fe <_printf_i+0x1c6>
 800635a:	2f58      	cmp	r7, #88	@ 0x58
 800635c:	f000 80b9 	beq.w	80064d2 <_printf_i+0x19a>
 8006360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006364:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006368:	e03a      	b.n	80063e0 <_printf_i+0xa8>
 800636a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800636e:	2b15      	cmp	r3, #21
 8006370:	d8f6      	bhi.n	8006360 <_printf_i+0x28>
 8006372:	a101      	add	r1, pc, #4	@ (adr r1, 8006378 <_printf_i+0x40>)
 8006374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006378:	080063d1 	.word	0x080063d1
 800637c:	080063e5 	.word	0x080063e5
 8006380:	08006361 	.word	0x08006361
 8006384:	08006361 	.word	0x08006361
 8006388:	08006361 	.word	0x08006361
 800638c:	08006361 	.word	0x08006361
 8006390:	080063e5 	.word	0x080063e5
 8006394:	08006361 	.word	0x08006361
 8006398:	08006361 	.word	0x08006361
 800639c:	08006361 	.word	0x08006361
 80063a0:	08006361 	.word	0x08006361
 80063a4:	080064e5 	.word	0x080064e5
 80063a8:	0800640f 	.word	0x0800640f
 80063ac:	0800649f 	.word	0x0800649f
 80063b0:	08006361 	.word	0x08006361
 80063b4:	08006361 	.word	0x08006361
 80063b8:	08006507 	.word	0x08006507
 80063bc:	08006361 	.word	0x08006361
 80063c0:	0800640f 	.word	0x0800640f
 80063c4:	08006361 	.word	0x08006361
 80063c8:	08006361 	.word	0x08006361
 80063cc:	080064a7 	.word	0x080064a7
 80063d0:	6833      	ldr	r3, [r6, #0]
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6032      	str	r2, [r6, #0]
 80063d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063e0:	2301      	movs	r3, #1
 80063e2:	e09d      	b.n	8006520 <_printf_i+0x1e8>
 80063e4:	6833      	ldr	r3, [r6, #0]
 80063e6:	6820      	ldr	r0, [r4, #0]
 80063e8:	1d19      	adds	r1, r3, #4
 80063ea:	6031      	str	r1, [r6, #0]
 80063ec:	0606      	lsls	r6, r0, #24
 80063ee:	d501      	bpl.n	80063f4 <_printf_i+0xbc>
 80063f0:	681d      	ldr	r5, [r3, #0]
 80063f2:	e003      	b.n	80063fc <_printf_i+0xc4>
 80063f4:	0645      	lsls	r5, r0, #25
 80063f6:	d5fb      	bpl.n	80063f0 <_printf_i+0xb8>
 80063f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063fc:	2d00      	cmp	r5, #0
 80063fe:	da03      	bge.n	8006408 <_printf_i+0xd0>
 8006400:	232d      	movs	r3, #45	@ 0x2d
 8006402:	426d      	negs	r5, r5
 8006404:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006408:	4859      	ldr	r0, [pc, #356]	@ (8006570 <_printf_i+0x238>)
 800640a:	230a      	movs	r3, #10
 800640c:	e011      	b.n	8006432 <_printf_i+0xfa>
 800640e:	6821      	ldr	r1, [r4, #0]
 8006410:	6833      	ldr	r3, [r6, #0]
 8006412:	0608      	lsls	r0, r1, #24
 8006414:	f853 5b04 	ldr.w	r5, [r3], #4
 8006418:	d402      	bmi.n	8006420 <_printf_i+0xe8>
 800641a:	0649      	lsls	r1, r1, #25
 800641c:	bf48      	it	mi
 800641e:	b2ad      	uxthmi	r5, r5
 8006420:	2f6f      	cmp	r7, #111	@ 0x6f
 8006422:	4853      	ldr	r0, [pc, #332]	@ (8006570 <_printf_i+0x238>)
 8006424:	6033      	str	r3, [r6, #0]
 8006426:	bf14      	ite	ne
 8006428:	230a      	movne	r3, #10
 800642a:	2308      	moveq	r3, #8
 800642c:	2100      	movs	r1, #0
 800642e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006432:	6866      	ldr	r6, [r4, #4]
 8006434:	60a6      	str	r6, [r4, #8]
 8006436:	2e00      	cmp	r6, #0
 8006438:	bfa2      	ittt	ge
 800643a:	6821      	ldrge	r1, [r4, #0]
 800643c:	f021 0104 	bicge.w	r1, r1, #4
 8006440:	6021      	strge	r1, [r4, #0]
 8006442:	b90d      	cbnz	r5, 8006448 <_printf_i+0x110>
 8006444:	2e00      	cmp	r6, #0
 8006446:	d04b      	beq.n	80064e0 <_printf_i+0x1a8>
 8006448:	4616      	mov	r6, r2
 800644a:	fbb5 f1f3 	udiv	r1, r5, r3
 800644e:	fb03 5711 	mls	r7, r3, r1, r5
 8006452:	5dc7      	ldrb	r7, [r0, r7]
 8006454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006458:	462f      	mov	r7, r5
 800645a:	42bb      	cmp	r3, r7
 800645c:	460d      	mov	r5, r1
 800645e:	d9f4      	bls.n	800644a <_printf_i+0x112>
 8006460:	2b08      	cmp	r3, #8
 8006462:	d10b      	bne.n	800647c <_printf_i+0x144>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	07df      	lsls	r7, r3, #31
 8006468:	d508      	bpl.n	800647c <_printf_i+0x144>
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6861      	ldr	r1, [r4, #4]
 800646e:	4299      	cmp	r1, r3
 8006470:	bfde      	ittt	le
 8006472:	2330      	movle	r3, #48	@ 0x30
 8006474:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006478:	f106 36ff 	addle.w	r6, r6, #4294967295
 800647c:	1b92      	subs	r2, r2, r6
 800647e:	6122      	str	r2, [r4, #16]
 8006480:	f8cd a000 	str.w	sl, [sp]
 8006484:	464b      	mov	r3, r9
 8006486:	aa03      	add	r2, sp, #12
 8006488:	4621      	mov	r1, r4
 800648a:	4640      	mov	r0, r8
 800648c:	f7ff fee6 	bl	800625c <_printf_common>
 8006490:	3001      	adds	r0, #1
 8006492:	d14a      	bne.n	800652a <_printf_i+0x1f2>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	b004      	add	sp, #16
 800649a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	f043 0320 	orr.w	r3, r3, #32
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	4833      	ldr	r0, [pc, #204]	@ (8006574 <_printf_i+0x23c>)
 80064a8:	2778      	movs	r7, #120	@ 0x78
 80064aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	6831      	ldr	r1, [r6, #0]
 80064b2:	061f      	lsls	r7, r3, #24
 80064b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80064b8:	d402      	bmi.n	80064c0 <_printf_i+0x188>
 80064ba:	065f      	lsls	r7, r3, #25
 80064bc:	bf48      	it	mi
 80064be:	b2ad      	uxthmi	r5, r5
 80064c0:	6031      	str	r1, [r6, #0]
 80064c2:	07d9      	lsls	r1, r3, #31
 80064c4:	bf44      	itt	mi
 80064c6:	f043 0320 	orrmi.w	r3, r3, #32
 80064ca:	6023      	strmi	r3, [r4, #0]
 80064cc:	b11d      	cbz	r5, 80064d6 <_printf_i+0x19e>
 80064ce:	2310      	movs	r3, #16
 80064d0:	e7ac      	b.n	800642c <_printf_i+0xf4>
 80064d2:	4827      	ldr	r0, [pc, #156]	@ (8006570 <_printf_i+0x238>)
 80064d4:	e7e9      	b.n	80064aa <_printf_i+0x172>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	f023 0320 	bic.w	r3, r3, #32
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	e7f6      	b.n	80064ce <_printf_i+0x196>
 80064e0:	4616      	mov	r6, r2
 80064e2:	e7bd      	b.n	8006460 <_printf_i+0x128>
 80064e4:	6833      	ldr	r3, [r6, #0]
 80064e6:	6825      	ldr	r5, [r4, #0]
 80064e8:	6961      	ldr	r1, [r4, #20]
 80064ea:	1d18      	adds	r0, r3, #4
 80064ec:	6030      	str	r0, [r6, #0]
 80064ee:	062e      	lsls	r6, r5, #24
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	d501      	bpl.n	80064f8 <_printf_i+0x1c0>
 80064f4:	6019      	str	r1, [r3, #0]
 80064f6:	e002      	b.n	80064fe <_printf_i+0x1c6>
 80064f8:	0668      	lsls	r0, r5, #25
 80064fa:	d5fb      	bpl.n	80064f4 <_printf_i+0x1bc>
 80064fc:	8019      	strh	r1, [r3, #0]
 80064fe:	2300      	movs	r3, #0
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	4616      	mov	r6, r2
 8006504:	e7bc      	b.n	8006480 <_printf_i+0x148>
 8006506:	6833      	ldr	r3, [r6, #0]
 8006508:	1d1a      	adds	r2, r3, #4
 800650a:	6032      	str	r2, [r6, #0]
 800650c:	681e      	ldr	r6, [r3, #0]
 800650e:	6862      	ldr	r2, [r4, #4]
 8006510:	2100      	movs	r1, #0
 8006512:	4630      	mov	r0, r6
 8006514:	f7f9 fe84 	bl	8000220 <memchr>
 8006518:	b108      	cbz	r0, 800651e <_printf_i+0x1e6>
 800651a:	1b80      	subs	r0, r0, r6
 800651c:	6060      	str	r0, [r4, #4]
 800651e:	6863      	ldr	r3, [r4, #4]
 8006520:	6123      	str	r3, [r4, #16]
 8006522:	2300      	movs	r3, #0
 8006524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006528:	e7aa      	b.n	8006480 <_printf_i+0x148>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	4632      	mov	r2, r6
 800652e:	4649      	mov	r1, r9
 8006530:	4640      	mov	r0, r8
 8006532:	47d0      	blx	sl
 8006534:	3001      	adds	r0, #1
 8006536:	d0ad      	beq.n	8006494 <_printf_i+0x15c>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	079b      	lsls	r3, r3, #30
 800653c:	d413      	bmi.n	8006566 <_printf_i+0x22e>
 800653e:	68e0      	ldr	r0, [r4, #12]
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	4298      	cmp	r0, r3
 8006544:	bfb8      	it	lt
 8006546:	4618      	movlt	r0, r3
 8006548:	e7a6      	b.n	8006498 <_printf_i+0x160>
 800654a:	2301      	movs	r3, #1
 800654c:	4632      	mov	r2, r6
 800654e:	4649      	mov	r1, r9
 8006550:	4640      	mov	r0, r8
 8006552:	47d0      	blx	sl
 8006554:	3001      	adds	r0, #1
 8006556:	d09d      	beq.n	8006494 <_printf_i+0x15c>
 8006558:	3501      	adds	r5, #1
 800655a:	68e3      	ldr	r3, [r4, #12]
 800655c:	9903      	ldr	r1, [sp, #12]
 800655e:	1a5b      	subs	r3, r3, r1
 8006560:	42ab      	cmp	r3, r5
 8006562:	dcf2      	bgt.n	800654a <_printf_i+0x212>
 8006564:	e7eb      	b.n	800653e <_printf_i+0x206>
 8006566:	2500      	movs	r5, #0
 8006568:	f104 0619 	add.w	r6, r4, #25
 800656c:	e7f5      	b.n	800655a <_printf_i+0x222>
 800656e:	bf00      	nop
 8006570:	0800699d 	.word	0x0800699d
 8006574:	080069ae 	.word	0x080069ae

08006578 <__sflush_r>:
 8006578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006580:	0716      	lsls	r6, r2, #28
 8006582:	4605      	mov	r5, r0
 8006584:	460c      	mov	r4, r1
 8006586:	d454      	bmi.n	8006632 <__sflush_r+0xba>
 8006588:	684b      	ldr	r3, [r1, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	dc02      	bgt.n	8006594 <__sflush_r+0x1c>
 800658e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	dd48      	ble.n	8006626 <__sflush_r+0xae>
 8006594:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006596:	2e00      	cmp	r6, #0
 8006598:	d045      	beq.n	8006626 <__sflush_r+0xae>
 800659a:	2300      	movs	r3, #0
 800659c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065a0:	682f      	ldr	r7, [r5, #0]
 80065a2:	6a21      	ldr	r1, [r4, #32]
 80065a4:	602b      	str	r3, [r5, #0]
 80065a6:	d030      	beq.n	800660a <__sflush_r+0x92>
 80065a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	0759      	lsls	r1, r3, #29
 80065ae:	d505      	bpl.n	80065bc <__sflush_r+0x44>
 80065b0:	6863      	ldr	r3, [r4, #4]
 80065b2:	1ad2      	subs	r2, r2, r3
 80065b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80065b6:	b10b      	cbz	r3, 80065bc <__sflush_r+0x44>
 80065b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	2300      	movs	r3, #0
 80065be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065c0:	6a21      	ldr	r1, [r4, #32]
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b0      	blx	r6
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	d106      	bne.n	80065da <__sflush_r+0x62>
 80065cc:	6829      	ldr	r1, [r5, #0]
 80065ce:	291d      	cmp	r1, #29
 80065d0:	d82b      	bhi.n	800662a <__sflush_r+0xb2>
 80065d2:	4a2a      	ldr	r2, [pc, #168]	@ (800667c <__sflush_r+0x104>)
 80065d4:	410a      	asrs	r2, r1
 80065d6:	07d6      	lsls	r6, r2, #31
 80065d8:	d427      	bmi.n	800662a <__sflush_r+0xb2>
 80065da:	2200      	movs	r2, #0
 80065dc:	6062      	str	r2, [r4, #4]
 80065de:	04d9      	lsls	r1, r3, #19
 80065e0:	6922      	ldr	r2, [r4, #16]
 80065e2:	6022      	str	r2, [r4, #0]
 80065e4:	d504      	bpl.n	80065f0 <__sflush_r+0x78>
 80065e6:	1c42      	adds	r2, r0, #1
 80065e8:	d101      	bne.n	80065ee <__sflush_r+0x76>
 80065ea:	682b      	ldr	r3, [r5, #0]
 80065ec:	b903      	cbnz	r3, 80065f0 <__sflush_r+0x78>
 80065ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80065f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065f2:	602f      	str	r7, [r5, #0]
 80065f4:	b1b9      	cbz	r1, 8006626 <__sflush_r+0xae>
 80065f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065fa:	4299      	cmp	r1, r3
 80065fc:	d002      	beq.n	8006604 <__sflush_r+0x8c>
 80065fe:	4628      	mov	r0, r5
 8006600:	f7ff fbf2 	bl	8005de8 <_free_r>
 8006604:	2300      	movs	r3, #0
 8006606:	6363      	str	r3, [r4, #52]	@ 0x34
 8006608:	e00d      	b.n	8006626 <__sflush_r+0xae>
 800660a:	2301      	movs	r3, #1
 800660c:	4628      	mov	r0, r5
 800660e:	47b0      	blx	r6
 8006610:	4602      	mov	r2, r0
 8006612:	1c50      	adds	r0, r2, #1
 8006614:	d1c9      	bne.n	80065aa <__sflush_r+0x32>
 8006616:	682b      	ldr	r3, [r5, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0c6      	beq.n	80065aa <__sflush_r+0x32>
 800661c:	2b1d      	cmp	r3, #29
 800661e:	d001      	beq.n	8006624 <__sflush_r+0xac>
 8006620:	2b16      	cmp	r3, #22
 8006622:	d11e      	bne.n	8006662 <__sflush_r+0xea>
 8006624:	602f      	str	r7, [r5, #0]
 8006626:	2000      	movs	r0, #0
 8006628:	e022      	b.n	8006670 <__sflush_r+0xf8>
 800662a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800662e:	b21b      	sxth	r3, r3
 8006630:	e01b      	b.n	800666a <__sflush_r+0xf2>
 8006632:	690f      	ldr	r7, [r1, #16]
 8006634:	2f00      	cmp	r7, #0
 8006636:	d0f6      	beq.n	8006626 <__sflush_r+0xae>
 8006638:	0793      	lsls	r3, r2, #30
 800663a:	680e      	ldr	r6, [r1, #0]
 800663c:	bf08      	it	eq
 800663e:	694b      	ldreq	r3, [r1, #20]
 8006640:	600f      	str	r7, [r1, #0]
 8006642:	bf18      	it	ne
 8006644:	2300      	movne	r3, #0
 8006646:	eba6 0807 	sub.w	r8, r6, r7
 800664a:	608b      	str	r3, [r1, #8]
 800664c:	f1b8 0f00 	cmp.w	r8, #0
 8006650:	dde9      	ble.n	8006626 <__sflush_r+0xae>
 8006652:	6a21      	ldr	r1, [r4, #32]
 8006654:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006656:	4643      	mov	r3, r8
 8006658:	463a      	mov	r2, r7
 800665a:	4628      	mov	r0, r5
 800665c:	47b0      	blx	r6
 800665e:	2800      	cmp	r0, #0
 8006660:	dc08      	bgt.n	8006674 <__sflush_r+0xfc>
 8006662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
 8006670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006674:	4407      	add	r7, r0
 8006676:	eba8 0800 	sub.w	r8, r8, r0
 800667a:	e7e7      	b.n	800664c <__sflush_r+0xd4>
 800667c:	dfbffffe 	.word	0xdfbffffe

08006680 <_fflush_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	690b      	ldr	r3, [r1, #16]
 8006684:	4605      	mov	r5, r0
 8006686:	460c      	mov	r4, r1
 8006688:	b913      	cbnz	r3, 8006690 <_fflush_r+0x10>
 800668a:	2500      	movs	r5, #0
 800668c:	4628      	mov	r0, r5
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	b118      	cbz	r0, 800669a <_fflush_r+0x1a>
 8006692:	6a03      	ldr	r3, [r0, #32]
 8006694:	b90b      	cbnz	r3, 800669a <_fflush_r+0x1a>
 8006696:	f7ff f949 	bl	800592c <__sinit>
 800669a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0f3      	beq.n	800668a <_fflush_r+0xa>
 80066a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066a4:	07d0      	lsls	r0, r2, #31
 80066a6:	d404      	bmi.n	80066b2 <_fflush_r+0x32>
 80066a8:	0599      	lsls	r1, r3, #22
 80066aa:	d402      	bmi.n	80066b2 <_fflush_r+0x32>
 80066ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066ae:	f7ff fb8a 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 80066b2:	4628      	mov	r0, r5
 80066b4:	4621      	mov	r1, r4
 80066b6:	f7ff ff5f 	bl	8006578 <__sflush_r>
 80066ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066bc:	07da      	lsls	r2, r3, #31
 80066be:	4605      	mov	r5, r0
 80066c0:	d4e4      	bmi.n	800668c <_fflush_r+0xc>
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	059b      	lsls	r3, r3, #22
 80066c6:	d4e1      	bmi.n	800668c <_fflush_r+0xc>
 80066c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066ca:	f7ff fb7d 	bl	8005dc8 <__retarget_lock_release_recursive>
 80066ce:	e7dd      	b.n	800668c <_fflush_r+0xc>

080066d0 <__swhatbuf_r>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	460c      	mov	r4, r1
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	2900      	cmp	r1, #0
 80066da:	b096      	sub	sp, #88	@ 0x58
 80066dc:	4615      	mov	r5, r2
 80066de:	461e      	mov	r6, r3
 80066e0:	da0d      	bge.n	80066fe <__swhatbuf_r+0x2e>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066e8:	f04f 0100 	mov.w	r1, #0
 80066ec:	bf14      	ite	ne
 80066ee:	2340      	movne	r3, #64	@ 0x40
 80066f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80066f4:	2000      	movs	r0, #0
 80066f6:	6031      	str	r1, [r6, #0]
 80066f8:	602b      	str	r3, [r5, #0]
 80066fa:	b016      	add	sp, #88	@ 0x58
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
 80066fe:	466a      	mov	r2, sp
 8006700:	f000 f848 	bl	8006794 <_fstat_r>
 8006704:	2800      	cmp	r0, #0
 8006706:	dbec      	blt.n	80066e2 <__swhatbuf_r+0x12>
 8006708:	9901      	ldr	r1, [sp, #4]
 800670a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800670e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006712:	4259      	negs	r1, r3
 8006714:	4159      	adcs	r1, r3
 8006716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800671a:	e7eb      	b.n	80066f4 <__swhatbuf_r+0x24>

0800671c <__smakebuf_r>:
 800671c:	898b      	ldrh	r3, [r1, #12]
 800671e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006720:	079d      	lsls	r5, r3, #30
 8006722:	4606      	mov	r6, r0
 8006724:	460c      	mov	r4, r1
 8006726:	d507      	bpl.n	8006738 <__smakebuf_r+0x1c>
 8006728:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	2301      	movs	r3, #1
 8006732:	6163      	str	r3, [r4, #20]
 8006734:	b003      	add	sp, #12
 8006736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006738:	ab01      	add	r3, sp, #4
 800673a:	466a      	mov	r2, sp
 800673c:	f7ff ffc8 	bl	80066d0 <__swhatbuf_r>
 8006740:	9f00      	ldr	r7, [sp, #0]
 8006742:	4605      	mov	r5, r0
 8006744:	4639      	mov	r1, r7
 8006746:	4630      	mov	r0, r6
 8006748:	f7ff fbba 	bl	8005ec0 <_malloc_r>
 800674c:	b948      	cbnz	r0, 8006762 <__smakebuf_r+0x46>
 800674e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006752:	059a      	lsls	r2, r3, #22
 8006754:	d4ee      	bmi.n	8006734 <__smakebuf_r+0x18>
 8006756:	f023 0303 	bic.w	r3, r3, #3
 800675a:	f043 0302 	orr.w	r3, r3, #2
 800675e:	81a3      	strh	r3, [r4, #12]
 8006760:	e7e2      	b.n	8006728 <__smakebuf_r+0xc>
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	6020      	str	r0, [r4, #0]
 8006766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	9b01      	ldr	r3, [sp, #4]
 800676e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006772:	b15b      	cbz	r3, 800678c <__smakebuf_r+0x70>
 8006774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006778:	4630      	mov	r0, r6
 800677a:	f000 f81d 	bl	80067b8 <_isatty_r>
 800677e:	b128      	cbz	r0, 800678c <__smakebuf_r+0x70>
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	81a3      	strh	r3, [r4, #12]
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	431d      	orrs	r5, r3
 8006790:	81a5      	strh	r5, [r4, #12]
 8006792:	e7cf      	b.n	8006734 <__smakebuf_r+0x18>

08006794 <_fstat_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d07      	ldr	r5, [pc, #28]	@ (80067b4 <_fstat_r+0x20>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	602b      	str	r3, [r5, #0]
 80067a2:	f7fa fa6e 	bl	8000c82 <_fstat>
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d102      	bne.n	80067b0 <_fstat_r+0x1c>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	b103      	cbz	r3, 80067b0 <_fstat_r+0x1c>
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	bd38      	pop	{r3, r4, r5, pc}
 80067b2:	bf00      	nop
 80067b4:	20002b18 	.word	0x20002b18

080067b8 <_isatty_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d06      	ldr	r5, [pc, #24]	@ (80067d4 <_isatty_r+0x1c>)
 80067bc:	2300      	movs	r3, #0
 80067be:	4604      	mov	r4, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	f7fa fa6d 	bl	8000ca2 <_isatty>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_isatty_r+0x1a>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_isatty_r+0x1a>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	20002b18 	.word	0x20002b18

080067d8 <_sbrk_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d06      	ldr	r5, [pc, #24]	@ (80067f4 <_sbrk_r+0x1c>)
 80067dc:	2300      	movs	r3, #0
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	f7fa fa76 	bl	8000cd4 <_sbrk>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_sbrk_r+0x1a>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_sbrk_r+0x1a>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	20002b18 	.word	0x20002b18

080067f8 <_init>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr

08006804 <_fini>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr
