
TP_Free_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d34  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08005f14  08005f14  00006f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c0  080060c0  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080060c0  080060c0  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c8  080060c8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c8  080060c8  000070c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060cc  080060cc  000070cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080060d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ac0  2000006c  0800613c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b2c  0800613c  00008b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187e9  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003724  00000000  00000000  00020885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00023fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001143  00000000  00000000  000255f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004481  00000000  00000000  00026733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019097  00000000  00000000  0002abb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d061d  00000000  00000000  00043c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114268  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006518  00000000  00000000  001142ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0011a7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005efc 	.word	0x08005efc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08005efc 	.word	0x08005efc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b4:	f3bf 8f4f 	dsb	sy
}
 80005b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <__NVIC_SystemReset+0x24>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005c2:	4904      	ldr	r1, [pc, #16]	@ (80005d4 <__NVIC_SystemReset+0x24>)
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <__NVIC_SystemReset+0x28>)
 80005c6:	4313      	orrs	r3, r2
 80005c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ca:	f3bf 8f4f 	dsb	sy
}
 80005ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <__NVIC_SystemReset+0x20>
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	05fa0004 	.word	0x05fa0004

080005dc <__io_putchar>:
void taskTake(void * pvParameters);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2201      	movs	r2, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <__io_putchar+0x20>)
 80005ee:	f002 fa25 	bl	8002a3c <HAL_UART_Transmit>
	return ch;
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000088 	.word	0x20000088

08000600 <LED_Init>:

void LED_Init(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2120      	movs	r1, #32
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f000 fe6a 	bl	80012e4 <HAL_GPIO_WritePin>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <task_switch_LED>:

void task_switch_LED(void * pvParameters){
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
	/* Block for 100ms. */
	const TickType_t xDelay = (TickType_t) DELAY_100 / portTICK_PERIOD_MS;
 8000620:	2364      	movs	r3, #100	@ 0x64
 8000622:	60bb      	str	r3, [r7, #8]
	for(;;){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000624:	2120      	movs	r1, #32
 8000626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062a:	f000 fe73 	bl	8001314 <HAL_GPIO_TogglePin>
		printf("Count : %d\r\n", count);
 800062e:	68f9      	ldr	r1, [r7, #12]
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <task_switch_LED+0x34>)
 8000632:	f004 fd41 	bl	80050b8 <iprintf>
		count++;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
		vTaskDelay(xDelay);
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f003 fb93 	bl	8003d68 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000642:	bf00      	nop
 8000644:	e7ee      	b.n	8000624 <task_switch_LED+0x10>
 8000646:	bf00      	nop
 8000648:	08005f14 	.word	0x08005f14

0800064c <taskGive>:
	}
}

void taskGive(void * pvParameters){
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	TickType_t xDelay = (TickType_t) DELAY_100 / portTICK_PERIOD_MS; //100ms
 8000654:	2364      	movs	r3, #100	@ 0x64
 8000656:	60fb      	str	r3, [r7, #12]
	for(;;){
		/*printf("Waiting to give the semaphore, Delay = %u\r\n", (unsigned int)xDelay);
		xSemaphoreGive(sem1);
		printf("Semaphore given\r\n");*/
		printf("Waiting to notify, Delay = %u\r\n", (unsigned int)xDelay);
 8000658:	68f9      	ldr	r1, [r7, #12]
 800065a:	480a      	ldr	r0, [pc, #40]	@ (8000684 <taskGive+0x38>)
 800065c:	f004 fd2c 	bl	80050b8 <iprintf>
		xTaskNotifyGive(h_task_notify);
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <taskGive+0x3c>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	2202      	movs	r2, #2
 8000668:	2100      	movs	r1, #0
 800066a:	f003 ff3b 	bl	80044e4 <xTaskGenericNotify>
		printf("Notification sent\r\n");
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <taskGive+0x40>)
 8000670:	f004 fd8a 	bl	8005188 <puts>
		vTaskDelay(xDelay);
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f003 fb77 	bl	8003d68 <vTaskDelay>
		xDelay += 100;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3364      	adds	r3, #100	@ 0x64
 800067e:	60fb      	str	r3, [r7, #12]
		printf("Waiting to notify, Delay = %u\r\n", (unsigned int)xDelay);
 8000680:	bf00      	nop
 8000682:	e7e9      	b.n	8000658 <taskGive+0xc>
 8000684:	08005f24 	.word	0x08005f24
 8000688:	20000124 	.word	0x20000124
 800068c:	08005f44 	.word	0x08005f44

08000690 <taskTake>:
	}
}

void taskTake(void * pvParameters){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
    	}
    	else {
			printf("Failed to take semaphore, reset software\r\n");
			NVIC_SystemReset(); // Reset the uC
        }*/
    	printf("Waiting to get notified\r\n");
 8000698:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <taskTake+0x30>)
 800069a:	f004 fd75 	bl	8005188 <puts>
    	if (ulTaskNotifyTake(pdTRUE, (TickType_t) DELAY_1000) == pdTRUE ){
 800069e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006a2:	2001      	movs	r0, #1
 80006a4:	f003 fed2 	bl	800444c <ulTaskNotifyTake>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d103      	bne.n	80006b6 <taskTake+0x26>
    		printf("Notification received\r\n");
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <taskTake+0x34>)
 80006b0:	f004 fd6a 	bl	8005188 <puts>
 80006b4:	e7f0      	b.n	8000698 <taskTake+0x8>
    	}
    	else{
    		printf("Failed to receive the notification, reset software\r\n");
 80006b6:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <taskTake+0x38>)
 80006b8:	f004 fd66 	bl	8005188 <puts>
			NVIC_SystemReset(); // Reset the uC
 80006bc:	f7ff ff78 	bl	80005b0 <__NVIC_SystemReset>
 80006c0:	08005f58 	.word	0x08005f58
 80006c4:	08005f74 	.word	0x08005f74
 80006c8:	08005f8c 	.word	0x08005f8c

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fb6e 	bl	8000db2 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Init();
 80006d6:	f7ff ff93 	bl	8000600 <LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f85b 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 f8ef 	bl	80008c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e2:	f000 f8a1 	bl	8000828 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("==============START==============\r\n");
 80006e6:	4820      	ldr	r0, [pc, #128]	@ (8000768 <main+0x9c>)
 80006e8:	f004 fd4e 	bl	8005188 <puts>

  sem1 = xSemaphoreCreateBinary();
 80006ec:	2203      	movs	r2, #3
 80006ee:	2100      	movs	r1, #0
 80006f0:	2001      	movs	r0, #1
 80006f2:	f003 f997 	bl	8003a24 <xQueueGenericCreate>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a1c      	ldr	r2, [pc, #112]	@ (800076c <main+0xa0>)
 80006fa:	6013      	str	r3, [r2, #0]
  xTaskCreate(taskGive, "Give the semaphore each 100ms", STACK_SIZE, NULL, 2,&h_task_notify);
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xa4>)
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2302      	movs	r3, #2
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800070a:	491a      	ldr	r1, [pc, #104]	@ (8000774 <main+0xa8>)
 800070c:	481a      	ldr	r0, [pc, #104]	@ (8000778 <main+0xac>)
 800070e:	f003 f9df 	bl	8003ad0 <xTaskCreate>
  xTaskCreate(taskTake, "Take the semaphore", STACK_SIZE, NULL, 1, &h_task_notify);
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <main+0xa4>)
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	2301      	movs	r3, #1
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2300      	movs	r3, #0
 800071c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000720:	4916      	ldr	r1, [pc, #88]	@ (800077c <main+0xb0>)
 8000722:	4817      	ldr	r0, [pc, #92]	@ (8000780 <main+0xb4>)
 8000724:	f003 f9d4 	bl	8003ad0 <xTaskCreate>
  xTaskCreate(task_switch_LED, "Toggle LED", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000728:	2300      	movs	r3, #0
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	2300      	movs	r3, #0
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000736:	4913      	ldr	r1, [pc, #76]	@ (8000784 <main+0xb8>)
 8000738:	4813      	ldr	r0, [pc, #76]	@ (8000788 <main+0xbc>)
 800073a:	f003 f9c9 	bl	8003ad0 <xTaskCreate>

  vTaskStartScheduler();	// démarre le sheduler = boucle infinie
 800073e:	f003 fb49 	bl	8003dd4 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <main+0xc0>)
 8000744:	1d3c      	adds	r4, r7, #4
 8000746:	461d      	mov	r5, r3
 8000748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074c:	682b      	ldr	r3, [r5, #0]
 800074e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f003 f80c 	bl	8003772 <osThreadCreate>
 800075a:	4603      	mov	r3, r0
 800075c:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <main+0xc4>)
 800075e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000760:	f003 f800 	bl	8003764 <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <main+0x98>
 8000768:	08005fc0 	.word	0x08005fc0
 800076c:	20000120 	.word	0x20000120
 8000770:	20000124 	.word	0x20000124
 8000774:	08005fe4 	.word	0x08005fe4
 8000778:	0800064d 	.word	0x0800064d
 800077c:	08006004 	.word	0x08006004
 8000780:	08000691 	.word	0x08000691
 8000784:	08006018 	.word	0x08006018
 8000788:	08000615 	.word	0x08000615
 800078c:	08006030 	.word	0x08006030
 8000790:	2000011c 	.word	0x2000011c

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	@ 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	2238      	movs	r2, #56	@ 0x38
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 fdd0 	bl	8005348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fdc6 	bl	8001348 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	2303      	movs	r3, #3
 80007cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007ce:	2306      	movs	r3, #6
 80007d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007d2:	2355      	movs	r3, #85	@ 0x55
 80007d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fe62 	bl	80014b0 <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007f2:	f000 f8e5 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	230f      	movs	r3, #15
 80007f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	2303      	movs	r3, #3
 80007fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2104      	movs	r1, #4
 800080e:	4618      	mov	r0, r3
 8000810:	f001 f960 	bl	8001ad4 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800081a:	f000 f8d1 	bl	80009c0 <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	@ 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 800082e:	4a23      	ldr	r2, [pc, #140]	@ (80008bc <MX_USART2_UART_Init+0x94>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000832:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000870:	4811      	ldr	r0, [pc, #68]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 8000872:	f002 f893 	bl	800299c <HAL_UART_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800087c:	f000 f8a0 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000880:	2100      	movs	r1, #0
 8000882:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 8000884:	f002 fe8c 	bl	80035a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800088e:	f000 f897 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4808      	ldr	r0, [pc, #32]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 8000896:	f002 fec1 	bl	800361c <HAL_UARTEx_SetRxFifoThreshold>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008a0:	f000 f88e 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_USART2_UART_Init+0x90>)
 80008a6:	f002 fe42 	bl	800352e <HAL_UARTEx_DisableFifoMode>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008b0:	f000 f886 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000088 	.word	0x20000088
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a2a      	ldr	r2, [pc, #168]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b28      	ldr	r3, [pc, #160]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ee:	4b25      	ldr	r3, [pc, #148]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a24      	ldr	r2, [pc, #144]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <MX_GPIO_Init+0xc4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0320 	and.w	r3, r3, #32
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <MX_GPIO_Init+0xc4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a1e      	ldr	r2, [pc, #120]	@ (8000984 <MX_GPIO_Init+0xc4>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <MX_GPIO_Init+0xc4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <MX_GPIO_Init+0xc4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a18      	ldr	r2, [pc, #96]	@ (8000984 <MX_GPIO_Init+0xc4>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_GPIO_Init+0xc4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2120      	movs	r1, #32
 800093a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093e:	f000 fcd1 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	480b      	ldr	r0, [pc, #44]	@ (8000988 <MX_GPIO_Init+0xc8>)
 800095a:	f000 fb41 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Output_Pin */
  GPIO_InitStruct.Pin = LED_Output_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Output_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000978:	f000 fb32 	bl	8000fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	@ 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40021000 	.word	0x40021000
 8000988:	48000800 	.word	0x48000800

0800098c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f002 ff13 	bl	80037c0 <osDelay>
 800099a:	e7fb      	b.n	8000994 <StartDefaultTask+0x8>

0800099c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d101      	bne.n	80009b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ae:	f000 fa19 	bl	8000de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40012c00 	.word	0x40012c00

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <Error_Handler+0x8>

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_MspInit+0x50>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d6:	4a11      	ldr	r2, [pc, #68]	@ (8000a1c <HAL_MspInit+0x50>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <HAL_MspInit+0x50>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <HAL_MspInit+0x50>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ee:	4a0b      	ldr	r2, [pc, #44]	@ (8000a1c <HAL_MspInit+0x50>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <HAL_MspInit+0x50>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	210f      	movs	r1, #15
 8000a06:	f06f 0001 	mvn.w	r0, #1
 8000a0a:	f000 fac1 	bl	8000f90 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a0e:	f000 fd3f 	bl	8001490 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09a      	sub	sp, #104	@ 0x68
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	2244      	movs	r2, #68	@ 0x44
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 fc81 	bl	8005348 <memset>
  if(huart->Instance==USART2)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac8 <HAL_UART_MspInit+0xa8>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d136      	bne.n	8000abe <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 fa87 	bl	8001f70 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a68:	f7ff ffaa 	bl	80009c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_UART_MspInit+0xac>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a70:	4a16      	ldr	r2, [pc, #88]	@ (8000acc <HAL_UART_MspInit+0xac>)
 8000a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_UART_MspInit+0xac>)
 8000a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <HAL_UART_MspInit+0xac>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a88:	4a10      	ldr	r2, [pc, #64]	@ (8000acc <HAL_UART_MspInit+0xac>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <HAL_UART_MspInit+0xac>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aac:	2307      	movs	r3, #7
 8000aae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aba:	f000 fa91 	bl	8000fe0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000abe:	bf00      	nop
 8000ac0:	3768      	adds	r7, #104	@ 0x68
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	@ 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b94 <HAL_InitTick+0xc4>)
 8000ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8000b94 <HAL_InitTick+0xc4>)
 8000ae6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000aea:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aec:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <HAL_InitTick+0xc4>)
 8000aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af8:	f107 020c 	add.w	r2, r7, #12
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 f9bc 	bl	8001e80 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b08:	f001 f9a4 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8000b0c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b10:	4a21      	ldr	r2, [pc, #132]	@ (8000b98 <HAL_InitTick+0xc8>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	0c9b      	lsrs	r3, r3, #18
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <HAL_InitTick+0xcc>)
 8000b1e:	4a20      	ldr	r2, [pc, #128]	@ (8000ba0 <HAL_InitTick+0xd0>)
 8000b20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b22:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <HAL_InitTick+0xcc>)
 8000b24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <HAL_InitTick+0xcc>)
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <HAL_InitTick+0xcc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_InitTick+0xcc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000b3c:	4817      	ldr	r0, [pc, #92]	@ (8000b9c <HAL_InitTick+0xcc>)
 8000b3e:	f001 fc07 	bl	8002350 <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d11b      	bne.n	8000b88 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b50:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <HAL_InitTick+0xcc>)
 8000b52:	f001 fc5f 	bl	8002414 <HAL_TIM_Base_Start_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d111      	bne.n	8000b88 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b64:	2019      	movs	r0, #25
 8000b66:	f000 fa2d 	bl	8000fc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d808      	bhi.n	8000b82 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	2019      	movs	r0, #25
 8000b76:	f000 fa0b 	bl	8000f90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <HAL_InitTick+0xd4>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	e002      	b.n	8000b88 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3730      	adds	r7, #48	@ 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	431bde83 	.word	0x431bde83
 8000b9c:	20000128 	.word	0x20000128
 8000ba0:	40012c00 	.word	0x40012c00
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000be6:	f001 fc7f 	bl	80024e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000128 	.word	0x20000128

08000bf4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e00a      	b.n	8000c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c06:	f3af 8000 	nop.w
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf0      	blt.n	8000c06 <_read+0x12>
  }

  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e009      	b.n	8000c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fcc7 	bl	80005dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf1      	blt.n	8000c40 <_write+0x12>
  }
  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f004 fbc6 	bl	8005490 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20008000 	.word	0x20008000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000174 	.word	0x20000174
 8000d38:	20002b30 	.word	0x20002b30

08000d3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d60:	480d      	ldr	r0, [pc, #52]	@ (8000d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d62:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <LoopForever+0xe>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	@ (8000dac <LoopForever+0x16>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f004 fb85 	bl	800549c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d92:	f7ff fc9b 	bl	80006cc <main>

08000d96 <LoopForever>:

LoopForever:
    b LoopForever
 8000d96:	e7fe      	b.n	8000d96 <LoopForever>
  ldr   r0, =_estack
 8000d98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000da4:	080060d0 	.word	0x080060d0
  ldr r2, =_sbss
 8000da8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000dac:	20002b2c 	.word	0x20002b2c

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>

08000db2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f8dc 	bl	8000f7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f7ff fe84 	bl	8000ad0 <HAL_InitTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	e001      	b.n	8000dd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd4:	f7ff fdfa 	bl	80009cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]

}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_IncTick+0x1c>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a03      	ldr	r2, [pc, #12]	@ (8000e00 <HAL_IncTick+0x1c>)
 8000df4:	6013      	str	r3, [r2, #0]
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	20000178 	.word	0x20000178
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000178 	.word	0x20000178

08000e20 <__NVIC_SetPriorityGrouping>:
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	@ (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	@ (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff4c 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9e:	f7ff ff63 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fa2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	6978      	ldr	r0, [r7, #20]
 8000faa:	f7ff ffb3 	bl	8000f14 <NVIC_EncodePriority>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff82 	bl	8000ec0 <__NVIC_SetPriority>
}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff56 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fee:	e15a      	b.n	80012a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 814c 	beq.w	80012a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 0201 	and.w	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0203 	and.w	r2, r3, #3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80a6 	beq.w	80012a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b5b      	ldr	r3, [pc, #364]	@ (80012c4 <HAL_GPIO_Init+0x2e4>)
 8001156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001158:	4a5a      	ldr	r2, [pc, #360]	@ (80012c4 <HAL_GPIO_Init+0x2e4>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001160:	4b58      	ldr	r3, [pc, #352]	@ (80012c4 <HAL_GPIO_Init+0x2e4>)
 8001162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116c:	4a56      	ldr	r2, [pc, #344]	@ (80012c8 <HAL_GPIO_Init+0x2e8>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001196:	d01f      	beq.n	80011d8 <HAL_GPIO_Init+0x1f8>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a4c      	ldr	r2, [pc, #304]	@ (80012cc <HAL_GPIO_Init+0x2ec>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d019      	beq.n	80011d4 <HAL_GPIO_Init+0x1f4>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a4b      	ldr	r2, [pc, #300]	@ (80012d0 <HAL_GPIO_Init+0x2f0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d013      	beq.n	80011d0 <HAL_GPIO_Init+0x1f0>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a4a      	ldr	r2, [pc, #296]	@ (80012d4 <HAL_GPIO_Init+0x2f4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d00d      	beq.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a49      	ldr	r2, [pc, #292]	@ (80012d8 <HAL_GPIO_Init+0x2f8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d007      	beq.n	80011c8 <HAL_GPIO_Init+0x1e8>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a48      	ldr	r2, [pc, #288]	@ (80012dc <HAL_GPIO_Init+0x2fc>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d101      	bne.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011c0:	2305      	movs	r3, #5
 80011c2:	e00a      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011c4:	2306      	movs	r3, #6
 80011c6:	e008      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e006      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011cc:	2303      	movs	r3, #3
 80011ce:	e004      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e002      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011d8:	2300      	movs	r3, #0
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	f002 0203 	and.w	r2, r2, #3
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	4093      	lsls	r3, r2
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ea:	4937      	ldr	r1, [pc, #220]	@ (80012c8 <HAL_GPIO_Init+0x2e8>)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f8:	4b39      	ldr	r3, [pc, #228]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800121c:	4a30      	ldr	r2, [pc, #192]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001222:	4b2f      	ldr	r3, [pc, #188]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001246:	4a26      	ldr	r2, [pc, #152]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800124c:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001270:	4a1b      	ldr	r2, [pc, #108]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001276:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800129a:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f47f ae9d 	bne.w	8000ff0 <HAL_GPIO_Init+0x10>
  }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	48000400 	.word	0x48000400
 80012d0:	48000800 	.word	0x48000800
 80012d4:	48000c00 	.word	0x48000c00
 80012d8:	48001000 	.word	0x48001000
 80012dc:	48001400 	.word	0x48001400
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001300:	e002      	b.n	8001308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4013      	ands	r3, r2
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43d9      	mvns	r1, r3
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	400b      	ands	r3, r1
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d141      	bne.n	80013da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001356:	4b4b      	ldr	r3, [pc, #300]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800135e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001362:	d131      	bne.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001364:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800136a:	4a46      	ldr	r2, [pc, #280]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001370:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	4b43      	ldr	r3, [pc, #268]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800137c:	4a41      	ldr	r2, [pc, #260]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001384:	4b40      	ldr	r3, [pc, #256]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2232      	movs	r2, #50	@ 0x32
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	4a3f      	ldr	r2, [pc, #252]	@ (800148c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	0c9b      	lsrs	r3, r3, #18
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139a:	e002      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3b01      	subs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a2:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ae:	d102      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f2      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b6:	4b33      	ldr	r3, [pc, #204]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c2:	d158      	bne.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e057      	b.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013d8:	e04d      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013e0:	d141      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e2:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ee:	d131      	bne.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f0:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013f6:	4a23      	ldr	r2, [pc, #140]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001400:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001408:	4a1e      	ldr	r2, [pc, #120]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800140e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001410:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2232      	movs	r2, #50	@ 0x32
 8001416:	fb02 f303 	mul.w	r3, r2, r3
 800141a:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0c9b      	lsrs	r3, r3, #18
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001426:	e002      	b.n	800142e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3b01      	subs	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800143a:	d102      	bne.n	8001442 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f2      	bne.n	8001428 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800144e:	d112      	bne.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e011      	b.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001464:	e007      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001474:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40007000 	.word	0x40007000
 8001488:	20000000 	.word	0x20000000
 800148c:	431bde83 	.word	0x431bde83

08001490 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149e:	6093      	str	r3, [r2, #8]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40007000 	.word	0x40007000

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e2fe      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d075      	beq.n	80015ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ce:	4b97      	ldr	r3, [pc, #604]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d8:	4b94      	ldr	r3, [pc, #592]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_OscConfig+0x3e>
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d002      	beq.n	80014f4 <HAL_RCC_OscConfig+0x44>
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d10b      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b8d      	ldr	r3, [pc, #564]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d05b      	beq.n	80015b8 <HAL_RCC_OscConfig+0x108>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d157      	bne.n	80015b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e2d9      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x74>
 8001516:	4b85      	ldr	r3, [pc, #532]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a84      	ldr	r2, [pc, #528]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e01d      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b7f      	ldr	r3, [pc, #508]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7e      	ldr	r2, [pc, #504]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b7c      	ldr	r3, [pc, #496]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7b      	ldr	r2, [pc, #492]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001548:	4b78      	ldr	r3, [pc, #480]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a77      	ldr	r2, [pc, #476]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b75      	ldr	r3, [pc, #468]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a74      	ldr	r2, [pc, #464]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800155e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fc4e 	bl	8000e08 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fc4a 	bl	8000e08 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	@ 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e29e      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001582:	4b6a      	ldr	r3, [pc, #424]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0xc0>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fc3a 	bl	8000e08 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fc36 	bl	8000e08 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	@ 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e28a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015aa:	4b60      	ldr	r3, [pc, #384]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0xe8>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d075      	beq.n	80016b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c6:	4b59      	ldr	r3, [pc, #356]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d0:	4b56      	ldr	r3, [pc, #344]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b0c      	cmp	r3, #12
 80015de:	d102      	bne.n	80015e6 <HAL_RCC_OscConfig+0x136>
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d002      	beq.n	80015ec <HAL_RCC_OscConfig+0x13c>
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d11f      	bne.n	800162c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ec:	4b4f      	ldr	r3, [pc, #316]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_OscConfig+0x154>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e25d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b49      	ldr	r3, [pc, #292]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	4946      	ldr	r1, [pc, #280]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001618:	4b45      	ldr	r3, [pc, #276]	@ (8001730 <HAL_RCC_OscConfig+0x280>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fa57 	bl	8000ad0 <HAL_InitTick>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d043      	beq.n	80016b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e249      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d023      	beq.n	800167c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b3d      	ldr	r3, [pc, #244]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a3c      	ldr	r2, [pc, #240]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fbe2 	bl	8000e08 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fbde 	bl	8000e08 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e232      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165a:	4b34      	ldr	r3, [pc, #208]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b31      	ldr	r3, [pc, #196]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	492d      	ldr	r1, [pc, #180]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
 800167a:	e01a      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167c:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2a      	ldr	r2, [pc, #168]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001682:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fbbe 	bl	8000e08 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fbba 	bl	8000e08 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e20e      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1e0>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d041      	beq.n	8001742 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01c      	beq.n	8001700 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b19      	ldr	r3, [pc, #100]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016cc:	4a17      	ldr	r2, [pc, #92]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb97 	bl	8000e08 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fb93 	bl	8000e08 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1e7      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ef      	beq.n	80016de <HAL_RCC_OscConfig+0x22e>
 80016fe:	e020      	b.n	8001742 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <HAL_RCC_OscConfig+0x27c>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fb7a 	bl	8000e08 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001716:	e00d      	b.n	8001734 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fb76 	bl	8000e08 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d906      	bls.n	8001734 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e1ca      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001734:	4b8c      	ldr	r3, [pc, #560]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ea      	bne.n	8001718 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80a6 	beq.w	800189c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001754:	4b84      	ldr	r3, [pc, #528]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x2b4>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x2b6>
 8001764:	2300      	movs	r3, #0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00d      	beq.n	8001786 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b7f      	ldr	r3, [pc, #508]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	4a7e      	ldr	r2, [pc, #504]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001774:	6593      	str	r3, [r2, #88]	@ 0x58
 8001776:	4b7c      	ldr	r3, [pc, #496]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001782:	2301      	movs	r3, #1
 8001784:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	4b79      	ldr	r3, [pc, #484]	@ (800196c <HAL_RCC_OscConfig+0x4bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d118      	bne.n	80017c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001792:	4b76      	ldr	r3, [pc, #472]	@ (800196c <HAL_RCC_OscConfig+0x4bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a75      	ldr	r2, [pc, #468]	@ (800196c <HAL_RCC_OscConfig+0x4bc>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179e:	f7ff fb33 	bl	8000e08 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a6:	f7ff fb2f 	bl	8000e08 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e183      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b8:	4b6c      	ldr	r3, [pc, #432]	@ (800196c <HAL_RCC_OscConfig+0x4bc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d108      	bne.n	80017de <HAL_RCC_OscConfig+0x32e>
 80017cc:	4b66      	ldr	r3, [pc, #408]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d2:	4a65      	ldr	r2, [pc, #404]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017dc:	e024      	b.n	8001828 <HAL_RCC_OscConfig+0x378>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d110      	bne.n	8001808 <HAL_RCC_OscConfig+0x358>
 80017e6:	4b60      	ldr	r3, [pc, #384]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ec:	4a5e      	ldr	r2, [pc, #376]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fc:	4a5a      	ldr	r2, [pc, #360]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001806:	e00f      	b.n	8001828 <HAL_RCC_OscConfig+0x378>
 8001808:	4b57      	ldr	r3, [pc, #348]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180e:	4a56      	ldr	r2, [pc, #344]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001818:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181e:	4a52      	ldr	r2, [pc, #328]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001820:	f023 0304 	bic.w	r3, r3, #4
 8001824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d016      	beq.n	800185e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001830:	f7ff faea 	bl	8000e08 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff fae6 	bl	8000e08 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e138      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184e:	4b46      	ldr	r3, [pc, #280]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ed      	beq.n	8001838 <HAL_RCC_OscConfig+0x388>
 800185c:	e015      	b.n	800188a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff fad3 	bl	8000e08 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff facf 	bl	8000e08 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e121      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800187c:	4b3a      	ldr	r3, [pc, #232]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ed      	bne.n	8001866 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800188a:	7ffb      	ldrb	r3, [r7, #31]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b35      	ldr	r3, [pc, #212]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001894:	4a34      	ldr	r2, [pc, #208]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800189a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d03c      	beq.n	8001922 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01c      	beq.n	80018ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff faa2 	bl	8000e08 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c8:	f7ff fa9e 	bl	8000e08 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0f2      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018da:	4b23      	ldr	r3, [pc, #140]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ef      	beq.n	80018c8 <HAL_RCC_OscConfig+0x418>
 80018e8:	e01b      	b.n	8001922 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff fa85 	bl	8000e08 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001902:	f7ff fa81 	bl	8000e08 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0d5      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001914:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ef      	bne.n	8001902 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80c9 	beq.w	8001abe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192c:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b0c      	cmp	r3, #12
 8001936:	f000 8083 	beq.w	8001a40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d15e      	bne.n	8001a00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a08      	ldr	r2, [pc, #32]	@ (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800194c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff fa5b 	bl	8000e08 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	e00c      	b.n	8001970 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff fa57 	bl	8000e08 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d905      	bls.n	8001970 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0ab      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
 8001968:	40021000 	.word	0x40021000
 800196c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001970:	4b55      	ldr	r3, [pc, #340]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ec      	bne.n	8001956 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197c:	4b52      	ldr	r3, [pc, #328]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	4b52      	ldr	r3, [pc, #328]	@ (8001acc <HAL_RCC_OscConfig+0x61c>)
 8001982:	4013      	ands	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6a11      	ldr	r1, [r2, #32]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800198c:	3a01      	subs	r2, #1
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	4311      	orrs	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001996:	0212      	lsls	r2, r2, #8
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800199e:	0852      	lsrs	r2, r2, #1
 80019a0:	3a01      	subs	r2, #1
 80019a2:	0552      	lsls	r2, r2, #21
 80019a4:	4311      	orrs	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019aa:	0852      	lsrs	r2, r2, #1
 80019ac:	3a01      	subs	r2, #1
 80019ae:	0652      	lsls	r2, r2, #25
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019b6:	06d2      	lsls	r2, r2, #27
 80019b8:	430a      	orrs	r2, r1
 80019ba:	4943      	ldr	r1, [pc, #268]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c0:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a40      	ldr	r2, [pc, #256]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019cc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff fa16 	bl	8000e08 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff fa12 	bl	8000e08 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e066      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x530>
 80019fe:	e05e      	b.n	8001abe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a00:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a30      	ldr	r2, [pc, #192]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f9fc 	bl	8000e08 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f9f8 	bl	8000e08 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e04c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a26:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4924      	ldr	r1, [pc, #144]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <HAL_RCC_OscConfig+0x620>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60cb      	str	r3, [r1, #12]
 8001a3e:	e03e      	b.n	8001abe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e039      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d12c      	bne.n	8001aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d123      	bne.n	8001aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d11b      	bne.n	8001aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d113      	bne.n	8001aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9c:	085b      	lsrs	r3, r3, #1
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab0:	085b      	lsrs	r3, r3, #1
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	019f800c 	.word	0x019f800c
 8001ad0:	feeefffc 	.word	0xfeeefffc

08001ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e11e      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b91      	ldr	r3, [pc, #580]	@ (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d910      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b8e      	ldr	r3, [pc, #568]	@ (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 020f 	bic.w	r2, r3, #15
 8001b02:	498c      	ldr	r1, [pc, #560]	@ (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b8a      	ldr	r3, [pc, #552]	@ (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e106      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d073      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d129      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b30:	4b81      	ldr	r3, [pc, #516]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0f4      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b40:	f000 f9d0 	bl	8001ee4 <RCC_GetSysClockFreqFromPLLSource>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4a7c      	ldr	r2, [pc, #496]	@ (8001d3c <HAL_RCC_ClockConfig+0x268>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d93f      	bls.n	8001bce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d033      	beq.n	8001bce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d12f      	bne.n	8001bce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b6e:	4b72      	ldr	r3, [pc, #456]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b76:	4a70      	ldr	r2, [pc, #448]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e024      	b.n	8001bce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0c6      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9c:	4b66      	ldr	r3, [pc, #408]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0be      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bac:	f000 f8ce 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4a61      	ldr	r2, [pc, #388]	@ (8001d3c <HAL_RCC_ClockConfig+0x268>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d909      	bls.n	8001bce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bba:	4b5f      	ldr	r3, [pc, #380]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bc2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bce:	4b5a      	ldr	r3, [pc, #360]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f023 0203 	bic.w	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4957      	ldr	r1, [pc, #348]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be0:	f7ff f912 	bl	8000e08 <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be8:	f7ff f90e 	bl	8000e08 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e095      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 020c 	and.w	r2, r3, #12
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d1eb      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c28:	4b43      	ldr	r3, [pc, #268]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4a42      	ldr	r2, [pc, #264]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c40:	4b3d      	ldr	r3, [pc, #244]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c48:	4a3b      	ldr	r2, [pc, #236]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b39      	ldr	r3, [pc, #228]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4936      	ldr	r1, [pc, #216]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b80      	cmp	r3, #128	@ 0x80
 8001c68:	d105      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c6a:	4b33      	ldr	r3, [pc, #204]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4a32      	ldr	r2, [pc, #200]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c76:	4b2f      	ldr	r3, [pc, #188]	@ (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d21d      	bcs.n	8001cc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c84:	4b2b      	ldr	r3, [pc, #172]	@ (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 020f 	bic.w	r2, r3, #15
 8001c8c:	4929      	ldr	r1, [pc, #164]	@ (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c94:	f7ff f8b8 	bl	8000e08 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7ff f8b4 	bl	8000e08 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e03b      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1ed      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4917      	ldr	r1, [pc, #92]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cea:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	490f      	ldr	r1, [pc, #60]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cfe:	f000 f825 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	490c      	ldr	r1, [pc, #48]	@ (8001d40 <HAL_RCC_ClockConfig+0x26c>)
 8001d10:	5ccb      	ldrb	r3, [r1, r3]
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <HAL_RCC_ClockConfig+0x270>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_RCC_ClockConfig+0x274>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fed4 	bl	8000ad0 <HAL_InitTick>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	04c4b400 	.word	0x04c4b400
 8001d40:	0800604c 	.word	0x0800604c
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d52:	4b2c      	ldr	r3, [pc, #176]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e047      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d64:	4b27      	ldr	r3, [pc, #156]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d70:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	e03e      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d76:	4b23      	ldr	r3, [pc, #140]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d136      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3301      	adds	r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001daa:	68d2      	ldr	r2, [r2, #12]
 8001dac:	0a12      	lsrs	r2, r2, #8
 8001dae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
      break;
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dba:	4a13      	ldr	r2, [pc, #76]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4a10      	ldr	r2, [pc, #64]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc4:	68d2      	ldr	r2, [r2, #12]
 8001dc6:	0a12      	lsrs	r2, r2, #8
 8001dc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
      break;
 8001dd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0e5b      	lsrs	r3, r3, #25
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	3301      	adds	r3, #1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	e001      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001df4:	693b      	ldr	r3, [r7, #16]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	016e3600 	.word	0x016e3600

08001e10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b03      	ldr	r3, [pc, #12]	@ (8001e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e2c:	f7ff fff0 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4904      	ldr	r1, [pc, #16]	@ (8001e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	0800605c 	.word	0x0800605c

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e58:	f7ff ffda 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4904      	ldr	r1, [pc, #16]	@ (8001e7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	0800605c 	.word	0x0800605c

08001e80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0203 	and.w	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <HAL_RCC_GetClockConfig+0x60>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 020f 	and.w	r2, r3, #15
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40022000 	.word	0x40022000

08001ee4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eea:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3301      	adds	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d10c      	bne.n	8001f22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f08:	4a17      	ldr	r2, [pc, #92]	@ (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f12:	68d2      	ldr	r2, [r2, #12]
 8001f14:	0a12      	lsrs	r2, r2, #8
 8001f16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
    break;
 8001f20:	e00c      	b.n	8001f3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f22:	4a12      	ldr	r2, [pc, #72]	@ (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f2c:	68d2      	ldr	r2, [r2, #12]
 8001f2e:	0a12      	lsrs	r2, r2, #8
 8001f30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    break;
 8001f3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0e5b      	lsrs	r3, r3, #25
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	3301      	adds	r3, #1
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000
 8001f68:	016e3600 	.word	0x016e3600
 8001f6c:	00f42400 	.word	0x00f42400

08001f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f78:	2300      	movs	r3, #0
 8001f7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8098 	beq.w	80020be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f92:	4b43      	ldr	r3, [pc, #268]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10d      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	4b40      	ldr	r3, [pc, #256]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fba:	4b3a      	ldr	r3, [pc, #232]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a39      	ldr	r2, [pc, #228]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fc6:	f7fe ff1f 	bl	8000e08 <HAL_GetTick>
 8001fca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fcc:	e009      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fce:	f7fe ff1b 	bl	8000e08 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d902      	bls.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	74fb      	strb	r3, [r7, #19]
        break;
 8001fe0:	e005      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fe2:	4b30      	ldr	r3, [pc, #192]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0ef      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fee:	7cfb      	ldrb	r3, [r7, #19]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d159      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ffe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01e      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	429a      	cmp	r2, r3
 800200e:	d019      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002010:	4b23      	ldr	r3, [pc, #140]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800201a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800201c:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	4a1f      	ldr	r2, [pc, #124]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800202c:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800203c:	4a18      	ldr	r2, [pc, #96]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d016      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204e:	f7fe fedb 	bl	8000e08 <HAL_GetTick>
 8002052:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002054:	e00b      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7fe fed7 	bl	8000e08 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002064:	4293      	cmp	r3, r2
 8002066:	d902      	bls.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	74fb      	strb	r3, [r7, #19]
            break;
 800206c:	e006      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206e:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ec      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10b      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002082:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002088:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	4903      	ldr	r1, [pc, #12]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002098:	e008      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	74bb      	strb	r3, [r7, #18]
 800209e:	e005      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ac:	7c7b      	ldrb	r3, [r7, #17]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4ba6      	ldr	r3, [pc, #664]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	4aa5      	ldr	r2, [pc, #660]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ca:	4ba0      	ldr	r3, [pc, #640]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d0:	f023 0203 	bic.w	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	499c      	ldr	r1, [pc, #624]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ec:	4b97      	ldr	r3, [pc, #604]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f2:	f023 020c 	bic.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4994      	ldr	r1, [pc, #592]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800210e:	4b8f      	ldr	r3, [pc, #572]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002114:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	498b      	ldr	r1, [pc, #556]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002130:	4b86      	ldr	r3, [pc, #536]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	4983      	ldr	r1, [pc, #524]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002152:	4b7e      	ldr	r3, [pc, #504]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002158:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	497a      	ldr	r1, [pc, #488]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002174:	4b75      	ldr	r3, [pc, #468]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	4972      	ldr	r1, [pc, #456]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002196:	4b6d      	ldr	r3, [pc, #436]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4969      	ldr	r1, [pc, #420]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021b8:	4b64      	ldr	r3, [pc, #400]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4961      	ldr	r1, [pc, #388]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021da:	4b5c      	ldr	r3, [pc, #368]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	4958      	ldr	r1, [pc, #352]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d015      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021fc:	4b53      	ldr	r3, [pc, #332]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220a:	4950      	ldr	r1, [pc, #320]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800221a:	d105      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800221c:	4b4b      	ldr	r3, [pc, #300]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a4a      	ldr	r2, [pc, #296]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002226:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002230:	2b00      	cmp	r3, #0
 8002232:	d015      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002234:	4b45      	ldr	r3, [pc, #276]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	4942      	ldr	r1, [pc, #264]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002252:	d105      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002254:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a3c      	ldr	r2, [pc, #240]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d015      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800226c:	4b37      	ldr	r3, [pc, #220]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002272:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4934      	ldr	r1, [pc, #208]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800228a:	d105      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228c:	4b2f      	ldr	r3, [pc, #188]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a2e      	ldr	r2, [pc, #184]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002296:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a4:	4b29      	ldr	r3, [pc, #164]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b2:	4926      	ldr	r1, [pc, #152]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022c2:	d105      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c4:	4b21      	ldr	r3, [pc, #132]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a20      	ldr	r2, [pc, #128]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022dc:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ea:	4918      	ldr	r1, [pc, #96]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022fa:	d105      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fc:	4b13      	ldr	r3, [pc, #76]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a12      	ldr	r2, [pc, #72]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002306:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002314:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002322:	490a      	ldr	r1, [pc, #40]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002332:	d105      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a04      	ldr	r2, [pc, #16]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002340:	7cbb      	ldrb	r3, [r7, #18]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e049      	b.n	80023f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f841 	bl	80023fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	4619      	mov	r1, r3
 800238e:	4610      	mov	r0, r2
 8002390:	f000 fa22 	bl	80027d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d001      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e04a      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a21      	ldr	r2, [pc, #132]	@ (80024d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d018      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x6c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002456:	d013      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x6c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1d      	ldr	r2, [pc, #116]	@ (80024d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00e      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x6c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1c      	ldr	r2, [pc, #112]	@ (80024d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d009      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x6c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1a      	ldr	r2, [pc, #104]	@ (80024dc <HAL_TIM_Base_Start_IT+0xc8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d004      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x6c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d115      	bne.n	80024ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	4b17      	ldr	r3, [pc, #92]	@ (80024e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b06      	cmp	r3, #6
 8002490:	d015      	beq.n	80024be <HAL_TIM_Base_Start_IT+0xaa>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002498:	d011      	beq.n	80024be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024aa:	e008      	b.n	80024be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e000      	b.n	80024c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40000400 	.word	0x40000400
 80024d8:	40000800 	.word	0x40000800
 80024dc:	40013400 	.word	0x40013400
 80024e0:	40014000 	.word	0x40014000
 80024e4:	00010007 	.word	0x00010007

080024e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d020      	beq.n	800254c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01b      	beq.n	800254c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0202 	mvn.w	r2, #2
 800251c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f931 	bl	800279a <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f923 	bl	8002786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f934 	bl	80027ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d020      	beq.n	8002598 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01b      	beq.n	8002598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0204 	mvn.w	r2, #4
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f90b 	bl	800279a <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8fd 	bl	8002786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f90e 	bl	80027ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d020      	beq.n	80025e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01b      	beq.n	80025e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0208 	mvn.w	r2, #8
 80025b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2204      	movs	r2, #4
 80025ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f8e5 	bl	800279a <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8d7 	bl	8002786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f8e8 	bl	80027ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d020      	beq.n	8002630 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01b      	beq.n	8002630 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0210 	mvn.w	r2, #16
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2208      	movs	r2, #8
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8bf 	bl	800279a <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8b1 	bl	8002786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f8c2 	bl	80027ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00c      	beq.n	8002654 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0201 	mvn.w	r2, #1
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe f9a4 	bl	800099c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d104      	bne.n	8002668 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00c      	beq.n	8002682 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800267a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f951 	bl	8002924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00c      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800269e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f949 	bl	8002938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00c      	beq.n	80026ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f87c 	bl	80027c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00c      	beq.n	80026ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f06f 0220 	mvn.w	r2, #32
 80026e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f911 	bl	8002910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00c      	beq.n	8002712 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800270a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f91d 	bl	800294c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00c      	beq.n	8002736 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800272e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f915 	bl	8002960 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00c      	beq.n	800275a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f90d 	bl	8002974 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00c      	beq.n	800277e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f905 	bl	8002988 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a42      	ldr	r2, [pc, #264]	@ (80028f4 <TIM_Base_SetConfig+0x11c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00f      	beq.n	8002810 <TIM_Base_SetConfig+0x38>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f6:	d00b      	beq.n	8002810 <TIM_Base_SetConfig+0x38>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3f      	ldr	r2, [pc, #252]	@ (80028f8 <TIM_Base_SetConfig+0x120>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <TIM_Base_SetConfig+0x38>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3e      	ldr	r2, [pc, #248]	@ (80028fc <TIM_Base_SetConfig+0x124>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <TIM_Base_SetConfig+0x38>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3d      	ldr	r2, [pc, #244]	@ (8002900 <TIM_Base_SetConfig+0x128>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a33      	ldr	r2, [pc, #204]	@ (80028f4 <TIM_Base_SetConfig+0x11c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01b      	beq.n	8002862 <TIM_Base_SetConfig+0x8a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002830:	d017      	beq.n	8002862 <TIM_Base_SetConfig+0x8a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a30      	ldr	r2, [pc, #192]	@ (80028f8 <TIM_Base_SetConfig+0x120>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <TIM_Base_SetConfig+0x8a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a2f      	ldr	r2, [pc, #188]	@ (80028fc <TIM_Base_SetConfig+0x124>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00f      	beq.n	8002862 <TIM_Base_SetConfig+0x8a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a2e      	ldr	r2, [pc, #184]	@ (8002900 <TIM_Base_SetConfig+0x128>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00b      	beq.n	8002862 <TIM_Base_SetConfig+0x8a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a2d      	ldr	r2, [pc, #180]	@ (8002904 <TIM_Base_SetConfig+0x12c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <TIM_Base_SetConfig+0x8a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2c      	ldr	r2, [pc, #176]	@ (8002908 <TIM_Base_SetConfig+0x130>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d003      	beq.n	8002862 <TIM_Base_SetConfig+0x8a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a2b      	ldr	r2, [pc, #172]	@ (800290c <TIM_Base_SetConfig+0x134>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d108      	bne.n	8002874 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a16      	ldr	r2, [pc, #88]	@ (80028f4 <TIM_Base_SetConfig+0x11c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00f      	beq.n	80028c0 <TIM_Base_SetConfig+0xe8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a17      	ldr	r2, [pc, #92]	@ (8002900 <TIM_Base_SetConfig+0x128>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00b      	beq.n	80028c0 <TIM_Base_SetConfig+0xe8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a16      	ldr	r2, [pc, #88]	@ (8002904 <TIM_Base_SetConfig+0x12c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d007      	beq.n	80028c0 <TIM_Base_SetConfig+0xe8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a15      	ldr	r2, [pc, #84]	@ (8002908 <TIM_Base_SetConfig+0x130>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d003      	beq.n	80028c0 <TIM_Base_SetConfig+0xe8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a14      	ldr	r2, [pc, #80]	@ (800290c <TIM_Base_SetConfig+0x134>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d103      	bne.n	80028c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d105      	bne.n	80028e6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f023 0201 	bic.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	611a      	str	r2, [r3, #16]
  }
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800
 8002900:	40013400 	.word	0x40013400
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400
 800290c:	40014800 	.word	0x40014800

08002910 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e042      	b.n	8002a34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fe f82d 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2224      	movs	r2, #36	@ 0x24
 80029ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0201 	bic.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fb82 	bl	80030f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8b3 	bl	8002b58 <UART_SetConfig>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e01b      	b.n	8002a34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fc01 	bl	8003234 <UART_CheckIdleState>
 8002a32:	4603      	mov	r3, r0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	@ 0x28
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d17b      	bne.n	8002b4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_UART_Transmit+0x26>
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e074      	b.n	8002b50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2221      	movs	r2, #33	@ 0x21
 8002a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a76:	f7fe f9c7 	bl	8000e08 <HAL_GetTick>
 8002a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	88fa      	ldrh	r2, [r7, #6]
 8002a80:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a94:	d108      	bne.n	8002aa8 <HAL_UART_Transmit+0x6c>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d104      	bne.n	8002aa8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	e003      	b.n	8002ab0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ab0:	e030      	b.n	8002b14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fc63 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e03d      	b.n	8002b50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10b      	bne.n	8002af2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ae8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	3302      	adds	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	e007      	b.n	8002b02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	3301      	adds	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1c8      	bne.n	8002ab2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2200      	movs	r2, #0
 8002b28:	2140      	movs	r1, #64	@ 0x40
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fc2c 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e006      	b.n	8002b50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b5c:	b08c      	sub	sp, #48	@ 0x30
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4bab      	ldr	r3, [pc, #684]	@ (8002e34 <UART_SetConfig+0x2dc>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4aa0      	ldr	r2, [pc, #640]	@ (8002e38 <UART_SetConfig+0x2e0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002bce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	f023 010f 	bic.w	r1, r3, #15
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a91      	ldr	r2, [pc, #580]	@ (8002e3c <UART_SetConfig+0x2e4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d125      	bne.n	8002c48 <UART_SetConfig+0xf0>
 8002bfc:	4b90      	ldr	r3, [pc, #576]	@ (8002e40 <UART_SetConfig+0x2e8>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d81a      	bhi.n	8002c40 <UART_SetConfig+0xe8>
 8002c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c10 <UART_SetConfig+0xb8>)
 8002c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c10:	08002c21 	.word	0x08002c21
 8002c14:	08002c31 	.word	0x08002c31
 8002c18:	08002c29 	.word	0x08002c29
 8002c1c:	08002c39 	.word	0x08002c39
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c26:	e0d6      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c2e:	e0d2      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002c30:	2304      	movs	r3, #4
 8002c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c36:	e0ce      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002c38:	2308      	movs	r3, #8
 8002c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c3e:	e0ca      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002c40:	2310      	movs	r3, #16
 8002c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c46:	e0c6      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e44 <UART_SetConfig+0x2ec>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d138      	bne.n	8002cc4 <UART_SetConfig+0x16c>
 8002c52:	4b7b      	ldr	r3, [pc, #492]	@ (8002e40 <UART_SetConfig+0x2e8>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	d82d      	bhi.n	8002cbc <UART_SetConfig+0x164>
 8002c60:	a201      	add	r2, pc, #4	@ (adr r2, 8002c68 <UART_SetConfig+0x110>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c9d 	.word	0x08002c9d
 8002c6c:	08002cbd 	.word	0x08002cbd
 8002c70:	08002cbd 	.word	0x08002cbd
 8002c74:	08002cbd 	.word	0x08002cbd
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002cbd 	.word	0x08002cbd
 8002c80:	08002cbd 	.word	0x08002cbd
 8002c84:	08002cbd 	.word	0x08002cbd
 8002c88:	08002ca5 	.word	0x08002ca5
 8002c8c:	08002cbd 	.word	0x08002cbd
 8002c90:	08002cbd 	.word	0x08002cbd
 8002c94:	08002cbd 	.word	0x08002cbd
 8002c98:	08002cb5 	.word	0x08002cb5
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ca2:	e098      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002caa:	e094      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002cac:	2304      	movs	r3, #4
 8002cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cb2:	e090      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cba:	e08c      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cc2:	e088      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e48 <UART_SetConfig+0x2f0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d125      	bne.n	8002d1a <UART_SetConfig+0x1c2>
 8002cce:	4b5c      	ldr	r3, [pc, #368]	@ (8002e40 <UART_SetConfig+0x2e8>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002cd8:	2b30      	cmp	r3, #48	@ 0x30
 8002cda:	d016      	beq.n	8002d0a <UART_SetConfig+0x1b2>
 8002cdc:	2b30      	cmp	r3, #48	@ 0x30
 8002cde:	d818      	bhi.n	8002d12 <UART_SetConfig+0x1ba>
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d00a      	beq.n	8002cfa <UART_SetConfig+0x1a2>
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d814      	bhi.n	8002d12 <UART_SetConfig+0x1ba>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <UART_SetConfig+0x19a>
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d008      	beq.n	8002d02 <UART_SetConfig+0x1aa>
 8002cf0:	e00f      	b.n	8002d12 <UART_SetConfig+0x1ba>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf8:	e06d      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d00:	e069      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002d02:	2304      	movs	r3, #4
 8002d04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d08:	e065      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d10:	e061      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002d12:	2310      	movs	r3, #16
 8002d14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d18:	e05d      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a4b      	ldr	r2, [pc, #300]	@ (8002e4c <UART_SetConfig+0x2f4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d125      	bne.n	8002d70 <UART_SetConfig+0x218>
 8002d24:	4b46      	ldr	r3, [pc, #280]	@ (8002e40 <UART_SetConfig+0x2e8>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d30:	d016      	beq.n	8002d60 <UART_SetConfig+0x208>
 8002d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d34:	d818      	bhi.n	8002d68 <UART_SetConfig+0x210>
 8002d36:	2b80      	cmp	r3, #128	@ 0x80
 8002d38:	d00a      	beq.n	8002d50 <UART_SetConfig+0x1f8>
 8002d3a:	2b80      	cmp	r3, #128	@ 0x80
 8002d3c:	d814      	bhi.n	8002d68 <UART_SetConfig+0x210>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <UART_SetConfig+0x1f0>
 8002d42:	2b40      	cmp	r3, #64	@ 0x40
 8002d44:	d008      	beq.n	8002d58 <UART_SetConfig+0x200>
 8002d46:	e00f      	b.n	8002d68 <UART_SetConfig+0x210>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d4e:	e042      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002d50:	2302      	movs	r3, #2
 8002d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d56:	e03e      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d5e:	e03a      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002d60:	2308      	movs	r3, #8
 8002d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d66:	e036      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002d68:	2310      	movs	r3, #16
 8002d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d6e:	e032      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a30      	ldr	r2, [pc, #192]	@ (8002e38 <UART_SetConfig+0x2e0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d12a      	bne.n	8002dd0 <UART_SetConfig+0x278>
 8002d7a:	4b31      	ldr	r3, [pc, #196]	@ (8002e40 <UART_SetConfig+0x2e8>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d88:	d01a      	beq.n	8002dc0 <UART_SetConfig+0x268>
 8002d8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d8e:	d81b      	bhi.n	8002dc8 <UART_SetConfig+0x270>
 8002d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d94:	d00c      	beq.n	8002db0 <UART_SetConfig+0x258>
 8002d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d9a:	d815      	bhi.n	8002dc8 <UART_SetConfig+0x270>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <UART_SetConfig+0x250>
 8002da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da4:	d008      	beq.n	8002db8 <UART_SetConfig+0x260>
 8002da6:	e00f      	b.n	8002dc8 <UART_SetConfig+0x270>
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dae:	e012      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002db0:	2302      	movs	r3, #2
 8002db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002db6:	e00e      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002db8:	2304      	movs	r3, #4
 8002dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dbe:	e00a      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dc6:	e006      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002dc8:	2310      	movs	r3, #16
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dce:	e002      	b.n	8002dd6 <UART_SetConfig+0x27e>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a17      	ldr	r2, [pc, #92]	@ (8002e38 <UART_SetConfig+0x2e0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	f040 80a8 	bne.w	8002f32 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002de2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d834      	bhi.n	8002e54 <UART_SetConfig+0x2fc>
 8002dea:	a201      	add	r2, pc, #4	@ (adr r2, 8002df0 <UART_SetConfig+0x298>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e15 	.word	0x08002e15
 8002df4:	08002e55 	.word	0x08002e55
 8002df8:	08002e1d 	.word	0x08002e1d
 8002dfc:	08002e55 	.word	0x08002e55
 8002e00:	08002e23 	.word	0x08002e23
 8002e04:	08002e55 	.word	0x08002e55
 8002e08:	08002e55 	.word	0x08002e55
 8002e0c:	08002e55 	.word	0x08002e55
 8002e10:	08002e2b 	.word	0x08002e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e14:	f7ff f808 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e1a:	e021      	b.n	8002e60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <UART_SetConfig+0x2f8>)
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e20:	e01e      	b.n	8002e60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e22:	f7fe ff93 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8002e26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e28:	e01a      	b.n	8002e60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e30:	e016      	b.n	8002e60 <UART_SetConfig+0x308>
 8002e32:	bf00      	nop
 8002e34:	cfff69f3 	.word	0xcfff69f3
 8002e38:	40008000 	.word	0x40008000
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40004400 	.word	0x40004400
 8002e48:	40004800 	.word	0x40004800
 8002e4c:	40004c00 	.word	0x40004c00
 8002e50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 812a 	beq.w	80030bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	4a9e      	ldr	r2, [pc, #632]	@ (80030e8 <UART_SetConfig+0x590>)
 8002e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e72:	461a      	mov	r2, r3
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d305      	bcc.n	8002e98 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d903      	bls.n	8002ea0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e9e:	e10d      	b.n	80030bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	60fa      	str	r2, [r7, #12]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	4a8e      	ldr	r2, [pc, #568]	@ (80030e8 <UART_SetConfig+0x590>)
 8002eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ec2:	f7fd f9fd 	bl	80002c0 <__aeabi_uldivmod>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	020b      	lsls	r3, r1, #8
 8002ed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002edc:	0202      	lsls	r2, r0, #8
 8002ede:	6979      	ldr	r1, [r7, #20]
 8002ee0:	6849      	ldr	r1, [r1, #4]
 8002ee2:	0849      	lsrs	r1, r1, #1
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	460c      	mov	r4, r1
 8002ee8:	4605      	mov	r5, r0
 8002eea:	eb12 0804 	adds.w	r8, r2, r4
 8002eee:	eb43 0905 	adc.w	r9, r3, r5
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	469a      	mov	sl, r3
 8002efa:	4693      	mov	fp, r2
 8002efc:	4652      	mov	r2, sl
 8002efe:	465b      	mov	r3, fp
 8002f00:	4640      	mov	r0, r8
 8002f02:	4649      	mov	r1, r9
 8002f04:	f7fd f9dc 	bl	80002c0 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f16:	d308      	bcc.n	8002f2a <UART_SetConfig+0x3d2>
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f1e:	d204      	bcs.n	8002f2a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	e0c8      	b.n	80030bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f30:	e0c4      	b.n	80030bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f3a:	d167      	bne.n	800300c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d828      	bhi.n	8002f96 <UART_SetConfig+0x43e>
 8002f44:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <UART_SetConfig+0x3f4>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f79 	.word	0x08002f79
 8002f54:	08002f81 	.word	0x08002f81
 8002f58:	08002f97 	.word	0x08002f97
 8002f5c:	08002f87 	.word	0x08002f87
 8002f60:	08002f97 	.word	0x08002f97
 8002f64:	08002f97 	.word	0x08002f97
 8002f68:	08002f97 	.word	0x08002f97
 8002f6c:	08002f8f 	.word	0x08002f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f70:	f7fe ff5a 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002f74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f76:	e014      	b.n	8002fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f78:	f7fe ff6c 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002f7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f7e:	e010      	b.n	8002fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f80:	4b5a      	ldr	r3, [pc, #360]	@ (80030ec <UART_SetConfig+0x594>)
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f84:	e00d      	b.n	8002fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f86:	f7fe fee1 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8002f8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f8c:	e009      	b.n	8002fa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f94:	e005      	b.n	8002fa2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8089 	beq.w	80030bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	4a4e      	ldr	r2, [pc, #312]	@ (80030e8 <UART_SetConfig+0x590>)
 8002fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fbc:	005a      	lsls	r2, r3, #1
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	441a      	add	r2, r3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	2b0f      	cmp	r3, #15
 8002fd4:	d916      	bls.n	8003004 <UART_SetConfig+0x4ac>
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fdc:	d212      	bcs.n	8003004 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f023 030f 	bic.w	r3, r3, #15
 8002fe6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	8bfb      	ldrh	r3, [r7, #30]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	8bfa      	ldrh	r2, [r7, #30]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	e05b      	b.n	80030bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800300a:	e057      	b.n	80030bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800300c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003010:	2b08      	cmp	r3, #8
 8003012:	d828      	bhi.n	8003066 <UART_SetConfig+0x50e>
 8003014:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <UART_SetConfig+0x4c4>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003041 	.word	0x08003041
 8003020:	08003049 	.word	0x08003049
 8003024:	08003051 	.word	0x08003051
 8003028:	08003067 	.word	0x08003067
 800302c:	08003057 	.word	0x08003057
 8003030:	08003067 	.word	0x08003067
 8003034:	08003067 	.word	0x08003067
 8003038:	08003067 	.word	0x08003067
 800303c:	0800305f 	.word	0x0800305f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003040:	f7fe fef2 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8003044:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003046:	e014      	b.n	8003072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7fe ff04 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 800304c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800304e:	e010      	b.n	8003072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003050:	4b26      	ldr	r3, [pc, #152]	@ (80030ec <UART_SetConfig+0x594>)
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003054:	e00d      	b.n	8003072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003056:	f7fe fe79 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 800305a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800305c:	e009      	b.n	8003072 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003064:	e005      	b.n	8003072 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003070:	bf00      	nop
    }

    if (pclk != 0U)
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	2b00      	cmp	r3, #0
 8003076:	d021      	beq.n	80030bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	4a1a      	ldr	r2, [pc, #104]	@ (80030e8 <UART_SetConfig+0x590>)
 800307e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003082:	461a      	mov	r2, r3
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	fbb3 f2f2 	udiv	r2, r3, r2
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	441a      	add	r2, r3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	d909      	bls.n	80030b6 <UART_SetConfig+0x55e>
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a8:	d205      	bcs.n	80030b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	e002      	b.n	80030bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2201      	movs	r2, #1
 80030c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2200      	movs	r2, #0
 80030d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80030d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3730      	adds	r7, #48	@ 0x30
 80030e0:	46bd      	mov	sp, r7
 80030e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e6:	bf00      	nop
 80030e8:	08006064 	.word	0x08006064
 80030ec:	00f42400 	.word	0x00f42400

080030f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01a      	beq.n	8003206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031ee:	d10a      	bne.n	8003206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	605a      	str	r2, [r3, #4]
  }
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b098      	sub	sp, #96	@ 0x60
 8003238:	af02      	add	r7, sp, #8
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003244:	f7fd fde0 	bl	8000e08 <HAL_GetTick>
 8003248:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b08      	cmp	r3, #8
 8003256:	d12f      	bne.n	80032b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003258:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003260:	2200      	movs	r2, #0
 8003262:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f88e 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d022      	beq.n	80032b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003286:	653b      	str	r3, [r7, #80]	@ 0x50
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003290:	647b      	str	r3, [r7, #68]	@ 0x44
 8003292:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800329e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e6      	bne.n	8003272 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e063      	b.n	8003380 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d149      	bne.n	800335a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ce:	2200      	movs	r2, #0
 80032d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f857 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d03c      	beq.n	800335a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	623b      	str	r3, [r7, #32]
   return(result);
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003300:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800330c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e6      	bne.n	80032e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	60fb      	str	r3, [r7, #12]
   return(result);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	64bb      	str	r3, [r7, #72]	@ 0x48
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003332:	61fa      	str	r2, [r7, #28]
 8003334:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	69b9      	ldr	r1, [r7, #24]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	617b      	str	r3, [r7, #20]
   return(result);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e5      	bne.n	8003312 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e012      	b.n	8003380 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3758      	adds	r7, #88	@ 0x58
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003398:	e04f      	b.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d04b      	beq.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7fd fd31 	bl	8000e08 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e04e      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d037      	beq.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b80      	cmp	r3, #128	@ 0x80
 80033ce:	d034      	beq.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b40      	cmp	r3, #64	@ 0x40
 80033d4:	d031      	beq.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d110      	bne.n	8003406 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2208      	movs	r2, #8
 80033ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f838 	bl	8003462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2208      	movs	r2, #8
 80033f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e029      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003410:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003414:	d111      	bne.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800341e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f81e 	bl	8003462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e00f      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	429a      	cmp	r2, r3
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	429a      	cmp	r2, r3
 8003456:	d0a0      	beq.n	800339a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003462:	b480      	push	{r7}
 8003464:	b095      	sub	sp, #84	@ 0x54
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800347e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003488:	643b      	str	r3, [r7, #64]	@ 0x40
 800348a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800348e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e6      	bne.n	800346a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3308      	adds	r3, #8
 80034a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e3      	bne.n	800349c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d118      	bne.n	800350e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f023 0310 	bic.w	r3, r3, #16
 80034f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6979      	ldr	r1, [r7, #20]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	613b      	str	r3, [r7, #16]
   return(result);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e6      	bne.n	80034dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003522:	bf00      	nop
 8003524:	3754      	adds	r7, #84	@ 0x54
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_UARTEx_DisableFifoMode+0x16>
 8003540:	2302      	movs	r3, #2
 8003542:	e027      	b.n	8003594 <HAL_UARTEx_DisableFifoMode+0x66>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	@ 0x24
 8003550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003572:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e02d      	b.n	8003614 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	@ 0x24
 80035c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f84f 	bl	8003698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003630:	2302      	movs	r3, #2
 8003632:	e02d      	b.n	8003690 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	@ 0x24
 8003640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f811 	bl	8003698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d108      	bne.n	80036ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80036b8:	e031      	b.n	800371e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80036ba:	2308      	movs	r3, #8
 80036bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80036be:	2308      	movs	r3, #8
 80036c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	0e5b      	lsrs	r3, r3, #25
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	0f5b      	lsrs	r3, r3, #29
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036e2:	7bbb      	ldrb	r3, [r7, #14]
 80036e4:	7b3a      	ldrb	r2, [r7, #12]
 80036e6:	4911      	ldr	r1, [pc, #68]	@ (800372c <UARTEx_SetNbDataToProcess+0x94>)
 80036e8:	5c8a      	ldrb	r2, [r1, r2]
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80036ee:	7b3a      	ldrb	r2, [r7, #12]
 80036f0:	490f      	ldr	r1, [pc, #60]	@ (8003730 <UARTEx_SetNbDataToProcess+0x98>)
 80036f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	7b7a      	ldrb	r2, [r7, #13]
 8003704:	4909      	ldr	r1, [pc, #36]	@ (800372c <UARTEx_SetNbDataToProcess+0x94>)
 8003706:	5c8a      	ldrb	r2, [r1, r2]
 8003708:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800370c:	7b7a      	ldrb	r2, [r7, #13]
 800370e:	4908      	ldr	r1, [pc, #32]	@ (8003730 <UARTEx_SetNbDataToProcess+0x98>)
 8003710:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003712:	fb93 f3f2 	sdiv	r3, r3, r2
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	0800607c 	.word	0x0800607c
 8003730:	08006084 	.word	0x08006084

08003734 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003746:	2b84      	cmp	r3, #132	@ 0x84
 8003748:	d005      	beq.n	8003756 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800374a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4413      	add	r3, r2
 8003752:	3303      	adds	r3, #3
 8003754:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003768:	f000 fb34 	bl	8003dd4 <vTaskStartScheduler>
  
  return osOK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}

08003772 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003772:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003774:	b087      	sub	sp, #28
 8003776:	af02      	add	r7, sp, #8
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685c      	ldr	r4, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003788:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ffcf 	bl	8003734 <makeFreeRtosPriority>
 8003796:	4602      	mov	r2, r0
 8003798:	f107 030c 	add.w	r3, r7, #12
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	9200      	str	r2, [sp, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4632      	mov	r2, r6
 80037a4:	4629      	mov	r1, r5
 80037a6:	4620      	mov	r0, r4
 80037a8:	f000 f992 	bl	8003ad0 <xTaskCreate>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d001      	beq.n	80037b6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80037b6:	68fb      	ldr	r3, [r7, #12]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <osDelay+0x16>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	e000      	b.n	80037d8 <osDelay+0x18>
 80037d6:	2301      	movs	r3, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fac5 	bl	8003d68 <vTaskDelay>
  
  return osOK;
 80037de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f103 0208 	add.w	r2, r3, #8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003800:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f103 0208 	add.w	r2, r3, #8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f103 0208 	add.w	r2, r3, #8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	601a      	str	r2, [r3, #0]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d103      	bne.n	80038aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e00c      	b.n	80038c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3308      	adds	r3, #8
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e002      	b.n	80038b8 <vListInsert+0x2e>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d2f6      	bcs.n	80038b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6892      	ldr	r2, [r2, #8]
 8003912:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6852      	ldr	r2, [r2, #4]
 800391c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d103      	bne.n	8003930 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1e5a      	subs	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800397c:	f001 f80c 	bl	8004998 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	441a      	add	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ac:	3b01      	subs	r3, #1
 80039ae:	68f9      	ldr	r1, [r7, #12]
 80039b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	441a      	add	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	22ff      	movs	r2, #255	@ 0xff
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	22ff      	movs	r2, #255	@ 0xff
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d114      	bne.n	80039fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01a      	beq.n	8003a10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3310      	adds	r3, #16
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fc14 	bl	800420c <xTaskRemoveFromEventList>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d012      	beq.n	8003a10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003a20 <xQueueGenericReset+0xd0>)
 80039ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	e009      	b.n	8003a10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	3310      	adds	r3, #16
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fef1 	bl	80037e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3324      	adds	r3, #36	@ 0x24
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff feec 	bl	80037e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a10:	f000 fff4 	bl	80049fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a14:	2301      	movs	r3, #1
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	e000ed04 	.word	0xe000ed04

08003a24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	@ 0x28
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	613b      	str	r3, [r7, #16]
}
 8003a4a:	bf00      	nop
 8003a4c:	bf00      	nop
 8003a4e:	e7fd      	b.n	8003a4c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	fb02 f303 	mul.w	r3, r2, r3
 8003a58:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3348      	adds	r3, #72	@ 0x48
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 f87a 	bl	8004b58 <pvPortMalloc>
 8003a64:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00d      	beq.n	8003a88 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3348      	adds	r3, #72	@ 0x48
 8003a74:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a76:	79fa      	ldrb	r2, [r7, #7]
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f805 	bl	8003a92 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a88:	69bb      	ldr	r3, [r7, #24]
	}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	e002      	b.n	8003ab4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	69b8      	ldr	r0, [r7, #24]
 8003ac4:	f7ff ff44 	bl	8003950 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	@ 0x30
 8003ad4:	af04      	add	r7, sp, #16
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f837 	bl	8004b58 <pvPortMalloc>
 8003aea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00e      	beq.n	8003b10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003af2:	20a0      	movs	r0, #160	@ 0xa0
 8003af4:	f001 f830 	bl	8004b58 <pvPortMalloc>
 8003af8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b06:	e005      	b.n	8003b14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b08:	6978      	ldr	r0, [r7, #20]
 8003b0a:	f001 f8f3 	bl	8004cf4 <vPortFree>
 8003b0e:	e001      	b.n	8003b14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d013      	beq.n	8003b42 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9303      	str	r3, [sp, #12]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	9302      	str	r3, [sp, #8]
 8003b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f80f 	bl	8003b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b36:	69f8      	ldr	r0, [r7, #28]
 8003b38:	f000 f8ac 	bl	8003c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e002      	b.n	8003b48 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
 8003b46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b48:	69bb      	ldr	r3, [r7, #24]
	}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f023 0307 	bic.w	r3, r3, #7
 8003b7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	617b      	str	r3, [r7, #20]
}
 8003b98:	bf00      	nop
 8003b9a:	bf00      	nop
 8003b9c:	e7fd      	b.n	8003b9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01f      	beq.n	8003be4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	e012      	b.n	8003bd0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	7819      	ldrb	r1, [r3, #0]
 8003bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3334      	adds	r3, #52	@ 0x34
 8003bba:	460a      	mov	r2, r1
 8003bbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d006      	beq.n	8003bd8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b0f      	cmp	r3, #15
 8003bd4:	d9e9      	bls.n	8003baa <prvInitialiseNewTask+0x56>
 8003bd6:	e000      	b.n	8003bda <prvInitialiseNewTask+0x86>
			{
				break;
 8003bd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003be2:	e003      	b.n	8003bec <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d901      	bls.n	8003bf6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bf2:	2306      	movs	r3, #6
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c04:	2200      	movs	r2, #0
 8003c06:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fe0b 	bl	8003828 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	3318      	adds	r3, #24
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fe06 	bl	8003828 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c24:	f1c3 0207 	rsb	r2, r3, #7
 8003c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c30:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	334c      	adds	r3, #76	@ 0x4c
 8003c46:	224c      	movs	r2, #76	@ 0x4c
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 fb7c 	bl	8005348 <memset>
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	4a0d      	ldr	r2, [pc, #52]	@ (8003c88 <prvInitialiseNewTask+0x134>)
 8003c54:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	4a0c      	ldr	r2, [pc, #48]	@ (8003c8c <prvInitialiseNewTask+0x138>)
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c90 <prvInitialiseNewTask+0x13c>)
 8003c60:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	69b8      	ldr	r0, [r7, #24]
 8003c68:	f000 fd64 	bl	8004734 <pxPortInitialiseStack>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c7e:	bf00      	nop
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	200029e0 	.word	0x200029e0
 8003c8c:	20002a48 	.word	0x20002a48
 8003c90:	20002ab0 	.word	0x20002ab0

08003c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c9c:	f000 fe7c 	bl	8004998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d4c <prvAddNewTaskToReadyList+0xb8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	4a29      	ldr	r2, [pc, #164]	@ (8003d4c <prvAddNewTaskToReadyList+0xb8>)
 8003ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003caa:	4b29      	ldr	r3, [pc, #164]	@ (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cb2:	4a27      	ldr	r2, [pc, #156]	@ (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cb8:	4b24      	ldr	r3, [pc, #144]	@ (8003d4c <prvAddNewTaskToReadyList+0xb8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d110      	bne.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cc0:	f000 fb20 	bl	8004304 <prvInitialiseTaskLists>
 8003cc4:	e00d      	b.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cc6:	4b23      	ldr	r3, [pc, #140]	@ (8003d54 <prvAddNewTaskToReadyList+0xc0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cce:	4b20      	ldr	r3, [pc, #128]	@ (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d802      	bhi.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <prvAddNewTaskToReadyList+0xc4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d58 <prvAddNewTaskToReadyList+0xc4>)
 8003cea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	4b19      	ldr	r3, [pc, #100]	@ (8003d5c <prvAddNewTaskToReadyList+0xc8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	4a18      	ldr	r2, [pc, #96]	@ (8003d5c <prvAddNewTaskToReadyList+0xc8>)
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <prvAddNewTaskToReadyList+0xcc>)
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f7ff fd94 	bl	8003842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d1a:	f000 fe6f 	bl	80049fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <prvAddNewTaskToReadyList+0xc0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00e      	beq.n	8003d44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d26:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d207      	bcs.n	8003d44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d34:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <prvAddNewTaskToReadyList+0xd0>)
 8003d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	2000027c 	.word	0x2000027c
 8003d50:	2000017c 	.word	0x2000017c
 8003d54:	20000288 	.word	0x20000288
 8003d58:	20000298 	.word	0x20000298
 8003d5c:	20000284 	.word	0x20000284
 8003d60:	20000180 	.word	0x20000180
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d7a:	4b14      	ldr	r3, [pc, #80]	@ (8003dcc <vTaskDelay+0x64>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <vTaskDelay+0x32>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60bb      	str	r3, [r7, #8]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d9a:	f000 f86d 	bl	8003e78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d9e:	2100      	movs	r1, #0
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fc61 	bl	8004668 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003da6:	f000 f875 	bl	8003e94 <xTaskResumeAll>
 8003daa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d107      	bne.n	8003dc2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003db2:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <vTaskDelay+0x68>)
 8003db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	200002a4 	.word	0x200002a4
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003dda:	4b1f      	ldr	r3, [pc, #124]	@ (8003e58 <vTaskStartScheduler+0x84>)
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	2280      	movs	r2, #128	@ 0x80
 8003de6:	491d      	ldr	r1, [pc, #116]	@ (8003e5c <vTaskStartScheduler+0x88>)
 8003de8:	481d      	ldr	r0, [pc, #116]	@ (8003e60 <vTaskStartScheduler+0x8c>)
 8003dea:	f7ff fe71 	bl	8003ad0 <xTaskCreate>
 8003dee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d11b      	bne.n	8003e2e <vTaskStartScheduler+0x5a>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	60bb      	str	r3, [r7, #8]
}
 8003e08:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e0a:	4b16      	ldr	r3, [pc, #88]	@ (8003e64 <vTaskStartScheduler+0x90>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	334c      	adds	r3, #76	@ 0x4c
 8003e10:	4a15      	ldr	r2, [pc, #84]	@ (8003e68 <vTaskStartScheduler+0x94>)
 8003e12:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e14:	4b15      	ldr	r3, [pc, #84]	@ (8003e6c <vTaskStartScheduler+0x98>)
 8003e16:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e1c:	4b14      	ldr	r3, [pc, #80]	@ (8003e70 <vTaskStartScheduler+0x9c>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e22:	4b14      	ldr	r3, [pc, #80]	@ (8003e74 <vTaskStartScheduler+0xa0>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e28:	f000 fd12 	bl	8004850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e2c:	e00f      	b.n	8003e4e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d10b      	bne.n	8003e4e <vTaskStartScheduler+0x7a>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	607b      	str	r3, [r7, #4]
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <vTaskStartScheduler+0x76>
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200002a0 	.word	0x200002a0
 8003e5c:	08006044 	.word	0x08006044
 8003e60:	080042d5 	.word	0x080042d5
 8003e64:	2000017c 	.word	0x2000017c
 8003e68:	2000001c 	.word	0x2000001c
 8003e6c:	2000029c 	.word	0x2000029c
 8003e70:	20000288 	.word	0x20000288
 8003e74:	20000280 	.word	0x20000280

08003e78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e7c:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <vTaskSuspendAll+0x18>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	4a03      	ldr	r2, [pc, #12]	@ (8003e90 <vTaskSuspendAll+0x18>)
 8003e84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e86:	bf00      	nop
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	200002a4 	.word	0x200002a4

08003e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ea2:	4b42      	ldr	r3, [pc, #264]	@ (8003fac <xTaskResumeAll+0x118>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	603b      	str	r3, [r7, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ec2:	f000 fd69 	bl	8004998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ec6:	4b39      	ldr	r3, [pc, #228]	@ (8003fac <xTaskResumeAll+0x118>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	4a37      	ldr	r2, [pc, #220]	@ (8003fac <xTaskResumeAll+0x118>)
 8003ece:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed0:	4b36      	ldr	r3, [pc, #216]	@ (8003fac <xTaskResumeAll+0x118>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d161      	bne.n	8003f9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ed8:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <xTaskResumeAll+0x11c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05d      	beq.n	8003f9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ee0:	e02e      	b.n	8003f40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee2:	4b34      	ldr	r3, [pc, #208]	@ (8003fb4 <xTaskResumeAll+0x120>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3318      	adds	r3, #24
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fd04 	bl	80038fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fcff 	bl	80038fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	2201      	movs	r2, #1
 8003f04:	409a      	lsls	r2, r3
 8003f06:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb8 <xTaskResumeAll+0x124>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb8 <xTaskResumeAll+0x124>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4a27      	ldr	r2, [pc, #156]	@ (8003fbc <xTaskResumeAll+0x128>)
 8003f1e:	441a      	add	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7ff fc8b 	bl	8003842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f30:	4b23      	ldr	r3, [pc, #140]	@ (8003fc0 <xTaskResumeAll+0x12c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f3a:	4b22      	ldr	r3, [pc, #136]	@ (8003fc4 <xTaskResumeAll+0x130>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f40:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb4 <xTaskResumeAll+0x120>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1cc      	bne.n	8003ee2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f4e:	f000 fa5d 	bl	800440c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f52:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <xTaskResumeAll+0x134>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f5e:	f000 f837 	bl	8003fd0 <xTaskIncrementTick>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f68:	4b16      	ldr	r3, [pc, #88]	@ (8003fc4 <xTaskResumeAll+0x130>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f1      	bne.n	8003f5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003f7a:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <xTaskResumeAll+0x134>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f80:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <xTaskResumeAll+0x130>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fcc <xTaskResumeAll+0x138>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f9c:	f000 fd2e 	bl	80049fc <vPortExitCritical>

	return xAlreadyYielded;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200002a4 	.word	0x200002a4
 8003fb0:	2000027c 	.word	0x2000027c
 8003fb4:	2000023c 	.word	0x2000023c
 8003fb8:	20000284 	.word	0x20000284
 8003fbc:	20000180 	.word	0x20000180
 8003fc0:	2000017c 	.word	0x2000017c
 8003fc4:	20000290 	.word	0x20000290
 8003fc8:	2000028c 	.word	0x2000028c
 8003fcc:	e000ed04 	.word	0xe000ed04

08003fd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fda:	4b4f      	ldr	r3, [pc, #316]	@ (8004118 <xTaskIncrementTick+0x148>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 808f 	bne.w	8004102 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fe4:	4b4d      	ldr	r3, [pc, #308]	@ (800411c <xTaskIncrementTick+0x14c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fec:	4a4b      	ldr	r2, [pc, #300]	@ (800411c <xTaskIncrementTick+0x14c>)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d121      	bne.n	800403c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ff8:	4b49      	ldr	r3, [pc, #292]	@ (8004120 <xTaskIncrementTick+0x150>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	603b      	str	r3, [r7, #0]
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	e7fd      	b.n	8004016 <xTaskIncrementTick+0x46>
 800401a:	4b41      	ldr	r3, [pc, #260]	@ (8004120 <xTaskIncrementTick+0x150>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	4b40      	ldr	r3, [pc, #256]	@ (8004124 <xTaskIncrementTick+0x154>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3e      	ldr	r2, [pc, #248]	@ (8004120 <xTaskIncrementTick+0x150>)
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4a3e      	ldr	r2, [pc, #248]	@ (8004124 <xTaskIncrementTick+0x154>)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b3e      	ldr	r3, [pc, #248]	@ (8004128 <xTaskIncrementTick+0x158>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3301      	adds	r3, #1
 8004034:	4a3c      	ldr	r2, [pc, #240]	@ (8004128 <xTaskIncrementTick+0x158>)
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	f000 f9e8 	bl	800440c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800403c:	4b3b      	ldr	r3, [pc, #236]	@ (800412c <xTaskIncrementTick+0x15c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	429a      	cmp	r2, r3
 8004044:	d348      	bcc.n	80040d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004046:	4b36      	ldr	r3, [pc, #216]	@ (8004120 <xTaskIncrementTick+0x150>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004050:	4b36      	ldr	r3, [pc, #216]	@ (800412c <xTaskIncrementTick+0x15c>)
 8004052:	f04f 32ff 	mov.w	r2, #4294967295
 8004056:	601a      	str	r2, [r3, #0]
					break;
 8004058:	e03e      	b.n	80040d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800405a:	4b31      	ldr	r3, [pc, #196]	@ (8004120 <xTaskIncrementTick+0x150>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d203      	bcs.n	800407a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004072:	4a2e      	ldr	r2, [pc, #184]	@ (800412c <xTaskIncrementTick+0x15c>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004078:	e02e      	b.n	80040d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	3304      	adds	r3, #4
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fc3c 	bl	80038fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3318      	adds	r3, #24
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fc33 	bl	80038fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	2201      	movs	r2, #1
 800409c:	409a      	lsls	r2, r3
 800409e:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <xTaskIncrementTick+0x160>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	4a22      	ldr	r2, [pc, #136]	@ (8004130 <xTaskIncrementTick+0x160>)
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004134 <xTaskIncrementTick+0x164>)
 80040b6:	441a      	add	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	3304      	adds	r3, #4
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f7ff fbbf 	bl	8003842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004138 <xTaskIncrementTick+0x168>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d3b9      	bcc.n	8004046 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040d6:	e7b6      	b.n	8004046 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040d8:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <xTaskIncrementTick+0x168>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040de:	4915      	ldr	r1, [pc, #84]	@ (8004134 <xTaskIncrementTick+0x164>)
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d901      	bls.n	80040f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040f4:	4b11      	ldr	r3, [pc, #68]	@ (800413c <xTaskIncrementTick+0x16c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e004      	b.n	800410c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004102:	4b0f      	ldr	r3, [pc, #60]	@ (8004140 <xTaskIncrementTick+0x170>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	4a0d      	ldr	r2, [pc, #52]	@ (8004140 <xTaskIncrementTick+0x170>)
 800410a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800410c:	697b      	ldr	r3, [r7, #20]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	200002a4 	.word	0x200002a4
 800411c:	20000280 	.word	0x20000280
 8004120:	20000234 	.word	0x20000234
 8004124:	20000238 	.word	0x20000238
 8004128:	20000294 	.word	0x20000294
 800412c:	2000029c 	.word	0x2000029c
 8004130:	20000284 	.word	0x20000284
 8004134:	20000180 	.word	0x20000180
 8004138:	2000017c 	.word	0x2000017c
 800413c:	20000290 	.word	0x20000290
 8004140:	2000028c 	.word	0x2000028c

08004144 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800414a:	4b2a      	ldr	r3, [pc, #168]	@ (80041f4 <vTaskSwitchContext+0xb0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004152:	4b29      	ldr	r3, [pc, #164]	@ (80041f8 <vTaskSwitchContext+0xb4>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004158:	e045      	b.n	80041e6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800415a:	4b27      	ldr	r3, [pc, #156]	@ (80041f8 <vTaskSwitchContext+0xb4>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004160:	4b26      	ldr	r3, [pc, #152]	@ (80041fc <vTaskSwitchContext+0xb8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	fab3 f383 	clz	r3, r3
 800416c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800416e:	7afb      	ldrb	r3, [r7, #11]
 8004170:	f1c3 031f 	rsb	r3, r3, #31
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	4922      	ldr	r1, [pc, #136]	@ (8004200 <vTaskSwitchContext+0xbc>)
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	607b      	str	r3, [r7, #4]
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	e7fd      	b.n	800419e <vTaskSwitchContext+0x5a>
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4a14      	ldr	r2, [pc, #80]	@ (8004200 <vTaskSwitchContext+0xbc>)
 80041ae:	4413      	add	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	3308      	adds	r3, #8
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d104      	bne.n	80041d2 <vTaskSwitchContext+0x8e>
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004204 <vTaskSwitchContext+0xc0>)
 80041da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <vTaskSwitchContext+0xc0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	334c      	adds	r3, #76	@ 0x4c
 80041e2:	4a09      	ldr	r2, [pc, #36]	@ (8004208 <vTaskSwitchContext+0xc4>)
 80041e4:	6013      	str	r3, [r2, #0]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	200002a4 	.word	0x200002a4
 80041f8:	20000290 	.word	0x20000290
 80041fc:	20000284 	.word	0x20000284
 8004200:	20000180 	.word	0x20000180
 8004204:	2000017c 	.word	0x2000017c
 8004208:	2000001c 	.word	0x2000001c

0800420c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60fb      	str	r3, [r7, #12]
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	e7fd      	b.n	8004236 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	3318      	adds	r3, #24
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fb5c 	bl	80038fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004244:	4b1d      	ldr	r3, [pc, #116]	@ (80042bc <xTaskRemoveFromEventList+0xb0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d11c      	bne.n	8004286 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	3304      	adds	r3, #4
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fb53 	bl	80038fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425a:	2201      	movs	r2, #1
 800425c:	409a      	lsls	r2, r3
 800425e:	4b18      	ldr	r3, [pc, #96]	@ (80042c0 <xTaskRemoveFromEventList+0xb4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4313      	orrs	r3, r2
 8004264:	4a16      	ldr	r2, [pc, #88]	@ (80042c0 <xTaskRemoveFromEventList+0xb4>)
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4a13      	ldr	r2, [pc, #76]	@ (80042c4 <xTaskRemoveFromEventList+0xb8>)
 8004276:	441a      	add	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f7ff fadf 	bl	8003842 <vListInsertEnd>
 8004284:	e005      	b.n	8004292 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	3318      	adds	r3, #24
 800428a:	4619      	mov	r1, r3
 800428c:	480e      	ldr	r0, [pc, #56]	@ (80042c8 <xTaskRemoveFromEventList+0xbc>)
 800428e:	f7ff fad8 	bl	8003842 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004296:	4b0d      	ldr	r3, [pc, #52]	@ (80042cc <xTaskRemoveFromEventList+0xc0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	429a      	cmp	r2, r3
 800429e:	d905      	bls.n	80042ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042a0:	2301      	movs	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	@ (80042d0 <xTaskRemoveFromEventList+0xc4>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e001      	b.n	80042b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042b0:	697b      	ldr	r3, [r7, #20]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200002a4 	.word	0x200002a4
 80042c0:	20000284 	.word	0x20000284
 80042c4:	20000180 	.word	0x20000180
 80042c8:	2000023c 	.word	0x2000023c
 80042cc:	2000017c 	.word	0x2000017c
 80042d0:	20000290 	.word	0x20000290

080042d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042dc:	f000 f852 	bl	8004384 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <prvIdleTask+0x28>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d9f9      	bls.n	80042dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80042e8:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <prvIdleTask+0x2c>)
 80042ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042f8:	e7f0      	b.n	80042dc <prvIdleTask+0x8>
 80042fa:	bf00      	nop
 80042fc:	20000180 	.word	0x20000180
 8004300:	e000ed04 	.word	0xe000ed04

08004304 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	e00c      	b.n	800432a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4a12      	ldr	r2, [pc, #72]	@ (8004364 <prvInitialiseTaskLists+0x60>)
 800431c:	4413      	add	r3, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fa62 	bl	80037e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3301      	adds	r3, #1
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b06      	cmp	r3, #6
 800432e:	d9ef      	bls.n	8004310 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004330:	480d      	ldr	r0, [pc, #52]	@ (8004368 <prvInitialiseTaskLists+0x64>)
 8004332:	f7ff fa59 	bl	80037e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004336:	480d      	ldr	r0, [pc, #52]	@ (800436c <prvInitialiseTaskLists+0x68>)
 8004338:	f7ff fa56 	bl	80037e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800433c:	480c      	ldr	r0, [pc, #48]	@ (8004370 <prvInitialiseTaskLists+0x6c>)
 800433e:	f7ff fa53 	bl	80037e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004342:	480c      	ldr	r0, [pc, #48]	@ (8004374 <prvInitialiseTaskLists+0x70>)
 8004344:	f7ff fa50 	bl	80037e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004348:	480b      	ldr	r0, [pc, #44]	@ (8004378 <prvInitialiseTaskLists+0x74>)
 800434a:	f7ff fa4d 	bl	80037e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800434e:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <prvInitialiseTaskLists+0x78>)
 8004350:	4a05      	ldr	r2, [pc, #20]	@ (8004368 <prvInitialiseTaskLists+0x64>)
 8004352:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004354:	4b0a      	ldr	r3, [pc, #40]	@ (8004380 <prvInitialiseTaskLists+0x7c>)
 8004356:	4a05      	ldr	r2, [pc, #20]	@ (800436c <prvInitialiseTaskLists+0x68>)
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000180 	.word	0x20000180
 8004368:	2000020c 	.word	0x2000020c
 800436c:	20000220 	.word	0x20000220
 8004370:	2000023c 	.word	0x2000023c
 8004374:	20000250 	.word	0x20000250
 8004378:	20000268 	.word	0x20000268
 800437c:	20000234 	.word	0x20000234
 8004380:	20000238 	.word	0x20000238

08004384 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800438a:	e019      	b.n	80043c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800438c:	f000 fb04 	bl	8004998 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004390:	4b10      	ldr	r3, [pc, #64]	@ (80043d4 <prvCheckTasksWaitingTermination+0x50>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff faad 	bl	80038fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043a2:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <prvCheckTasksWaitingTermination+0x54>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	4a0b      	ldr	r2, [pc, #44]	@ (80043d8 <prvCheckTasksWaitingTermination+0x54>)
 80043aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043ac:	4b0b      	ldr	r3, [pc, #44]	@ (80043dc <prvCheckTasksWaitingTermination+0x58>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	4a0a      	ldr	r2, [pc, #40]	@ (80043dc <prvCheckTasksWaitingTermination+0x58>)
 80043b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043b6:	f000 fb21 	bl	80049fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f810 	bl	80043e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <prvCheckTasksWaitingTermination+0x58>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e1      	bne.n	800438c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000250 	.word	0x20000250
 80043d8:	2000027c 	.word	0x2000027c
 80043dc:	20000264 	.word	0x20000264

080043e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	334c      	adds	r3, #76	@ 0x4c
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 ffc3 	bl	8005378 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fc7c 	bl	8004cf4 <vPortFree>
			vPortFree( pxTCB );
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fc79 	bl	8004cf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004412:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <prvResetNextTaskUnblockTime+0x38>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800441c:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <prvResetNextTaskUnblockTime+0x3c>)
 800441e:	f04f 32ff 	mov.w	r2, #4294967295
 8004422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004424:	e008      	b.n	8004438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004426:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <prvResetNextTaskUnblockTime+0x38>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a04      	ldr	r2, [pc, #16]	@ (8004448 <prvResetNextTaskUnblockTime+0x3c>)
 8004436:	6013      	str	r3, [r2, #0]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	20000234 	.word	0x20000234
 8004448:	2000029c 	.word	0x2000029c

0800444c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004456:	f000 fa9f 	bl	8004998 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800445a:	4b20      	ldr	r3, [pc, #128]	@ (80044dc <ulTaskNotifyTake+0x90>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004462:	2b00      	cmp	r3, #0
 8004464:	d113      	bne.n	800448e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004466:	4b1d      	ldr	r3, [pc, #116]	@ (80044dc <ulTaskNotifyTake+0x90>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004476:	2101      	movs	r1, #1
 8004478:	6838      	ldr	r0, [r7, #0]
 800447a:	f000 f8f5 	bl	8004668 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800447e:	4b18      	ldr	r3, [pc, #96]	@ (80044e0 <ulTaskNotifyTake+0x94>)
 8004480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800448e:	f000 fab5 	bl	80049fc <vPortExitCritical>

		taskENTER_CRITICAL();
 8004492:	f000 fa81 	bl	8004998 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004496:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <ulTaskNotifyTake+0x90>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800449e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00e      	beq.n	80044c4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <ulTaskNotifyTake+0x90>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80044b6:	e005      	b.n	80044c4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80044b8:	4b08      	ldr	r3, [pc, #32]	@ (80044dc <ulTaskNotifyTake+0x90>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	3a01      	subs	r2, #1
 80044c0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044c4:	4b05      	ldr	r3, [pc, #20]	@ (80044dc <ulTaskNotifyTake+0x90>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 80044ce:	f000 fa95 	bl	80049fc <vPortExitCritical>

		return ulReturn;
 80044d2:	68fb      	ldr	r3, [r7, #12]
	}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	2000017c 	.word	0x2000017c
 80044e0:	e000ed04 	.word	0xe000ed04

080044e4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	@ 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80044f4:	2301      	movs	r3, #1
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <xTaskGenericNotify+0x32>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	61bb      	str	r3, [r7, #24]
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	e7fd      	b.n	8004512 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800451a:	f000 fa3d 	bl	8004998 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8004534:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	2b04      	cmp	r3, #4
 8004542:	d82e      	bhi.n	80045a2 <xTaskGenericNotify+0xbe>
 8004544:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <xTaskGenericNotify+0x68>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	080045c7 	.word	0x080045c7
 8004550:	08004561 	.word	0x08004561
 8004554:	08004573 	.word	0x08004573
 8004558:	08004583 	.word	0x08004583
 800455c:	0800458d 	.word	0x0800458d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	431a      	orrs	r2, r3
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8004570:	e02c      	b.n	80045cc <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8004580:	e024      	b.n	80045cc <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800458a:	e01f      	b.n	80045cc <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800458c:	7ffb      	ldrb	r3, [r7, #31]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d004      	beq.n	800459c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800459a:	e017      	b.n	80045cc <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800459c:	2300      	movs	r3, #0
 800459e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80045a0:	e014      	b.n	80045cc <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d00d      	beq.n	80045ca <xTaskGenericNotify+0xe6>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	617b      	str	r3, [r7, #20]
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <xTaskGenericNotify+0xde>
					break;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <xTaskGenericNotify+0xe8>

					break;
 80045ca:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80045cc:	7ffb      	ldrb	r3, [r7, #31]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d13a      	bne.n	8004648 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff f990 	bl	80038fc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	2201      	movs	r2, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004658 <xTaskGenericNotify+0x174>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004658 <xTaskGenericNotify+0x174>)
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4a18      	ldr	r2, [pc, #96]	@ (800465c <xTaskGenericNotify+0x178>)
 80045fc:	441a      	add	r2, r3
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	3304      	adds	r3, #4
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f7ff f91c 	bl	8003842 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <xTaskGenericNotify+0x146>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	613b      	str	r3, [r7, #16]
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	e7fd      	b.n	8004626 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462e:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <xTaskGenericNotify+0x17c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	429a      	cmp	r2, r3
 8004636:	d907      	bls.n	8004648 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004638:	4b0a      	ldr	r3, [pc, #40]	@ (8004664 <xTaskGenericNotify+0x180>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004648:	f000 f9d8 	bl	80049fc <vPortExitCritical>

		return xReturn;
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800464e:	4618      	mov	r0, r3
 8004650:	3728      	adds	r7, #40	@ 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000284 	.word	0x20000284
 800465c:	20000180 	.word	0x20000180
 8004660:	2000017c 	.word	0x2000017c
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004672:	4b29      	ldr	r3, [pc, #164]	@ (8004718 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004678:	4b28      	ldr	r3, [pc, #160]	@ (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3304      	adds	r3, #4
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff f93c 	bl	80038fc <uxListRemove>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800468a:	4b24      	ldr	r3, [pc, #144]	@ (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	2201      	movs	r2, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43da      	mvns	r2, r3
 8004698:	4b21      	ldr	r3, [pc, #132]	@ (8004720 <prvAddCurrentTaskToDelayedList+0xb8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4013      	ands	r3, r2
 800469e:	4a20      	ldr	r2, [pc, #128]	@ (8004720 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d10a      	bne.n	80046c0 <prvAddCurrentTaskToDelayedList+0x58>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046b0:	4b1a      	ldr	r3, [pc, #104]	@ (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	481a      	ldr	r0, [pc, #104]	@ (8004724 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046ba:	f7ff f8c2 	bl	8003842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046be:	e026      	b.n	800470e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4413      	add	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046c8:	4b14      	ldr	r3, [pc, #80]	@ (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d209      	bcs.n	80046ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3304      	adds	r3, #4
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f7ff f8d0 	bl	800388a <vListInsert>
}
 80046ea:	e010      	b.n	800470e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ec:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <prvAddCurrentTaskToDelayedList+0xc4>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f7ff f8c6 	bl	800388a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	d202      	bcs.n	800470e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004708:	4a09      	ldr	r2, [pc, #36]	@ (8004730 <prvAddCurrentTaskToDelayedList+0xc8>)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6013      	str	r3, [r2, #0]
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000280 	.word	0x20000280
 800471c:	2000017c 	.word	0x2000017c
 8004720:	20000284 	.word	0x20000284
 8004724:	20000268 	.word	0x20000268
 8004728:	20000238 	.word	0x20000238
 800472c:	20000234 	.word	0x20000234
 8004730:	2000029c 	.word	0x2000029c

08004734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3b04      	subs	r3, #4
 8004744:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800474c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3b04      	subs	r3, #4
 8004752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3b04      	subs	r3, #4
 8004762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004764:	4a0c      	ldr	r2, [pc, #48]	@ (8004798 <pxPortInitialiseStack+0x64>)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3b14      	subs	r3, #20
 800476e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3b04      	subs	r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f06f 0202 	mvn.w	r2, #2
 8004782:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3b20      	subs	r3, #32
 8004788:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800478a:	68fb      	ldr	r3, [r7, #12]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	0800479d 	.word	0x0800479d

0800479c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047a6:	4b13      	ldr	r3, [pc, #76]	@ (80047f4 <prvTaskExitError+0x58>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d00b      	beq.n	80047c8 <prvTaskExitError+0x2c>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	60fb      	str	r3, [r7, #12]
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <prvTaskExitError+0x28>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	60bb      	str	r3, [r7, #8]
}
 80047da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047dc:	bf00      	nop
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0fc      	beq.n	80047de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	2000000c 	.word	0x2000000c
	...

08004800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004800:	4b07      	ldr	r3, [pc, #28]	@ (8004820 <pxCurrentTCBConst2>)
 8004802:	6819      	ldr	r1, [r3, #0]
 8004804:	6808      	ldr	r0, [r1, #0]
 8004806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480a:	f380 8809 	msr	PSP, r0
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f04f 0000 	mov.w	r0, #0
 8004816:	f380 8811 	msr	BASEPRI, r0
 800481a:	4770      	bx	lr
 800481c:	f3af 8000 	nop.w

08004820 <pxCurrentTCBConst2>:
 8004820:	2000017c 	.word	0x2000017c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop

08004828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004828:	4808      	ldr	r0, [pc, #32]	@ (800484c <prvPortStartFirstTask+0x24>)
 800482a:	6800      	ldr	r0, [r0, #0]
 800482c:	6800      	ldr	r0, [r0, #0]
 800482e:	f380 8808 	msr	MSP, r0
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f380 8814 	msr	CONTROL, r0
 800483a:	b662      	cpsie	i
 800483c:	b661      	cpsie	f
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	df00      	svc	0
 8004848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800484a:	bf00      	nop
 800484c:	e000ed08 	.word	0xe000ed08

08004850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004856:	4b47      	ldr	r3, [pc, #284]	@ (8004974 <xPortStartScheduler+0x124>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a47      	ldr	r2, [pc, #284]	@ (8004978 <xPortStartScheduler+0x128>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10b      	bne.n	8004878 <xPortStartScheduler+0x28>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	613b      	str	r3, [r7, #16]
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	e7fd      	b.n	8004874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004878:	4b3e      	ldr	r3, [pc, #248]	@ (8004974 <xPortStartScheduler+0x124>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a3f      	ldr	r2, [pc, #252]	@ (800497c <xPortStartScheduler+0x12c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10b      	bne.n	800489a <xPortStartScheduler+0x4a>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60fb      	str	r3, [r7, #12]
}
 8004894:	bf00      	nop
 8004896:	bf00      	nop
 8004898:	e7fd      	b.n	8004896 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800489a:	4b39      	ldr	r3, [pc, #228]	@ (8004980 <xPortStartScheduler+0x130>)
 800489c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	22ff      	movs	r2, #255	@ 0xff
 80048aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4b31      	ldr	r3, [pc, #196]	@ (8004984 <xPortStartScheduler+0x134>)
 80048c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048c2:	4b31      	ldr	r3, [pc, #196]	@ (8004988 <xPortStartScheduler+0x138>)
 80048c4:	2207      	movs	r2, #7
 80048c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048c8:	e009      	b.n	80048de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80048ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004988 <xPortStartScheduler+0x138>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004988 <xPortStartScheduler+0x138>)
 80048d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e6:	2b80      	cmp	r3, #128	@ 0x80
 80048e8:	d0ef      	beq.n	80048ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048ea:	4b27      	ldr	r3, [pc, #156]	@ (8004988 <xPortStartScheduler+0x138>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f1c3 0307 	rsb	r3, r3, #7
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d00b      	beq.n	800490e <xPortStartScheduler+0xbe>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	60bb      	str	r3, [r7, #8]
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	e7fd      	b.n	800490a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800490e:	4b1e      	ldr	r3, [pc, #120]	@ (8004988 <xPortStartScheduler+0x138>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	4a1c      	ldr	r2, [pc, #112]	@ (8004988 <xPortStartScheduler+0x138>)
 8004916:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004918:	4b1b      	ldr	r3, [pc, #108]	@ (8004988 <xPortStartScheduler+0x138>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004920:	4a19      	ldr	r2, [pc, #100]	@ (8004988 <xPortStartScheduler+0x138>)
 8004922:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800492c:	4b17      	ldr	r3, [pc, #92]	@ (800498c <xPortStartScheduler+0x13c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a16      	ldr	r2, [pc, #88]	@ (800498c <xPortStartScheduler+0x13c>)
 8004932:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004936:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004938:	4b14      	ldr	r3, [pc, #80]	@ (800498c <xPortStartScheduler+0x13c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a13      	ldr	r2, [pc, #76]	@ (800498c <xPortStartScheduler+0x13c>)
 800493e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004942:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004944:	f000 f8da 	bl	8004afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004948:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <xPortStartScheduler+0x140>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800494e:	f000 f8f9 	bl	8004b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004952:	4b10      	ldr	r3, [pc, #64]	@ (8004994 <xPortStartScheduler+0x144>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a0f      	ldr	r2, [pc, #60]	@ (8004994 <xPortStartScheduler+0x144>)
 8004958:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800495c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800495e:	f7ff ff63 	bl	8004828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004962:	f7ff fbef 	bl	8004144 <vTaskSwitchContext>
	prvTaskExitError();
 8004966:	f7ff ff19 	bl	800479c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	e000ed00 	.word	0xe000ed00
 8004978:	410fc271 	.word	0x410fc271
 800497c:	410fc270 	.word	0x410fc270
 8004980:	e000e400 	.word	0xe000e400
 8004984:	200002a8 	.word	0x200002a8
 8004988:	200002ac 	.word	0x200002ac
 800498c:	e000ed20 	.word	0xe000ed20
 8004990:	2000000c 	.word	0x2000000c
 8004994:	e000ef34 	.word	0xe000ef34

08004998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	607b      	str	r3, [r7, #4]
}
 80049b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049b2:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <vPortEnterCritical+0x5c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3301      	adds	r3, #1
 80049b8:	4a0e      	ldr	r2, [pc, #56]	@ (80049f4 <vPortEnterCritical+0x5c>)
 80049ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049bc:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <vPortEnterCritical+0x5c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d110      	bne.n	80049e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049c4:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <vPortEnterCritical+0x60>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	603b      	str	r3, [r7, #0]
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	e7fd      	b.n	80049e2 <vPortEnterCritical+0x4a>
	}
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	2000000c 	.word	0x2000000c
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a02:	4b12      	ldr	r3, [pc, #72]	@ (8004a4c <vPortExitCritical+0x50>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10b      	bne.n	8004a22 <vPortExitCritical+0x26>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	607b      	str	r3, [r7, #4]
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	e7fd      	b.n	8004a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a22:	4b0a      	ldr	r3, [pc, #40]	@ (8004a4c <vPortExitCritical+0x50>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	4a08      	ldr	r2, [pc, #32]	@ (8004a4c <vPortExitCritical+0x50>)
 8004a2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a2c:	4b07      	ldr	r3, [pc, #28]	@ (8004a4c <vPortExitCritical+0x50>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <vPortExitCritical+0x44>
 8004a34:	2300      	movs	r3, #0
 8004a36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	2000000c 	.word	0x2000000c

08004a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a50:	f3ef 8009 	mrs	r0, PSP
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	4b15      	ldr	r3, [pc, #84]	@ (8004ab0 <pxCurrentTCBConst>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	f01e 0f10 	tst.w	lr, #16
 8004a60:	bf08      	it	eq
 8004a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6a:	6010      	str	r0, [r2, #0]
 8004a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a74:	f380 8811 	msr	BASEPRI, r0
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f7ff fb60 	bl	8004144 <vTaskSwitchContext>
 8004a84:	f04f 0000 	mov.w	r0, #0
 8004a88:	f380 8811 	msr	BASEPRI, r0
 8004a8c:	bc09      	pop	{r0, r3}
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	6808      	ldr	r0, [r1, #0]
 8004a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a96:	f01e 0f10 	tst.w	lr, #16
 8004a9a:	bf08      	it	eq
 8004a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004aa0:	f380 8809 	msr	PSP, r0
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	f3af 8000 	nop.w

08004ab0 <pxCurrentTCBConst>:
 8004ab0:	2000017c 	.word	0x2000017c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop

08004ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	607b      	str	r3, [r7, #4]
}
 8004ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ad2:	f7ff fa7d 	bl	8003fd0 <xTaskIncrementTick>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004adc:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <SysTick_Handler+0x40>)
 8004ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f383 8811 	msr	BASEPRI, r3
}
 8004aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <vPortSetupTimerInterrupt+0x34>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b06:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <vPortSetupTimerInterrupt+0x38>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b38 <vPortSetupTimerInterrupt+0x3c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a0a      	ldr	r2, [pc, #40]	@ (8004b3c <vPortSetupTimerInterrupt+0x40>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	099b      	lsrs	r3, r3, #6
 8004b18:	4a09      	ldr	r2, [pc, #36]	@ (8004b40 <vPortSetupTimerInterrupt+0x44>)
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b1e:	4b04      	ldr	r3, [pc, #16]	@ (8004b30 <vPortSetupTimerInterrupt+0x34>)
 8004b20:	2207      	movs	r2, #7
 8004b22:	601a      	str	r2, [r3, #0]
}
 8004b24:	bf00      	nop
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	e000e010 	.word	0xe000e010
 8004b34:	e000e018 	.word	0xe000e018
 8004b38:	20000000 	.word	0x20000000
 8004b3c:	10624dd3 	.word	0x10624dd3
 8004b40:	e000e014 	.word	0xe000e014

08004b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004b54 <vPortEnableVFP+0x10>
 8004b48:	6801      	ldr	r1, [r0, #0]
 8004b4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004b4e:	6001      	str	r1, [r0, #0]
 8004b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b52:	bf00      	nop
 8004b54:	e000ed88 	.word	0xe000ed88

08004b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	@ 0x28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b64:	f7ff f988 	bl	8003e78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b68:	4b5c      	ldr	r3, [pc, #368]	@ (8004cdc <pvPortMalloc+0x184>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b70:	f000 f924 	bl	8004dbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b74:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce0 <pvPortMalloc+0x188>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f040 8095 	bne.w	8004cac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01e      	beq.n	8004bc6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004b88:	2208      	movs	r2, #8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d015      	beq.n	8004bc6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f023 0307 	bic.w	r3, r3, #7
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <pvPortMalloc+0x6e>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	617b      	str	r3, [r7, #20]
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	e7fd      	b.n	8004bc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d06f      	beq.n	8004cac <pvPortMalloc+0x154>
 8004bcc:	4b45      	ldr	r3, [pc, #276]	@ (8004ce4 <pvPortMalloc+0x18c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d86a      	bhi.n	8004cac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004bd6:	4b44      	ldr	r3, [pc, #272]	@ (8004ce8 <pvPortMalloc+0x190>)
 8004bd8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004bda:	4b43      	ldr	r3, [pc, #268]	@ (8004ce8 <pvPortMalloc+0x190>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004be0:	e004      	b.n	8004bec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d903      	bls.n	8004bfe <pvPortMalloc+0xa6>
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f1      	bne.n	8004be2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bfe:	4b37      	ldr	r3, [pc, #220]	@ (8004cdc <pvPortMalloc+0x184>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d051      	beq.n	8004cac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	4413      	add	r3, r2
 8004c10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	1ad2      	subs	r2, r2, r3
 8004c22:	2308      	movs	r3, #8
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d920      	bls.n	8004c6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00b      	beq.n	8004c54 <pvPortMalloc+0xfc>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	613b      	str	r3, [r7, #16]
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	e7fd      	b.n	8004c50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	1ad2      	subs	r2, r2, r3
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c66:	69b8      	ldr	r0, [r7, #24]
 8004c68:	f000 f90a 	bl	8004e80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce4 <pvPortMalloc+0x18c>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce4 <pvPortMalloc+0x18c>)
 8004c78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce4 <pvPortMalloc+0x18c>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <pvPortMalloc+0x194>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d203      	bcs.n	8004c8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c86:	4b17      	ldr	r3, [pc, #92]	@ (8004ce4 <pvPortMalloc+0x18c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a18      	ldr	r2, [pc, #96]	@ (8004cec <pvPortMalloc+0x194>)
 8004c8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	4b13      	ldr	r3, [pc, #76]	@ (8004ce0 <pvPortMalloc+0x188>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ca2:	4b13      	ldr	r3, [pc, #76]	@ (8004cf0 <pvPortMalloc+0x198>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	4a11      	ldr	r2, [pc, #68]	@ (8004cf0 <pvPortMalloc+0x198>)
 8004caa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cac:	f7ff f8f2 	bl	8003e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <pvPortMalloc+0x17a>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	60fb      	str	r3, [r7, #12]
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	e7fd      	b.n	8004cce <pvPortMalloc+0x176>
	return pvReturn;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3728      	adds	r7, #40	@ 0x28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	200029c8 	.word	0x200029c8
 8004ce0:	200029dc 	.word	0x200029dc
 8004ce4:	200029cc 	.word	0x200029cc
 8004ce8:	200029c0 	.word	0x200029c0
 8004cec:	200029d0 	.word	0x200029d0
 8004cf0:	200029d4 	.word	0x200029d4

08004cf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d04f      	beq.n	8004da6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d06:	2308      	movs	r3, #8
 8004d08:	425b      	negs	r3, r3
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	4b25      	ldr	r3, [pc, #148]	@ (8004db0 <vPortFree+0xbc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <vPortFree+0x46>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	60fb      	str	r3, [r7, #12]
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <vPortFree+0x66>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60bb      	str	r3, [r7, #8]
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	e7fd      	b.n	8004d56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	4b14      	ldr	r3, [pc, #80]	@ (8004db0 <vPortFree+0xbc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01e      	beq.n	8004da6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d11a      	bne.n	8004da6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	4b0e      	ldr	r3, [pc, #56]	@ (8004db0 <vPortFree+0xbc>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	401a      	ands	r2, r3
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d80:	f7ff f87a 	bl	8003e78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <vPortFree+0xc0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	4a09      	ldr	r2, [pc, #36]	@ (8004db4 <vPortFree+0xc0>)
 8004d90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d92:	6938      	ldr	r0, [r7, #16]
 8004d94:	f000 f874 	bl	8004e80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d98:	4b07      	ldr	r3, [pc, #28]	@ (8004db8 <vPortFree+0xc4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	4a06      	ldr	r2, [pc, #24]	@ (8004db8 <vPortFree+0xc4>)
 8004da0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004da2:	f7ff f877 	bl	8003e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004da6:	bf00      	nop
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	200029dc 	.word	0x200029dc
 8004db4:	200029cc 	.word	0x200029cc
 8004db8:	200029d8 	.word	0x200029d8

08004dbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dc2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004dc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004dc8:	4b27      	ldr	r3, [pc, #156]	@ (8004e68 <prvHeapInit+0xac>)
 8004dca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00c      	beq.n	8004df0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3307      	adds	r3, #7
 8004dda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0307 	bic.w	r3, r3, #7
 8004de2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	4a1f      	ldr	r2, [pc, #124]	@ (8004e68 <prvHeapInit+0xac>)
 8004dec:	4413      	add	r3, r2
 8004dee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004df4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e6c <prvHeapInit+0xb0>)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8004e6c <prvHeapInit+0xb0>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4413      	add	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e08:	2208      	movs	r2, #8
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0307 	bic.w	r3, r3, #7
 8004e16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <prvHeapInit+0xb4>)
 8004e1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e1e:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <prvHeapInit+0xb4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2200      	movs	r2, #0
 8004e24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e26:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <prvHeapInit+0xb4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	1ad2      	subs	r2, r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e70 <prvHeapInit+0xb4>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4a0a      	ldr	r2, [pc, #40]	@ (8004e74 <prvHeapInit+0xb8>)
 8004e4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4a09      	ldr	r2, [pc, #36]	@ (8004e78 <prvHeapInit+0xbc>)
 8004e52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e54:	4b09      	ldr	r3, [pc, #36]	@ (8004e7c <prvHeapInit+0xc0>)
 8004e56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004e5a:	601a      	str	r2, [r3, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	200002b0 	.word	0x200002b0
 8004e6c:	200029c0 	.word	0x200029c0
 8004e70:	200029c8 	.word	0x200029c8
 8004e74:	200029d0 	.word	0x200029d0
 8004e78:	200029cc 	.word	0x200029cc
 8004e7c:	200029dc 	.word	0x200029dc

08004e80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e88:	4b28      	ldr	r3, [pc, #160]	@ (8004f2c <prvInsertBlockIntoFreeList+0xac>)
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e002      	b.n	8004e94 <prvInsertBlockIntoFreeList+0x14>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d8f7      	bhi.n	8004e8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d108      	bne.n	8004ec2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	441a      	add	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	441a      	add	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d118      	bne.n	8004f08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b15      	ldr	r3, [pc, #84]	@ (8004f30 <prvInsertBlockIntoFreeList+0xb0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d00d      	beq.n	8004efe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e008      	b.n	8004f10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004efe:	4b0c      	ldr	r3, [pc, #48]	@ (8004f30 <prvInsertBlockIntoFreeList+0xb0>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e003      	b.n	8004f10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d002      	beq.n	8004f1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	200029c0 	.word	0x200029c0
 8004f30:	200029c8 	.word	0x200029c8

08004f34 <std>:
 8004f34:	2300      	movs	r3, #0
 8004f36:	b510      	push	{r4, lr}
 8004f38:	4604      	mov	r4, r0
 8004f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f42:	6083      	str	r3, [r0, #8]
 8004f44:	8181      	strh	r1, [r0, #12]
 8004f46:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f48:	81c2      	strh	r2, [r0, #14]
 8004f4a:	6183      	str	r3, [r0, #24]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	2208      	movs	r2, #8
 8004f50:	305c      	adds	r0, #92	@ 0x5c
 8004f52:	f000 f9f9 	bl	8005348 <memset>
 8004f56:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <std+0x58>)
 8004f58:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f90 <std+0x5c>)
 8004f5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <std+0x60>)
 8004f60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f62:	4b0d      	ldr	r3, [pc, #52]	@ (8004f98 <std+0x64>)
 8004f64:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f66:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <std+0x68>)
 8004f68:	6224      	str	r4, [r4, #32]
 8004f6a:	429c      	cmp	r4, r3
 8004f6c:	d006      	beq.n	8004f7c <std+0x48>
 8004f6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f72:	4294      	cmp	r4, r2
 8004f74:	d002      	beq.n	8004f7c <std+0x48>
 8004f76:	33d0      	adds	r3, #208	@ 0xd0
 8004f78:	429c      	cmp	r4, r3
 8004f7a:	d105      	bne.n	8004f88 <std+0x54>
 8004f7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f84:	f000 baae 	b.w	80054e4 <__retarget_lock_init_recursive>
 8004f88:	bd10      	pop	{r4, pc}
 8004f8a:	bf00      	nop
 8004f8c:	08005199 	.word	0x08005199
 8004f90:	080051bb 	.word	0x080051bb
 8004f94:	080051f3 	.word	0x080051f3
 8004f98:	08005217 	.word	0x08005217
 8004f9c:	200029e0 	.word	0x200029e0

08004fa0 <stdio_exit_handler>:
 8004fa0:	4a02      	ldr	r2, [pc, #8]	@ (8004fac <stdio_exit_handler+0xc>)
 8004fa2:	4903      	ldr	r1, [pc, #12]	@ (8004fb0 <stdio_exit_handler+0x10>)
 8004fa4:	4803      	ldr	r0, [pc, #12]	@ (8004fb4 <stdio_exit_handler+0x14>)
 8004fa6:	f000 b869 	b.w	800507c <_fwalk_sglue>
 8004faa:	bf00      	nop
 8004fac:	20000010 	.word	0x20000010
 8004fb0:	08005d85 	.word	0x08005d85
 8004fb4:	20000020 	.word	0x20000020

08004fb8 <cleanup_stdio>:
 8004fb8:	6841      	ldr	r1, [r0, #4]
 8004fba:	4b0c      	ldr	r3, [pc, #48]	@ (8004fec <cleanup_stdio+0x34>)
 8004fbc:	4299      	cmp	r1, r3
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	d001      	beq.n	8004fc8 <cleanup_stdio+0x10>
 8004fc4:	f000 fede 	bl	8005d84 <_fflush_r>
 8004fc8:	68a1      	ldr	r1, [r4, #8]
 8004fca:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <cleanup_stdio+0x38>)
 8004fcc:	4299      	cmp	r1, r3
 8004fce:	d002      	beq.n	8004fd6 <cleanup_stdio+0x1e>
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f000 fed7 	bl	8005d84 <_fflush_r>
 8004fd6:	68e1      	ldr	r1, [r4, #12]
 8004fd8:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <cleanup_stdio+0x3c>)
 8004fda:	4299      	cmp	r1, r3
 8004fdc:	d004      	beq.n	8004fe8 <cleanup_stdio+0x30>
 8004fde:	4620      	mov	r0, r4
 8004fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe4:	f000 bece 	b.w	8005d84 <_fflush_r>
 8004fe8:	bd10      	pop	{r4, pc}
 8004fea:	bf00      	nop
 8004fec:	200029e0 	.word	0x200029e0
 8004ff0:	20002a48 	.word	0x20002a48
 8004ff4:	20002ab0 	.word	0x20002ab0

08004ff8 <global_stdio_init.part.0>:
 8004ff8:	b510      	push	{r4, lr}
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8005028 <global_stdio_init.part.0+0x30>)
 8004ffc:	4c0b      	ldr	r4, [pc, #44]	@ (800502c <global_stdio_init.part.0+0x34>)
 8004ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8005030 <global_stdio_init.part.0+0x38>)
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	4620      	mov	r0, r4
 8005004:	2200      	movs	r2, #0
 8005006:	2104      	movs	r1, #4
 8005008:	f7ff ff94 	bl	8004f34 <std>
 800500c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005010:	2201      	movs	r2, #1
 8005012:	2109      	movs	r1, #9
 8005014:	f7ff ff8e 	bl	8004f34 <std>
 8005018:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800501c:	2202      	movs	r2, #2
 800501e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005022:	2112      	movs	r1, #18
 8005024:	f7ff bf86 	b.w	8004f34 <std>
 8005028:	20002b18 	.word	0x20002b18
 800502c:	200029e0 	.word	0x200029e0
 8005030:	08004fa1 	.word	0x08004fa1

08005034 <__sfp_lock_acquire>:
 8005034:	4801      	ldr	r0, [pc, #4]	@ (800503c <__sfp_lock_acquire+0x8>)
 8005036:	f000 ba56 	b.w	80054e6 <__retarget_lock_acquire_recursive>
 800503a:	bf00      	nop
 800503c:	20002b21 	.word	0x20002b21

08005040 <__sfp_lock_release>:
 8005040:	4801      	ldr	r0, [pc, #4]	@ (8005048 <__sfp_lock_release+0x8>)
 8005042:	f000 ba51 	b.w	80054e8 <__retarget_lock_release_recursive>
 8005046:	bf00      	nop
 8005048:	20002b21 	.word	0x20002b21

0800504c <__sinit>:
 800504c:	b510      	push	{r4, lr}
 800504e:	4604      	mov	r4, r0
 8005050:	f7ff fff0 	bl	8005034 <__sfp_lock_acquire>
 8005054:	6a23      	ldr	r3, [r4, #32]
 8005056:	b11b      	cbz	r3, 8005060 <__sinit+0x14>
 8005058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800505c:	f7ff bff0 	b.w	8005040 <__sfp_lock_release>
 8005060:	4b04      	ldr	r3, [pc, #16]	@ (8005074 <__sinit+0x28>)
 8005062:	6223      	str	r3, [r4, #32]
 8005064:	4b04      	ldr	r3, [pc, #16]	@ (8005078 <__sinit+0x2c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f5      	bne.n	8005058 <__sinit+0xc>
 800506c:	f7ff ffc4 	bl	8004ff8 <global_stdio_init.part.0>
 8005070:	e7f2      	b.n	8005058 <__sinit+0xc>
 8005072:	bf00      	nop
 8005074:	08004fb9 	.word	0x08004fb9
 8005078:	20002b18 	.word	0x20002b18

0800507c <_fwalk_sglue>:
 800507c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005080:	4607      	mov	r7, r0
 8005082:	4688      	mov	r8, r1
 8005084:	4614      	mov	r4, r2
 8005086:	2600      	movs	r6, #0
 8005088:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800508c:	f1b9 0901 	subs.w	r9, r9, #1
 8005090:	d505      	bpl.n	800509e <_fwalk_sglue+0x22>
 8005092:	6824      	ldr	r4, [r4, #0]
 8005094:	2c00      	cmp	r4, #0
 8005096:	d1f7      	bne.n	8005088 <_fwalk_sglue+0xc>
 8005098:	4630      	mov	r0, r6
 800509a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800509e:	89ab      	ldrh	r3, [r5, #12]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d907      	bls.n	80050b4 <_fwalk_sglue+0x38>
 80050a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050a8:	3301      	adds	r3, #1
 80050aa:	d003      	beq.n	80050b4 <_fwalk_sglue+0x38>
 80050ac:	4629      	mov	r1, r5
 80050ae:	4638      	mov	r0, r7
 80050b0:	47c0      	blx	r8
 80050b2:	4306      	orrs	r6, r0
 80050b4:	3568      	adds	r5, #104	@ 0x68
 80050b6:	e7e9      	b.n	800508c <_fwalk_sglue+0x10>

080050b8 <iprintf>:
 80050b8:	b40f      	push	{r0, r1, r2, r3}
 80050ba:	b507      	push	{r0, r1, r2, lr}
 80050bc:	4906      	ldr	r1, [pc, #24]	@ (80050d8 <iprintf+0x20>)
 80050be:	ab04      	add	r3, sp, #16
 80050c0:	6808      	ldr	r0, [r1, #0]
 80050c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80050c6:	6881      	ldr	r1, [r0, #8]
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	f000 fb31 	bl	8005730 <_vfiprintf_r>
 80050ce:	b003      	add	sp, #12
 80050d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050d4:	b004      	add	sp, #16
 80050d6:	4770      	bx	lr
 80050d8:	2000001c 	.word	0x2000001c

080050dc <_puts_r>:
 80050dc:	6a03      	ldr	r3, [r0, #32]
 80050de:	b570      	push	{r4, r5, r6, lr}
 80050e0:	6884      	ldr	r4, [r0, #8]
 80050e2:	4605      	mov	r5, r0
 80050e4:	460e      	mov	r6, r1
 80050e6:	b90b      	cbnz	r3, 80050ec <_puts_r+0x10>
 80050e8:	f7ff ffb0 	bl	800504c <__sinit>
 80050ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050ee:	07db      	lsls	r3, r3, #31
 80050f0:	d405      	bmi.n	80050fe <_puts_r+0x22>
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	0598      	lsls	r0, r3, #22
 80050f6:	d402      	bmi.n	80050fe <_puts_r+0x22>
 80050f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050fa:	f000 f9f4 	bl	80054e6 <__retarget_lock_acquire_recursive>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	0719      	lsls	r1, r3, #28
 8005102:	d502      	bpl.n	800510a <_puts_r+0x2e>
 8005104:	6923      	ldr	r3, [r4, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d135      	bne.n	8005176 <_puts_r+0x9a>
 800510a:	4621      	mov	r1, r4
 800510c:	4628      	mov	r0, r5
 800510e:	f000 f8c5 	bl	800529c <__swsetup_r>
 8005112:	b380      	cbz	r0, 8005176 <_puts_r+0x9a>
 8005114:	f04f 35ff 	mov.w	r5, #4294967295
 8005118:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800511a:	07da      	lsls	r2, r3, #31
 800511c:	d405      	bmi.n	800512a <_puts_r+0x4e>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	059b      	lsls	r3, r3, #22
 8005122:	d402      	bmi.n	800512a <_puts_r+0x4e>
 8005124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005126:	f000 f9df 	bl	80054e8 <__retarget_lock_release_recursive>
 800512a:	4628      	mov	r0, r5
 800512c:	bd70      	pop	{r4, r5, r6, pc}
 800512e:	2b00      	cmp	r3, #0
 8005130:	da04      	bge.n	800513c <_puts_r+0x60>
 8005132:	69a2      	ldr	r2, [r4, #24]
 8005134:	429a      	cmp	r2, r3
 8005136:	dc17      	bgt.n	8005168 <_puts_r+0x8c>
 8005138:	290a      	cmp	r1, #10
 800513a:	d015      	beq.n	8005168 <_puts_r+0x8c>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	6022      	str	r2, [r4, #0]
 8005142:	7019      	strb	r1, [r3, #0]
 8005144:	68a3      	ldr	r3, [r4, #8]
 8005146:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800514a:	3b01      	subs	r3, #1
 800514c:	60a3      	str	r3, [r4, #8]
 800514e:	2900      	cmp	r1, #0
 8005150:	d1ed      	bne.n	800512e <_puts_r+0x52>
 8005152:	2b00      	cmp	r3, #0
 8005154:	da11      	bge.n	800517a <_puts_r+0x9e>
 8005156:	4622      	mov	r2, r4
 8005158:	210a      	movs	r1, #10
 800515a:	4628      	mov	r0, r5
 800515c:	f000 f85f 	bl	800521e <__swbuf_r>
 8005160:	3001      	adds	r0, #1
 8005162:	d0d7      	beq.n	8005114 <_puts_r+0x38>
 8005164:	250a      	movs	r5, #10
 8005166:	e7d7      	b.n	8005118 <_puts_r+0x3c>
 8005168:	4622      	mov	r2, r4
 800516a:	4628      	mov	r0, r5
 800516c:	f000 f857 	bl	800521e <__swbuf_r>
 8005170:	3001      	adds	r0, #1
 8005172:	d1e7      	bne.n	8005144 <_puts_r+0x68>
 8005174:	e7ce      	b.n	8005114 <_puts_r+0x38>
 8005176:	3e01      	subs	r6, #1
 8005178:	e7e4      	b.n	8005144 <_puts_r+0x68>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	6022      	str	r2, [r4, #0]
 8005180:	220a      	movs	r2, #10
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e7ee      	b.n	8005164 <_puts_r+0x88>
	...

08005188 <puts>:
 8005188:	4b02      	ldr	r3, [pc, #8]	@ (8005194 <puts+0xc>)
 800518a:	4601      	mov	r1, r0
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	f7ff bfa5 	b.w	80050dc <_puts_r>
 8005192:	bf00      	nop
 8005194:	2000001c 	.word	0x2000001c

08005198 <__sread>:
 8005198:	b510      	push	{r4, lr}
 800519a:	460c      	mov	r4, r1
 800519c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a0:	f000 f952 	bl	8005448 <_read_r>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	bfab      	itete	ge
 80051a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051aa:	89a3      	ldrhlt	r3, [r4, #12]
 80051ac:	181b      	addge	r3, r3, r0
 80051ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051b2:	bfac      	ite	ge
 80051b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051b6:	81a3      	strhlt	r3, [r4, #12]
 80051b8:	bd10      	pop	{r4, pc}

080051ba <__swrite>:
 80051ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051be:	461f      	mov	r7, r3
 80051c0:	898b      	ldrh	r3, [r1, #12]
 80051c2:	05db      	lsls	r3, r3, #23
 80051c4:	4605      	mov	r5, r0
 80051c6:	460c      	mov	r4, r1
 80051c8:	4616      	mov	r6, r2
 80051ca:	d505      	bpl.n	80051d8 <__swrite+0x1e>
 80051cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d0:	2302      	movs	r3, #2
 80051d2:	2200      	movs	r2, #0
 80051d4:	f000 f926 	bl	8005424 <_lseek_r>
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051e2:	81a3      	strh	r3, [r4, #12]
 80051e4:	4632      	mov	r2, r6
 80051e6:	463b      	mov	r3, r7
 80051e8:	4628      	mov	r0, r5
 80051ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ee:	f000 b93d 	b.w	800546c <_write_r>

080051f2 <__sseek>:
 80051f2:	b510      	push	{r4, lr}
 80051f4:	460c      	mov	r4, r1
 80051f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fa:	f000 f913 	bl	8005424 <_lseek_r>
 80051fe:	1c43      	adds	r3, r0, #1
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	bf15      	itete	ne
 8005204:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005206:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800520a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800520e:	81a3      	strheq	r3, [r4, #12]
 8005210:	bf18      	it	ne
 8005212:	81a3      	strhne	r3, [r4, #12]
 8005214:	bd10      	pop	{r4, pc}

08005216 <__sclose>:
 8005216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521a:	f000 b89d 	b.w	8005358 <_close_r>

0800521e <__swbuf_r>:
 800521e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005220:	460e      	mov	r6, r1
 8005222:	4614      	mov	r4, r2
 8005224:	4605      	mov	r5, r0
 8005226:	b118      	cbz	r0, 8005230 <__swbuf_r+0x12>
 8005228:	6a03      	ldr	r3, [r0, #32]
 800522a:	b90b      	cbnz	r3, 8005230 <__swbuf_r+0x12>
 800522c:	f7ff ff0e 	bl	800504c <__sinit>
 8005230:	69a3      	ldr	r3, [r4, #24]
 8005232:	60a3      	str	r3, [r4, #8]
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	071a      	lsls	r2, r3, #28
 8005238:	d501      	bpl.n	800523e <__swbuf_r+0x20>
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	b943      	cbnz	r3, 8005250 <__swbuf_r+0x32>
 800523e:	4621      	mov	r1, r4
 8005240:	4628      	mov	r0, r5
 8005242:	f000 f82b 	bl	800529c <__swsetup_r>
 8005246:	b118      	cbz	r0, 8005250 <__swbuf_r+0x32>
 8005248:	f04f 37ff 	mov.w	r7, #4294967295
 800524c:	4638      	mov	r0, r7
 800524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	6922      	ldr	r2, [r4, #16]
 8005254:	1a98      	subs	r0, r3, r2
 8005256:	6963      	ldr	r3, [r4, #20]
 8005258:	b2f6      	uxtb	r6, r6
 800525a:	4283      	cmp	r3, r0
 800525c:	4637      	mov	r7, r6
 800525e:	dc05      	bgt.n	800526c <__swbuf_r+0x4e>
 8005260:	4621      	mov	r1, r4
 8005262:	4628      	mov	r0, r5
 8005264:	f000 fd8e 	bl	8005d84 <_fflush_r>
 8005268:	2800      	cmp	r0, #0
 800526a:	d1ed      	bne.n	8005248 <__swbuf_r+0x2a>
 800526c:	68a3      	ldr	r3, [r4, #8]
 800526e:	3b01      	subs	r3, #1
 8005270:	60a3      	str	r3, [r4, #8]
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	6022      	str	r2, [r4, #0]
 8005278:	701e      	strb	r6, [r3, #0]
 800527a:	6962      	ldr	r2, [r4, #20]
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	429a      	cmp	r2, r3
 8005280:	d004      	beq.n	800528c <__swbuf_r+0x6e>
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	07db      	lsls	r3, r3, #31
 8005286:	d5e1      	bpl.n	800524c <__swbuf_r+0x2e>
 8005288:	2e0a      	cmp	r6, #10
 800528a:	d1df      	bne.n	800524c <__swbuf_r+0x2e>
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f000 fd78 	bl	8005d84 <_fflush_r>
 8005294:	2800      	cmp	r0, #0
 8005296:	d0d9      	beq.n	800524c <__swbuf_r+0x2e>
 8005298:	e7d6      	b.n	8005248 <__swbuf_r+0x2a>
	...

0800529c <__swsetup_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4b29      	ldr	r3, [pc, #164]	@ (8005344 <__swsetup_r+0xa8>)
 80052a0:	4605      	mov	r5, r0
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	460c      	mov	r4, r1
 80052a6:	b118      	cbz	r0, 80052b0 <__swsetup_r+0x14>
 80052a8:	6a03      	ldr	r3, [r0, #32]
 80052aa:	b90b      	cbnz	r3, 80052b0 <__swsetup_r+0x14>
 80052ac:	f7ff fece 	bl	800504c <__sinit>
 80052b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052b4:	0719      	lsls	r1, r3, #28
 80052b6:	d422      	bmi.n	80052fe <__swsetup_r+0x62>
 80052b8:	06da      	lsls	r2, r3, #27
 80052ba:	d407      	bmi.n	80052cc <__swsetup_r+0x30>
 80052bc:	2209      	movs	r2, #9
 80052be:	602a      	str	r2, [r5, #0]
 80052c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052c4:	81a3      	strh	r3, [r4, #12]
 80052c6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ca:	e033      	b.n	8005334 <__swsetup_r+0x98>
 80052cc:	0758      	lsls	r0, r3, #29
 80052ce:	d512      	bpl.n	80052f6 <__swsetup_r+0x5a>
 80052d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052d2:	b141      	cbz	r1, 80052e6 <__swsetup_r+0x4a>
 80052d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052d8:	4299      	cmp	r1, r3
 80052da:	d002      	beq.n	80052e2 <__swsetup_r+0x46>
 80052dc:	4628      	mov	r0, r5
 80052de:	f000 f905 	bl	80054ec <_free_r>
 80052e2:	2300      	movs	r3, #0
 80052e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	2300      	movs	r3, #0
 80052f0:	6063      	str	r3, [r4, #4]
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	f043 0308 	orr.w	r3, r3, #8
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	b94b      	cbnz	r3, 8005316 <__swsetup_r+0x7a>
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800530c:	d003      	beq.n	8005316 <__swsetup_r+0x7a>
 800530e:	4621      	mov	r1, r4
 8005310:	4628      	mov	r0, r5
 8005312:	f000 fd85 	bl	8005e20 <__smakebuf_r>
 8005316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531a:	f013 0201 	ands.w	r2, r3, #1
 800531e:	d00a      	beq.n	8005336 <__swsetup_r+0x9a>
 8005320:	2200      	movs	r2, #0
 8005322:	60a2      	str	r2, [r4, #8]
 8005324:	6962      	ldr	r2, [r4, #20]
 8005326:	4252      	negs	r2, r2
 8005328:	61a2      	str	r2, [r4, #24]
 800532a:	6922      	ldr	r2, [r4, #16]
 800532c:	b942      	cbnz	r2, 8005340 <__swsetup_r+0xa4>
 800532e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005332:	d1c5      	bne.n	80052c0 <__swsetup_r+0x24>
 8005334:	bd38      	pop	{r3, r4, r5, pc}
 8005336:	0799      	lsls	r1, r3, #30
 8005338:	bf58      	it	pl
 800533a:	6962      	ldrpl	r2, [r4, #20]
 800533c:	60a2      	str	r2, [r4, #8]
 800533e:	e7f4      	b.n	800532a <__swsetup_r+0x8e>
 8005340:	2000      	movs	r0, #0
 8005342:	e7f7      	b.n	8005334 <__swsetup_r+0x98>
 8005344:	2000001c 	.word	0x2000001c

08005348 <memset>:
 8005348:	4402      	add	r2, r0
 800534a:	4603      	mov	r3, r0
 800534c:	4293      	cmp	r3, r2
 800534e:	d100      	bne.n	8005352 <memset+0xa>
 8005350:	4770      	bx	lr
 8005352:	f803 1b01 	strb.w	r1, [r3], #1
 8005356:	e7f9      	b.n	800534c <memset+0x4>

08005358 <_close_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4d06      	ldr	r5, [pc, #24]	@ (8005374 <_close_r+0x1c>)
 800535c:	2300      	movs	r3, #0
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	f7fb fc7f 	bl	8000c66 <_close>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_close_r+0x1a>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_close_r+0x1a>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	20002b1c 	.word	0x20002b1c

08005378 <_reclaim_reent>:
 8005378:	4b29      	ldr	r3, [pc, #164]	@ (8005420 <_reclaim_reent+0xa8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4283      	cmp	r3, r0
 800537e:	b570      	push	{r4, r5, r6, lr}
 8005380:	4604      	mov	r4, r0
 8005382:	d04b      	beq.n	800541c <_reclaim_reent+0xa4>
 8005384:	69c3      	ldr	r3, [r0, #28]
 8005386:	b1ab      	cbz	r3, 80053b4 <_reclaim_reent+0x3c>
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	b16b      	cbz	r3, 80053a8 <_reclaim_reent+0x30>
 800538c:	2500      	movs	r5, #0
 800538e:	69e3      	ldr	r3, [r4, #28]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	5959      	ldr	r1, [r3, r5]
 8005394:	2900      	cmp	r1, #0
 8005396:	d13b      	bne.n	8005410 <_reclaim_reent+0x98>
 8005398:	3504      	adds	r5, #4
 800539a:	2d80      	cmp	r5, #128	@ 0x80
 800539c:	d1f7      	bne.n	800538e <_reclaim_reent+0x16>
 800539e:	69e3      	ldr	r3, [r4, #28]
 80053a0:	4620      	mov	r0, r4
 80053a2:	68d9      	ldr	r1, [r3, #12]
 80053a4:	f000 f8a2 	bl	80054ec <_free_r>
 80053a8:	69e3      	ldr	r3, [r4, #28]
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	b111      	cbz	r1, 80053b4 <_reclaim_reent+0x3c>
 80053ae:	4620      	mov	r0, r4
 80053b0:	f000 f89c 	bl	80054ec <_free_r>
 80053b4:	6961      	ldr	r1, [r4, #20]
 80053b6:	b111      	cbz	r1, 80053be <_reclaim_reent+0x46>
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 f897 	bl	80054ec <_free_r>
 80053be:	69e1      	ldr	r1, [r4, #28]
 80053c0:	b111      	cbz	r1, 80053c8 <_reclaim_reent+0x50>
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 f892 	bl	80054ec <_free_r>
 80053c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80053ca:	b111      	cbz	r1, 80053d2 <_reclaim_reent+0x5a>
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 f88d 	bl	80054ec <_free_r>
 80053d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053d4:	b111      	cbz	r1, 80053dc <_reclaim_reent+0x64>
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 f888 	bl	80054ec <_free_r>
 80053dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80053de:	b111      	cbz	r1, 80053e6 <_reclaim_reent+0x6e>
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 f883 	bl	80054ec <_free_r>
 80053e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80053e8:	b111      	cbz	r1, 80053f0 <_reclaim_reent+0x78>
 80053ea:	4620      	mov	r0, r4
 80053ec:	f000 f87e 	bl	80054ec <_free_r>
 80053f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80053f2:	b111      	cbz	r1, 80053fa <_reclaim_reent+0x82>
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 f879 	bl	80054ec <_free_r>
 80053fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80053fc:	b111      	cbz	r1, 8005404 <_reclaim_reent+0x8c>
 80053fe:	4620      	mov	r0, r4
 8005400:	f000 f874 	bl	80054ec <_free_r>
 8005404:	6a23      	ldr	r3, [r4, #32]
 8005406:	b14b      	cbz	r3, 800541c <_reclaim_reent+0xa4>
 8005408:	4620      	mov	r0, r4
 800540a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800540e:	4718      	bx	r3
 8005410:	680e      	ldr	r6, [r1, #0]
 8005412:	4620      	mov	r0, r4
 8005414:	f000 f86a 	bl	80054ec <_free_r>
 8005418:	4631      	mov	r1, r6
 800541a:	e7bb      	b.n	8005394 <_reclaim_reent+0x1c>
 800541c:	bd70      	pop	{r4, r5, r6, pc}
 800541e:	bf00      	nop
 8005420:	2000001c 	.word	0x2000001c

08005424 <_lseek_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4d07      	ldr	r5, [pc, #28]	@ (8005444 <_lseek_r+0x20>)
 8005428:	4604      	mov	r4, r0
 800542a:	4608      	mov	r0, r1
 800542c:	4611      	mov	r1, r2
 800542e:	2200      	movs	r2, #0
 8005430:	602a      	str	r2, [r5, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	f7fb fc3e 	bl	8000cb4 <_lseek>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_lseek_r+0x1e>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_lseek_r+0x1e>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	20002b1c 	.word	0x20002b1c

08005448 <_read_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4d07      	ldr	r5, [pc, #28]	@ (8005468 <_read_r+0x20>)
 800544c:	4604      	mov	r4, r0
 800544e:	4608      	mov	r0, r1
 8005450:	4611      	mov	r1, r2
 8005452:	2200      	movs	r2, #0
 8005454:	602a      	str	r2, [r5, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	f7fb fbcc 	bl	8000bf4 <_read>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_read_r+0x1e>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_read_r+0x1e>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	20002b1c 	.word	0x20002b1c

0800546c <_write_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d07      	ldr	r5, [pc, #28]	@ (800548c <_write_r+0x20>)
 8005470:	4604      	mov	r4, r0
 8005472:	4608      	mov	r0, r1
 8005474:	4611      	mov	r1, r2
 8005476:	2200      	movs	r2, #0
 8005478:	602a      	str	r2, [r5, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	f7fb fbd7 	bl	8000c2e <_write>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_write_r+0x1e>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_write_r+0x1e>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	20002b1c 	.word	0x20002b1c

08005490 <__errno>:
 8005490:	4b01      	ldr	r3, [pc, #4]	@ (8005498 <__errno+0x8>)
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	2000001c 	.word	0x2000001c

0800549c <__libc_init_array>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	4d0d      	ldr	r5, [pc, #52]	@ (80054d4 <__libc_init_array+0x38>)
 80054a0:	4c0d      	ldr	r4, [pc, #52]	@ (80054d8 <__libc_init_array+0x3c>)
 80054a2:	1b64      	subs	r4, r4, r5
 80054a4:	10a4      	asrs	r4, r4, #2
 80054a6:	2600      	movs	r6, #0
 80054a8:	42a6      	cmp	r6, r4
 80054aa:	d109      	bne.n	80054c0 <__libc_init_array+0x24>
 80054ac:	4d0b      	ldr	r5, [pc, #44]	@ (80054dc <__libc_init_array+0x40>)
 80054ae:	4c0c      	ldr	r4, [pc, #48]	@ (80054e0 <__libc_init_array+0x44>)
 80054b0:	f000 fd24 	bl	8005efc <_init>
 80054b4:	1b64      	subs	r4, r4, r5
 80054b6:	10a4      	asrs	r4, r4, #2
 80054b8:	2600      	movs	r6, #0
 80054ba:	42a6      	cmp	r6, r4
 80054bc:	d105      	bne.n	80054ca <__libc_init_array+0x2e>
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c4:	4798      	blx	r3
 80054c6:	3601      	adds	r6, #1
 80054c8:	e7ee      	b.n	80054a8 <__libc_init_array+0xc>
 80054ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ce:	4798      	blx	r3
 80054d0:	3601      	adds	r6, #1
 80054d2:	e7f2      	b.n	80054ba <__libc_init_array+0x1e>
 80054d4:	080060c8 	.word	0x080060c8
 80054d8:	080060c8 	.word	0x080060c8
 80054dc:	080060c8 	.word	0x080060c8
 80054e0:	080060cc 	.word	0x080060cc

080054e4 <__retarget_lock_init_recursive>:
 80054e4:	4770      	bx	lr

080054e6 <__retarget_lock_acquire_recursive>:
 80054e6:	4770      	bx	lr

080054e8 <__retarget_lock_release_recursive>:
 80054e8:	4770      	bx	lr
	...

080054ec <_free_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4605      	mov	r5, r0
 80054f0:	2900      	cmp	r1, #0
 80054f2:	d041      	beq.n	8005578 <_free_r+0x8c>
 80054f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f8:	1f0c      	subs	r4, r1, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bfb8      	it	lt
 80054fe:	18e4      	addlt	r4, r4, r3
 8005500:	f000 f8e0 	bl	80056c4 <__malloc_lock>
 8005504:	4a1d      	ldr	r2, [pc, #116]	@ (800557c <_free_r+0x90>)
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	b933      	cbnz	r3, 8005518 <_free_r+0x2c>
 800550a:	6063      	str	r3, [r4, #4]
 800550c:	6014      	str	r4, [r2, #0]
 800550e:	4628      	mov	r0, r5
 8005510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005514:	f000 b8dc 	b.w	80056d0 <__malloc_unlock>
 8005518:	42a3      	cmp	r3, r4
 800551a:	d908      	bls.n	800552e <_free_r+0x42>
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	1821      	adds	r1, r4, r0
 8005520:	428b      	cmp	r3, r1
 8005522:	bf01      	itttt	eq
 8005524:	6819      	ldreq	r1, [r3, #0]
 8005526:	685b      	ldreq	r3, [r3, #4]
 8005528:	1809      	addeq	r1, r1, r0
 800552a:	6021      	streq	r1, [r4, #0]
 800552c:	e7ed      	b.n	800550a <_free_r+0x1e>
 800552e:	461a      	mov	r2, r3
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	b10b      	cbz	r3, 8005538 <_free_r+0x4c>
 8005534:	42a3      	cmp	r3, r4
 8005536:	d9fa      	bls.n	800552e <_free_r+0x42>
 8005538:	6811      	ldr	r1, [r2, #0]
 800553a:	1850      	adds	r0, r2, r1
 800553c:	42a0      	cmp	r0, r4
 800553e:	d10b      	bne.n	8005558 <_free_r+0x6c>
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	4401      	add	r1, r0
 8005544:	1850      	adds	r0, r2, r1
 8005546:	4283      	cmp	r3, r0
 8005548:	6011      	str	r1, [r2, #0]
 800554a:	d1e0      	bne.n	800550e <_free_r+0x22>
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	6053      	str	r3, [r2, #4]
 8005552:	4408      	add	r0, r1
 8005554:	6010      	str	r0, [r2, #0]
 8005556:	e7da      	b.n	800550e <_free_r+0x22>
 8005558:	d902      	bls.n	8005560 <_free_r+0x74>
 800555a:	230c      	movs	r3, #12
 800555c:	602b      	str	r3, [r5, #0]
 800555e:	e7d6      	b.n	800550e <_free_r+0x22>
 8005560:	6820      	ldr	r0, [r4, #0]
 8005562:	1821      	adds	r1, r4, r0
 8005564:	428b      	cmp	r3, r1
 8005566:	bf04      	itt	eq
 8005568:	6819      	ldreq	r1, [r3, #0]
 800556a:	685b      	ldreq	r3, [r3, #4]
 800556c:	6063      	str	r3, [r4, #4]
 800556e:	bf04      	itt	eq
 8005570:	1809      	addeq	r1, r1, r0
 8005572:	6021      	streq	r1, [r4, #0]
 8005574:	6054      	str	r4, [r2, #4]
 8005576:	e7ca      	b.n	800550e <_free_r+0x22>
 8005578:	bd38      	pop	{r3, r4, r5, pc}
 800557a:	bf00      	nop
 800557c:	20002b28 	.word	0x20002b28

08005580 <sbrk_aligned>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	4e0f      	ldr	r6, [pc, #60]	@ (80055c0 <sbrk_aligned+0x40>)
 8005584:	460c      	mov	r4, r1
 8005586:	6831      	ldr	r1, [r6, #0]
 8005588:	4605      	mov	r5, r0
 800558a:	b911      	cbnz	r1, 8005592 <sbrk_aligned+0x12>
 800558c:	f000 fca6 	bl	8005edc <_sbrk_r>
 8005590:	6030      	str	r0, [r6, #0]
 8005592:	4621      	mov	r1, r4
 8005594:	4628      	mov	r0, r5
 8005596:	f000 fca1 	bl	8005edc <_sbrk_r>
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	d103      	bne.n	80055a6 <sbrk_aligned+0x26>
 800559e:	f04f 34ff 	mov.w	r4, #4294967295
 80055a2:	4620      	mov	r0, r4
 80055a4:	bd70      	pop	{r4, r5, r6, pc}
 80055a6:	1cc4      	adds	r4, r0, #3
 80055a8:	f024 0403 	bic.w	r4, r4, #3
 80055ac:	42a0      	cmp	r0, r4
 80055ae:	d0f8      	beq.n	80055a2 <sbrk_aligned+0x22>
 80055b0:	1a21      	subs	r1, r4, r0
 80055b2:	4628      	mov	r0, r5
 80055b4:	f000 fc92 	bl	8005edc <_sbrk_r>
 80055b8:	3001      	adds	r0, #1
 80055ba:	d1f2      	bne.n	80055a2 <sbrk_aligned+0x22>
 80055bc:	e7ef      	b.n	800559e <sbrk_aligned+0x1e>
 80055be:	bf00      	nop
 80055c0:	20002b24 	.word	0x20002b24

080055c4 <_malloc_r>:
 80055c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c8:	1ccd      	adds	r5, r1, #3
 80055ca:	f025 0503 	bic.w	r5, r5, #3
 80055ce:	3508      	adds	r5, #8
 80055d0:	2d0c      	cmp	r5, #12
 80055d2:	bf38      	it	cc
 80055d4:	250c      	movcc	r5, #12
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	4606      	mov	r6, r0
 80055da:	db01      	blt.n	80055e0 <_malloc_r+0x1c>
 80055dc:	42a9      	cmp	r1, r5
 80055de:	d904      	bls.n	80055ea <_malloc_r+0x26>
 80055e0:	230c      	movs	r3, #12
 80055e2:	6033      	str	r3, [r6, #0]
 80055e4:	2000      	movs	r0, #0
 80055e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056c0 <_malloc_r+0xfc>
 80055ee:	f000 f869 	bl	80056c4 <__malloc_lock>
 80055f2:	f8d8 3000 	ldr.w	r3, [r8]
 80055f6:	461c      	mov	r4, r3
 80055f8:	bb44      	cbnz	r4, 800564c <_malloc_r+0x88>
 80055fa:	4629      	mov	r1, r5
 80055fc:	4630      	mov	r0, r6
 80055fe:	f7ff ffbf 	bl	8005580 <sbrk_aligned>
 8005602:	1c43      	adds	r3, r0, #1
 8005604:	4604      	mov	r4, r0
 8005606:	d158      	bne.n	80056ba <_malloc_r+0xf6>
 8005608:	f8d8 4000 	ldr.w	r4, [r8]
 800560c:	4627      	mov	r7, r4
 800560e:	2f00      	cmp	r7, #0
 8005610:	d143      	bne.n	800569a <_malloc_r+0xd6>
 8005612:	2c00      	cmp	r4, #0
 8005614:	d04b      	beq.n	80056ae <_malloc_r+0xea>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	4639      	mov	r1, r7
 800561a:	4630      	mov	r0, r6
 800561c:	eb04 0903 	add.w	r9, r4, r3
 8005620:	f000 fc5c 	bl	8005edc <_sbrk_r>
 8005624:	4581      	cmp	r9, r0
 8005626:	d142      	bne.n	80056ae <_malloc_r+0xea>
 8005628:	6821      	ldr	r1, [r4, #0]
 800562a:	1a6d      	subs	r5, r5, r1
 800562c:	4629      	mov	r1, r5
 800562e:	4630      	mov	r0, r6
 8005630:	f7ff ffa6 	bl	8005580 <sbrk_aligned>
 8005634:	3001      	adds	r0, #1
 8005636:	d03a      	beq.n	80056ae <_malloc_r+0xea>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	442b      	add	r3, r5
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	f8d8 3000 	ldr.w	r3, [r8]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	bb62      	cbnz	r2, 80056a0 <_malloc_r+0xdc>
 8005646:	f8c8 7000 	str.w	r7, [r8]
 800564a:	e00f      	b.n	800566c <_malloc_r+0xa8>
 800564c:	6822      	ldr	r2, [r4, #0]
 800564e:	1b52      	subs	r2, r2, r5
 8005650:	d420      	bmi.n	8005694 <_malloc_r+0xd0>
 8005652:	2a0b      	cmp	r2, #11
 8005654:	d917      	bls.n	8005686 <_malloc_r+0xc2>
 8005656:	1961      	adds	r1, r4, r5
 8005658:	42a3      	cmp	r3, r4
 800565a:	6025      	str	r5, [r4, #0]
 800565c:	bf18      	it	ne
 800565e:	6059      	strne	r1, [r3, #4]
 8005660:	6863      	ldr	r3, [r4, #4]
 8005662:	bf08      	it	eq
 8005664:	f8c8 1000 	streq.w	r1, [r8]
 8005668:	5162      	str	r2, [r4, r5]
 800566a:	604b      	str	r3, [r1, #4]
 800566c:	4630      	mov	r0, r6
 800566e:	f000 f82f 	bl	80056d0 <__malloc_unlock>
 8005672:	f104 000b 	add.w	r0, r4, #11
 8005676:	1d23      	adds	r3, r4, #4
 8005678:	f020 0007 	bic.w	r0, r0, #7
 800567c:	1ac2      	subs	r2, r0, r3
 800567e:	bf1c      	itt	ne
 8005680:	1a1b      	subne	r3, r3, r0
 8005682:	50a3      	strne	r3, [r4, r2]
 8005684:	e7af      	b.n	80055e6 <_malloc_r+0x22>
 8005686:	6862      	ldr	r2, [r4, #4]
 8005688:	42a3      	cmp	r3, r4
 800568a:	bf0c      	ite	eq
 800568c:	f8c8 2000 	streq.w	r2, [r8]
 8005690:	605a      	strne	r2, [r3, #4]
 8005692:	e7eb      	b.n	800566c <_malloc_r+0xa8>
 8005694:	4623      	mov	r3, r4
 8005696:	6864      	ldr	r4, [r4, #4]
 8005698:	e7ae      	b.n	80055f8 <_malloc_r+0x34>
 800569a:	463c      	mov	r4, r7
 800569c:	687f      	ldr	r7, [r7, #4]
 800569e:	e7b6      	b.n	800560e <_malloc_r+0x4a>
 80056a0:	461a      	mov	r2, r3
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	d1fb      	bne.n	80056a0 <_malloc_r+0xdc>
 80056a8:	2300      	movs	r3, #0
 80056aa:	6053      	str	r3, [r2, #4]
 80056ac:	e7de      	b.n	800566c <_malloc_r+0xa8>
 80056ae:	230c      	movs	r3, #12
 80056b0:	6033      	str	r3, [r6, #0]
 80056b2:	4630      	mov	r0, r6
 80056b4:	f000 f80c 	bl	80056d0 <__malloc_unlock>
 80056b8:	e794      	b.n	80055e4 <_malloc_r+0x20>
 80056ba:	6005      	str	r5, [r0, #0]
 80056bc:	e7d6      	b.n	800566c <_malloc_r+0xa8>
 80056be:	bf00      	nop
 80056c0:	20002b28 	.word	0x20002b28

080056c4 <__malloc_lock>:
 80056c4:	4801      	ldr	r0, [pc, #4]	@ (80056cc <__malloc_lock+0x8>)
 80056c6:	f7ff bf0e 	b.w	80054e6 <__retarget_lock_acquire_recursive>
 80056ca:	bf00      	nop
 80056cc:	20002b20 	.word	0x20002b20

080056d0 <__malloc_unlock>:
 80056d0:	4801      	ldr	r0, [pc, #4]	@ (80056d8 <__malloc_unlock+0x8>)
 80056d2:	f7ff bf09 	b.w	80054e8 <__retarget_lock_release_recursive>
 80056d6:	bf00      	nop
 80056d8:	20002b20 	.word	0x20002b20

080056dc <__sfputc_r>:
 80056dc:	6893      	ldr	r3, [r2, #8]
 80056de:	3b01      	subs	r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	b410      	push	{r4}
 80056e4:	6093      	str	r3, [r2, #8]
 80056e6:	da08      	bge.n	80056fa <__sfputc_r+0x1e>
 80056e8:	6994      	ldr	r4, [r2, #24]
 80056ea:	42a3      	cmp	r3, r4
 80056ec:	db01      	blt.n	80056f2 <__sfputc_r+0x16>
 80056ee:	290a      	cmp	r1, #10
 80056f0:	d103      	bne.n	80056fa <__sfputc_r+0x1e>
 80056f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056f6:	f7ff bd92 	b.w	800521e <__swbuf_r>
 80056fa:	6813      	ldr	r3, [r2, #0]
 80056fc:	1c58      	adds	r0, r3, #1
 80056fe:	6010      	str	r0, [r2, #0]
 8005700:	7019      	strb	r1, [r3, #0]
 8005702:	4608      	mov	r0, r1
 8005704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005708:	4770      	bx	lr

0800570a <__sfputs_r>:
 800570a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570c:	4606      	mov	r6, r0
 800570e:	460f      	mov	r7, r1
 8005710:	4614      	mov	r4, r2
 8005712:	18d5      	adds	r5, r2, r3
 8005714:	42ac      	cmp	r4, r5
 8005716:	d101      	bne.n	800571c <__sfputs_r+0x12>
 8005718:	2000      	movs	r0, #0
 800571a:	e007      	b.n	800572c <__sfputs_r+0x22>
 800571c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005720:	463a      	mov	r2, r7
 8005722:	4630      	mov	r0, r6
 8005724:	f7ff ffda 	bl	80056dc <__sfputc_r>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d1f3      	bne.n	8005714 <__sfputs_r+0xa>
 800572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005730 <_vfiprintf_r>:
 8005730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005734:	460d      	mov	r5, r1
 8005736:	b09d      	sub	sp, #116	@ 0x74
 8005738:	4614      	mov	r4, r2
 800573a:	4698      	mov	r8, r3
 800573c:	4606      	mov	r6, r0
 800573e:	b118      	cbz	r0, 8005748 <_vfiprintf_r+0x18>
 8005740:	6a03      	ldr	r3, [r0, #32]
 8005742:	b90b      	cbnz	r3, 8005748 <_vfiprintf_r+0x18>
 8005744:	f7ff fc82 	bl	800504c <__sinit>
 8005748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800574a:	07d9      	lsls	r1, r3, #31
 800574c:	d405      	bmi.n	800575a <_vfiprintf_r+0x2a>
 800574e:	89ab      	ldrh	r3, [r5, #12]
 8005750:	059a      	lsls	r2, r3, #22
 8005752:	d402      	bmi.n	800575a <_vfiprintf_r+0x2a>
 8005754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005756:	f7ff fec6 	bl	80054e6 <__retarget_lock_acquire_recursive>
 800575a:	89ab      	ldrh	r3, [r5, #12]
 800575c:	071b      	lsls	r3, r3, #28
 800575e:	d501      	bpl.n	8005764 <_vfiprintf_r+0x34>
 8005760:	692b      	ldr	r3, [r5, #16]
 8005762:	b99b      	cbnz	r3, 800578c <_vfiprintf_r+0x5c>
 8005764:	4629      	mov	r1, r5
 8005766:	4630      	mov	r0, r6
 8005768:	f7ff fd98 	bl	800529c <__swsetup_r>
 800576c:	b170      	cbz	r0, 800578c <_vfiprintf_r+0x5c>
 800576e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005770:	07dc      	lsls	r4, r3, #31
 8005772:	d504      	bpl.n	800577e <_vfiprintf_r+0x4e>
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
 8005778:	b01d      	add	sp, #116	@ 0x74
 800577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577e:	89ab      	ldrh	r3, [r5, #12]
 8005780:	0598      	lsls	r0, r3, #22
 8005782:	d4f7      	bmi.n	8005774 <_vfiprintf_r+0x44>
 8005784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005786:	f7ff feaf 	bl	80054e8 <__retarget_lock_release_recursive>
 800578a:	e7f3      	b.n	8005774 <_vfiprintf_r+0x44>
 800578c:	2300      	movs	r3, #0
 800578e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005790:	2320      	movs	r3, #32
 8005792:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005796:	f8cd 800c 	str.w	r8, [sp, #12]
 800579a:	2330      	movs	r3, #48	@ 0x30
 800579c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800594c <_vfiprintf_r+0x21c>
 80057a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057a4:	f04f 0901 	mov.w	r9, #1
 80057a8:	4623      	mov	r3, r4
 80057aa:	469a      	mov	sl, r3
 80057ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057b0:	b10a      	cbz	r2, 80057b6 <_vfiprintf_r+0x86>
 80057b2:	2a25      	cmp	r2, #37	@ 0x25
 80057b4:	d1f9      	bne.n	80057aa <_vfiprintf_r+0x7a>
 80057b6:	ebba 0b04 	subs.w	fp, sl, r4
 80057ba:	d00b      	beq.n	80057d4 <_vfiprintf_r+0xa4>
 80057bc:	465b      	mov	r3, fp
 80057be:	4622      	mov	r2, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7ff ffa1 	bl	800570a <__sfputs_r>
 80057c8:	3001      	adds	r0, #1
 80057ca:	f000 80a7 	beq.w	800591c <_vfiprintf_r+0x1ec>
 80057ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057d0:	445a      	add	r2, fp
 80057d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80057d4:	f89a 3000 	ldrb.w	r3, [sl]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 809f 	beq.w	800591c <_vfiprintf_r+0x1ec>
 80057de:	2300      	movs	r3, #0
 80057e0:	f04f 32ff 	mov.w	r2, #4294967295
 80057e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057e8:	f10a 0a01 	add.w	sl, sl, #1
 80057ec:	9304      	str	r3, [sp, #16]
 80057ee:	9307      	str	r3, [sp, #28]
 80057f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80057f6:	4654      	mov	r4, sl
 80057f8:	2205      	movs	r2, #5
 80057fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fe:	4853      	ldr	r0, [pc, #332]	@ (800594c <_vfiprintf_r+0x21c>)
 8005800:	f7fa fd0e 	bl	8000220 <memchr>
 8005804:	9a04      	ldr	r2, [sp, #16]
 8005806:	b9d8      	cbnz	r0, 8005840 <_vfiprintf_r+0x110>
 8005808:	06d1      	lsls	r1, r2, #27
 800580a:	bf44      	itt	mi
 800580c:	2320      	movmi	r3, #32
 800580e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005812:	0713      	lsls	r3, r2, #28
 8005814:	bf44      	itt	mi
 8005816:	232b      	movmi	r3, #43	@ 0x2b
 8005818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800581c:	f89a 3000 	ldrb.w	r3, [sl]
 8005820:	2b2a      	cmp	r3, #42	@ 0x2a
 8005822:	d015      	beq.n	8005850 <_vfiprintf_r+0x120>
 8005824:	9a07      	ldr	r2, [sp, #28]
 8005826:	4654      	mov	r4, sl
 8005828:	2000      	movs	r0, #0
 800582a:	f04f 0c0a 	mov.w	ip, #10
 800582e:	4621      	mov	r1, r4
 8005830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005834:	3b30      	subs	r3, #48	@ 0x30
 8005836:	2b09      	cmp	r3, #9
 8005838:	d94b      	bls.n	80058d2 <_vfiprintf_r+0x1a2>
 800583a:	b1b0      	cbz	r0, 800586a <_vfiprintf_r+0x13a>
 800583c:	9207      	str	r2, [sp, #28]
 800583e:	e014      	b.n	800586a <_vfiprintf_r+0x13a>
 8005840:	eba0 0308 	sub.w	r3, r0, r8
 8005844:	fa09 f303 	lsl.w	r3, r9, r3
 8005848:	4313      	orrs	r3, r2
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	46a2      	mov	sl, r4
 800584e:	e7d2      	b.n	80057f6 <_vfiprintf_r+0xc6>
 8005850:	9b03      	ldr	r3, [sp, #12]
 8005852:	1d19      	adds	r1, r3, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	9103      	str	r1, [sp, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	bfbb      	ittet	lt
 800585c:	425b      	neglt	r3, r3
 800585e:	f042 0202 	orrlt.w	r2, r2, #2
 8005862:	9307      	strge	r3, [sp, #28]
 8005864:	9307      	strlt	r3, [sp, #28]
 8005866:	bfb8      	it	lt
 8005868:	9204      	strlt	r2, [sp, #16]
 800586a:	7823      	ldrb	r3, [r4, #0]
 800586c:	2b2e      	cmp	r3, #46	@ 0x2e
 800586e:	d10a      	bne.n	8005886 <_vfiprintf_r+0x156>
 8005870:	7863      	ldrb	r3, [r4, #1]
 8005872:	2b2a      	cmp	r3, #42	@ 0x2a
 8005874:	d132      	bne.n	80058dc <_vfiprintf_r+0x1ac>
 8005876:	9b03      	ldr	r3, [sp, #12]
 8005878:	1d1a      	adds	r2, r3, #4
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	9203      	str	r2, [sp, #12]
 800587e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005882:	3402      	adds	r4, #2
 8005884:	9305      	str	r3, [sp, #20]
 8005886:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800595c <_vfiprintf_r+0x22c>
 800588a:	7821      	ldrb	r1, [r4, #0]
 800588c:	2203      	movs	r2, #3
 800588e:	4650      	mov	r0, sl
 8005890:	f7fa fcc6 	bl	8000220 <memchr>
 8005894:	b138      	cbz	r0, 80058a6 <_vfiprintf_r+0x176>
 8005896:	9b04      	ldr	r3, [sp, #16]
 8005898:	eba0 000a 	sub.w	r0, r0, sl
 800589c:	2240      	movs	r2, #64	@ 0x40
 800589e:	4082      	lsls	r2, r0
 80058a0:	4313      	orrs	r3, r2
 80058a2:	3401      	adds	r4, #1
 80058a4:	9304      	str	r3, [sp, #16]
 80058a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058aa:	4829      	ldr	r0, [pc, #164]	@ (8005950 <_vfiprintf_r+0x220>)
 80058ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058b0:	2206      	movs	r2, #6
 80058b2:	f7fa fcb5 	bl	8000220 <memchr>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d03f      	beq.n	800593a <_vfiprintf_r+0x20a>
 80058ba:	4b26      	ldr	r3, [pc, #152]	@ (8005954 <_vfiprintf_r+0x224>)
 80058bc:	bb1b      	cbnz	r3, 8005906 <_vfiprintf_r+0x1d6>
 80058be:	9b03      	ldr	r3, [sp, #12]
 80058c0:	3307      	adds	r3, #7
 80058c2:	f023 0307 	bic.w	r3, r3, #7
 80058c6:	3308      	adds	r3, #8
 80058c8:	9303      	str	r3, [sp, #12]
 80058ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058cc:	443b      	add	r3, r7
 80058ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80058d0:	e76a      	b.n	80057a8 <_vfiprintf_r+0x78>
 80058d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80058d6:	460c      	mov	r4, r1
 80058d8:	2001      	movs	r0, #1
 80058da:	e7a8      	b.n	800582e <_vfiprintf_r+0xfe>
 80058dc:	2300      	movs	r3, #0
 80058de:	3401      	adds	r4, #1
 80058e0:	9305      	str	r3, [sp, #20]
 80058e2:	4619      	mov	r1, r3
 80058e4:	f04f 0c0a 	mov.w	ip, #10
 80058e8:	4620      	mov	r0, r4
 80058ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ee:	3a30      	subs	r2, #48	@ 0x30
 80058f0:	2a09      	cmp	r2, #9
 80058f2:	d903      	bls.n	80058fc <_vfiprintf_r+0x1cc>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0c6      	beq.n	8005886 <_vfiprintf_r+0x156>
 80058f8:	9105      	str	r1, [sp, #20]
 80058fa:	e7c4      	b.n	8005886 <_vfiprintf_r+0x156>
 80058fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005900:	4604      	mov	r4, r0
 8005902:	2301      	movs	r3, #1
 8005904:	e7f0      	b.n	80058e8 <_vfiprintf_r+0x1b8>
 8005906:	ab03      	add	r3, sp, #12
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	462a      	mov	r2, r5
 800590c:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <_vfiprintf_r+0x228>)
 800590e:	a904      	add	r1, sp, #16
 8005910:	4630      	mov	r0, r6
 8005912:	f3af 8000 	nop.w
 8005916:	4607      	mov	r7, r0
 8005918:	1c78      	adds	r0, r7, #1
 800591a:	d1d6      	bne.n	80058ca <_vfiprintf_r+0x19a>
 800591c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800591e:	07d9      	lsls	r1, r3, #31
 8005920:	d405      	bmi.n	800592e <_vfiprintf_r+0x1fe>
 8005922:	89ab      	ldrh	r3, [r5, #12]
 8005924:	059a      	lsls	r2, r3, #22
 8005926:	d402      	bmi.n	800592e <_vfiprintf_r+0x1fe>
 8005928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800592a:	f7ff fddd 	bl	80054e8 <__retarget_lock_release_recursive>
 800592e:	89ab      	ldrh	r3, [r5, #12]
 8005930:	065b      	lsls	r3, r3, #25
 8005932:	f53f af1f 	bmi.w	8005774 <_vfiprintf_r+0x44>
 8005936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005938:	e71e      	b.n	8005778 <_vfiprintf_r+0x48>
 800593a:	ab03      	add	r3, sp, #12
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	462a      	mov	r2, r5
 8005940:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <_vfiprintf_r+0x228>)
 8005942:	a904      	add	r1, sp, #16
 8005944:	4630      	mov	r0, r6
 8005946:	f000 f879 	bl	8005a3c <_printf_i>
 800594a:	e7e4      	b.n	8005916 <_vfiprintf_r+0x1e6>
 800594c:	0800608c 	.word	0x0800608c
 8005950:	08006096 	.word	0x08006096
 8005954:	00000000 	.word	0x00000000
 8005958:	0800570b 	.word	0x0800570b
 800595c:	08006092 	.word	0x08006092

08005960 <_printf_common>:
 8005960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005964:	4616      	mov	r6, r2
 8005966:	4698      	mov	r8, r3
 8005968:	688a      	ldr	r2, [r1, #8]
 800596a:	690b      	ldr	r3, [r1, #16]
 800596c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005970:	4293      	cmp	r3, r2
 8005972:	bfb8      	it	lt
 8005974:	4613      	movlt	r3, r2
 8005976:	6033      	str	r3, [r6, #0]
 8005978:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800597c:	4607      	mov	r7, r0
 800597e:	460c      	mov	r4, r1
 8005980:	b10a      	cbz	r2, 8005986 <_printf_common+0x26>
 8005982:	3301      	adds	r3, #1
 8005984:	6033      	str	r3, [r6, #0]
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	0699      	lsls	r1, r3, #26
 800598a:	bf42      	ittt	mi
 800598c:	6833      	ldrmi	r3, [r6, #0]
 800598e:	3302      	addmi	r3, #2
 8005990:	6033      	strmi	r3, [r6, #0]
 8005992:	6825      	ldr	r5, [r4, #0]
 8005994:	f015 0506 	ands.w	r5, r5, #6
 8005998:	d106      	bne.n	80059a8 <_printf_common+0x48>
 800599a:	f104 0a19 	add.w	sl, r4, #25
 800599e:	68e3      	ldr	r3, [r4, #12]
 80059a0:	6832      	ldr	r2, [r6, #0]
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	42ab      	cmp	r3, r5
 80059a6:	dc26      	bgt.n	80059f6 <_printf_common+0x96>
 80059a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	3b00      	subs	r3, #0
 80059b0:	bf18      	it	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	0692      	lsls	r2, r2, #26
 80059b6:	d42b      	bmi.n	8005a10 <_printf_common+0xb0>
 80059b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059bc:	4641      	mov	r1, r8
 80059be:	4638      	mov	r0, r7
 80059c0:	47c8      	blx	r9
 80059c2:	3001      	adds	r0, #1
 80059c4:	d01e      	beq.n	8005a04 <_printf_common+0xa4>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	6922      	ldr	r2, [r4, #16]
 80059ca:	f003 0306 	and.w	r3, r3, #6
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	bf02      	ittt	eq
 80059d2:	68e5      	ldreq	r5, [r4, #12]
 80059d4:	6833      	ldreq	r3, [r6, #0]
 80059d6:	1aed      	subeq	r5, r5, r3
 80059d8:	68a3      	ldr	r3, [r4, #8]
 80059da:	bf0c      	ite	eq
 80059dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e0:	2500      	movne	r5, #0
 80059e2:	4293      	cmp	r3, r2
 80059e4:	bfc4      	itt	gt
 80059e6:	1a9b      	subgt	r3, r3, r2
 80059e8:	18ed      	addgt	r5, r5, r3
 80059ea:	2600      	movs	r6, #0
 80059ec:	341a      	adds	r4, #26
 80059ee:	42b5      	cmp	r5, r6
 80059f0:	d11a      	bne.n	8005a28 <_printf_common+0xc8>
 80059f2:	2000      	movs	r0, #0
 80059f4:	e008      	b.n	8005a08 <_printf_common+0xa8>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4652      	mov	r2, sl
 80059fa:	4641      	mov	r1, r8
 80059fc:	4638      	mov	r0, r7
 80059fe:	47c8      	blx	r9
 8005a00:	3001      	adds	r0, #1
 8005a02:	d103      	bne.n	8005a0c <_printf_common+0xac>
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a0c:	3501      	adds	r5, #1
 8005a0e:	e7c6      	b.n	800599e <_printf_common+0x3e>
 8005a10:	18e1      	adds	r1, r4, r3
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	2030      	movs	r0, #48	@ 0x30
 8005a16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a1a:	4422      	add	r2, r4
 8005a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a24:	3302      	adds	r3, #2
 8005a26:	e7c7      	b.n	80059b8 <_printf_common+0x58>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	4638      	mov	r0, r7
 8005a30:	47c8      	blx	r9
 8005a32:	3001      	adds	r0, #1
 8005a34:	d0e6      	beq.n	8005a04 <_printf_common+0xa4>
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7d9      	b.n	80059ee <_printf_common+0x8e>
	...

08005a3c <_printf_i>:
 8005a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a40:	7e0f      	ldrb	r7, [r1, #24]
 8005a42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a44:	2f78      	cmp	r7, #120	@ 0x78
 8005a46:	4691      	mov	r9, r2
 8005a48:	4680      	mov	r8, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	469a      	mov	sl, r3
 8005a4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a52:	d807      	bhi.n	8005a64 <_printf_i+0x28>
 8005a54:	2f62      	cmp	r7, #98	@ 0x62
 8005a56:	d80a      	bhi.n	8005a6e <_printf_i+0x32>
 8005a58:	2f00      	cmp	r7, #0
 8005a5a:	f000 80d2 	beq.w	8005c02 <_printf_i+0x1c6>
 8005a5e:	2f58      	cmp	r7, #88	@ 0x58
 8005a60:	f000 80b9 	beq.w	8005bd6 <_printf_i+0x19a>
 8005a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a6c:	e03a      	b.n	8005ae4 <_printf_i+0xa8>
 8005a6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a72:	2b15      	cmp	r3, #21
 8005a74:	d8f6      	bhi.n	8005a64 <_printf_i+0x28>
 8005a76:	a101      	add	r1, pc, #4	@ (adr r1, 8005a7c <_printf_i+0x40>)
 8005a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a7c:	08005ad5 	.word	0x08005ad5
 8005a80:	08005ae9 	.word	0x08005ae9
 8005a84:	08005a65 	.word	0x08005a65
 8005a88:	08005a65 	.word	0x08005a65
 8005a8c:	08005a65 	.word	0x08005a65
 8005a90:	08005a65 	.word	0x08005a65
 8005a94:	08005ae9 	.word	0x08005ae9
 8005a98:	08005a65 	.word	0x08005a65
 8005a9c:	08005a65 	.word	0x08005a65
 8005aa0:	08005a65 	.word	0x08005a65
 8005aa4:	08005a65 	.word	0x08005a65
 8005aa8:	08005be9 	.word	0x08005be9
 8005aac:	08005b13 	.word	0x08005b13
 8005ab0:	08005ba3 	.word	0x08005ba3
 8005ab4:	08005a65 	.word	0x08005a65
 8005ab8:	08005a65 	.word	0x08005a65
 8005abc:	08005c0b 	.word	0x08005c0b
 8005ac0:	08005a65 	.word	0x08005a65
 8005ac4:	08005b13 	.word	0x08005b13
 8005ac8:	08005a65 	.word	0x08005a65
 8005acc:	08005a65 	.word	0x08005a65
 8005ad0:	08005bab 	.word	0x08005bab
 8005ad4:	6833      	ldr	r3, [r6, #0]
 8005ad6:	1d1a      	adds	r2, r3, #4
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6032      	str	r2, [r6, #0]
 8005adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ae0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e09d      	b.n	8005c24 <_printf_i+0x1e8>
 8005ae8:	6833      	ldr	r3, [r6, #0]
 8005aea:	6820      	ldr	r0, [r4, #0]
 8005aec:	1d19      	adds	r1, r3, #4
 8005aee:	6031      	str	r1, [r6, #0]
 8005af0:	0606      	lsls	r6, r0, #24
 8005af2:	d501      	bpl.n	8005af8 <_printf_i+0xbc>
 8005af4:	681d      	ldr	r5, [r3, #0]
 8005af6:	e003      	b.n	8005b00 <_printf_i+0xc4>
 8005af8:	0645      	lsls	r5, r0, #25
 8005afa:	d5fb      	bpl.n	8005af4 <_printf_i+0xb8>
 8005afc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b00:	2d00      	cmp	r5, #0
 8005b02:	da03      	bge.n	8005b0c <_printf_i+0xd0>
 8005b04:	232d      	movs	r3, #45	@ 0x2d
 8005b06:	426d      	negs	r5, r5
 8005b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b0c:	4859      	ldr	r0, [pc, #356]	@ (8005c74 <_printf_i+0x238>)
 8005b0e:	230a      	movs	r3, #10
 8005b10:	e011      	b.n	8005b36 <_printf_i+0xfa>
 8005b12:	6821      	ldr	r1, [r4, #0]
 8005b14:	6833      	ldr	r3, [r6, #0]
 8005b16:	0608      	lsls	r0, r1, #24
 8005b18:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b1c:	d402      	bmi.n	8005b24 <_printf_i+0xe8>
 8005b1e:	0649      	lsls	r1, r1, #25
 8005b20:	bf48      	it	mi
 8005b22:	b2ad      	uxthmi	r5, r5
 8005b24:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b26:	4853      	ldr	r0, [pc, #332]	@ (8005c74 <_printf_i+0x238>)
 8005b28:	6033      	str	r3, [r6, #0]
 8005b2a:	bf14      	ite	ne
 8005b2c:	230a      	movne	r3, #10
 8005b2e:	2308      	moveq	r3, #8
 8005b30:	2100      	movs	r1, #0
 8005b32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b36:	6866      	ldr	r6, [r4, #4]
 8005b38:	60a6      	str	r6, [r4, #8]
 8005b3a:	2e00      	cmp	r6, #0
 8005b3c:	bfa2      	ittt	ge
 8005b3e:	6821      	ldrge	r1, [r4, #0]
 8005b40:	f021 0104 	bicge.w	r1, r1, #4
 8005b44:	6021      	strge	r1, [r4, #0]
 8005b46:	b90d      	cbnz	r5, 8005b4c <_printf_i+0x110>
 8005b48:	2e00      	cmp	r6, #0
 8005b4a:	d04b      	beq.n	8005be4 <_printf_i+0x1a8>
 8005b4c:	4616      	mov	r6, r2
 8005b4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b52:	fb03 5711 	mls	r7, r3, r1, r5
 8005b56:	5dc7      	ldrb	r7, [r0, r7]
 8005b58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b5c:	462f      	mov	r7, r5
 8005b5e:	42bb      	cmp	r3, r7
 8005b60:	460d      	mov	r5, r1
 8005b62:	d9f4      	bls.n	8005b4e <_printf_i+0x112>
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d10b      	bne.n	8005b80 <_printf_i+0x144>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	07df      	lsls	r7, r3, #31
 8005b6c:	d508      	bpl.n	8005b80 <_printf_i+0x144>
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	6861      	ldr	r1, [r4, #4]
 8005b72:	4299      	cmp	r1, r3
 8005b74:	bfde      	ittt	le
 8005b76:	2330      	movle	r3, #48	@ 0x30
 8005b78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b80:	1b92      	subs	r2, r2, r6
 8005b82:	6122      	str	r2, [r4, #16]
 8005b84:	f8cd a000 	str.w	sl, [sp]
 8005b88:	464b      	mov	r3, r9
 8005b8a:	aa03      	add	r2, sp, #12
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	4640      	mov	r0, r8
 8005b90:	f7ff fee6 	bl	8005960 <_printf_common>
 8005b94:	3001      	adds	r0, #1
 8005b96:	d14a      	bne.n	8005c2e <_printf_i+0x1f2>
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	b004      	add	sp, #16
 8005b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	f043 0320 	orr.w	r3, r3, #32
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	4833      	ldr	r0, [pc, #204]	@ (8005c78 <_printf_i+0x23c>)
 8005bac:	2778      	movs	r7, #120	@ 0x78
 8005bae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	6831      	ldr	r1, [r6, #0]
 8005bb6:	061f      	lsls	r7, r3, #24
 8005bb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bbc:	d402      	bmi.n	8005bc4 <_printf_i+0x188>
 8005bbe:	065f      	lsls	r7, r3, #25
 8005bc0:	bf48      	it	mi
 8005bc2:	b2ad      	uxthmi	r5, r5
 8005bc4:	6031      	str	r1, [r6, #0]
 8005bc6:	07d9      	lsls	r1, r3, #31
 8005bc8:	bf44      	itt	mi
 8005bca:	f043 0320 	orrmi.w	r3, r3, #32
 8005bce:	6023      	strmi	r3, [r4, #0]
 8005bd0:	b11d      	cbz	r5, 8005bda <_printf_i+0x19e>
 8005bd2:	2310      	movs	r3, #16
 8005bd4:	e7ac      	b.n	8005b30 <_printf_i+0xf4>
 8005bd6:	4827      	ldr	r0, [pc, #156]	@ (8005c74 <_printf_i+0x238>)
 8005bd8:	e7e9      	b.n	8005bae <_printf_i+0x172>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	f023 0320 	bic.w	r3, r3, #32
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	e7f6      	b.n	8005bd2 <_printf_i+0x196>
 8005be4:	4616      	mov	r6, r2
 8005be6:	e7bd      	b.n	8005b64 <_printf_i+0x128>
 8005be8:	6833      	ldr	r3, [r6, #0]
 8005bea:	6825      	ldr	r5, [r4, #0]
 8005bec:	6961      	ldr	r1, [r4, #20]
 8005bee:	1d18      	adds	r0, r3, #4
 8005bf0:	6030      	str	r0, [r6, #0]
 8005bf2:	062e      	lsls	r6, r5, #24
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	d501      	bpl.n	8005bfc <_printf_i+0x1c0>
 8005bf8:	6019      	str	r1, [r3, #0]
 8005bfa:	e002      	b.n	8005c02 <_printf_i+0x1c6>
 8005bfc:	0668      	lsls	r0, r5, #25
 8005bfe:	d5fb      	bpl.n	8005bf8 <_printf_i+0x1bc>
 8005c00:	8019      	strh	r1, [r3, #0]
 8005c02:	2300      	movs	r3, #0
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	4616      	mov	r6, r2
 8005c08:	e7bc      	b.n	8005b84 <_printf_i+0x148>
 8005c0a:	6833      	ldr	r3, [r6, #0]
 8005c0c:	1d1a      	adds	r2, r3, #4
 8005c0e:	6032      	str	r2, [r6, #0]
 8005c10:	681e      	ldr	r6, [r3, #0]
 8005c12:	6862      	ldr	r2, [r4, #4]
 8005c14:	2100      	movs	r1, #0
 8005c16:	4630      	mov	r0, r6
 8005c18:	f7fa fb02 	bl	8000220 <memchr>
 8005c1c:	b108      	cbz	r0, 8005c22 <_printf_i+0x1e6>
 8005c1e:	1b80      	subs	r0, r0, r6
 8005c20:	6060      	str	r0, [r4, #4]
 8005c22:	6863      	ldr	r3, [r4, #4]
 8005c24:	6123      	str	r3, [r4, #16]
 8005c26:	2300      	movs	r3, #0
 8005c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c2c:	e7aa      	b.n	8005b84 <_printf_i+0x148>
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	4632      	mov	r2, r6
 8005c32:	4649      	mov	r1, r9
 8005c34:	4640      	mov	r0, r8
 8005c36:	47d0      	blx	sl
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d0ad      	beq.n	8005b98 <_printf_i+0x15c>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	079b      	lsls	r3, r3, #30
 8005c40:	d413      	bmi.n	8005c6a <_printf_i+0x22e>
 8005c42:	68e0      	ldr	r0, [r4, #12]
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	4298      	cmp	r0, r3
 8005c48:	bfb8      	it	lt
 8005c4a:	4618      	movlt	r0, r3
 8005c4c:	e7a6      	b.n	8005b9c <_printf_i+0x160>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4632      	mov	r2, r6
 8005c52:	4649      	mov	r1, r9
 8005c54:	4640      	mov	r0, r8
 8005c56:	47d0      	blx	sl
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d09d      	beq.n	8005b98 <_printf_i+0x15c>
 8005c5c:	3501      	adds	r5, #1
 8005c5e:	68e3      	ldr	r3, [r4, #12]
 8005c60:	9903      	ldr	r1, [sp, #12]
 8005c62:	1a5b      	subs	r3, r3, r1
 8005c64:	42ab      	cmp	r3, r5
 8005c66:	dcf2      	bgt.n	8005c4e <_printf_i+0x212>
 8005c68:	e7eb      	b.n	8005c42 <_printf_i+0x206>
 8005c6a:	2500      	movs	r5, #0
 8005c6c:	f104 0619 	add.w	r6, r4, #25
 8005c70:	e7f5      	b.n	8005c5e <_printf_i+0x222>
 8005c72:	bf00      	nop
 8005c74:	0800609d 	.word	0x0800609d
 8005c78:	080060ae 	.word	0x080060ae

08005c7c <__sflush_r>:
 8005c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c84:	0716      	lsls	r6, r2, #28
 8005c86:	4605      	mov	r5, r0
 8005c88:	460c      	mov	r4, r1
 8005c8a:	d454      	bmi.n	8005d36 <__sflush_r+0xba>
 8005c8c:	684b      	ldr	r3, [r1, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	dc02      	bgt.n	8005c98 <__sflush_r+0x1c>
 8005c92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dd48      	ble.n	8005d2a <__sflush_r+0xae>
 8005c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c9a:	2e00      	cmp	r6, #0
 8005c9c:	d045      	beq.n	8005d2a <__sflush_r+0xae>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ca4:	682f      	ldr	r7, [r5, #0]
 8005ca6:	6a21      	ldr	r1, [r4, #32]
 8005ca8:	602b      	str	r3, [r5, #0]
 8005caa:	d030      	beq.n	8005d0e <__sflush_r+0x92>
 8005cac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	0759      	lsls	r1, r3, #29
 8005cb2:	d505      	bpl.n	8005cc0 <__sflush_r+0x44>
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	1ad2      	subs	r2, r2, r3
 8005cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cba:	b10b      	cbz	r3, 8005cc0 <__sflush_r+0x44>
 8005cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cc4:	6a21      	ldr	r1, [r4, #32]
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	47b0      	blx	r6
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	d106      	bne.n	8005cde <__sflush_r+0x62>
 8005cd0:	6829      	ldr	r1, [r5, #0]
 8005cd2:	291d      	cmp	r1, #29
 8005cd4:	d82b      	bhi.n	8005d2e <__sflush_r+0xb2>
 8005cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8005d80 <__sflush_r+0x104>)
 8005cd8:	410a      	asrs	r2, r1
 8005cda:	07d6      	lsls	r6, r2, #31
 8005cdc:	d427      	bmi.n	8005d2e <__sflush_r+0xb2>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	6062      	str	r2, [r4, #4]
 8005ce2:	04d9      	lsls	r1, r3, #19
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	6022      	str	r2, [r4, #0]
 8005ce8:	d504      	bpl.n	8005cf4 <__sflush_r+0x78>
 8005cea:	1c42      	adds	r2, r0, #1
 8005cec:	d101      	bne.n	8005cf2 <__sflush_r+0x76>
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	b903      	cbnz	r3, 8005cf4 <__sflush_r+0x78>
 8005cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cf6:	602f      	str	r7, [r5, #0]
 8005cf8:	b1b9      	cbz	r1, 8005d2a <__sflush_r+0xae>
 8005cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cfe:	4299      	cmp	r1, r3
 8005d00:	d002      	beq.n	8005d08 <__sflush_r+0x8c>
 8005d02:	4628      	mov	r0, r5
 8005d04:	f7ff fbf2 	bl	80054ec <_free_r>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d0c:	e00d      	b.n	8005d2a <__sflush_r+0xae>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b0      	blx	r6
 8005d14:	4602      	mov	r2, r0
 8005d16:	1c50      	adds	r0, r2, #1
 8005d18:	d1c9      	bne.n	8005cae <__sflush_r+0x32>
 8005d1a:	682b      	ldr	r3, [r5, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0c6      	beq.n	8005cae <__sflush_r+0x32>
 8005d20:	2b1d      	cmp	r3, #29
 8005d22:	d001      	beq.n	8005d28 <__sflush_r+0xac>
 8005d24:	2b16      	cmp	r3, #22
 8005d26:	d11e      	bne.n	8005d66 <__sflush_r+0xea>
 8005d28:	602f      	str	r7, [r5, #0]
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	e022      	b.n	8005d74 <__sflush_r+0xf8>
 8005d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d32:	b21b      	sxth	r3, r3
 8005d34:	e01b      	b.n	8005d6e <__sflush_r+0xf2>
 8005d36:	690f      	ldr	r7, [r1, #16]
 8005d38:	2f00      	cmp	r7, #0
 8005d3a:	d0f6      	beq.n	8005d2a <__sflush_r+0xae>
 8005d3c:	0793      	lsls	r3, r2, #30
 8005d3e:	680e      	ldr	r6, [r1, #0]
 8005d40:	bf08      	it	eq
 8005d42:	694b      	ldreq	r3, [r1, #20]
 8005d44:	600f      	str	r7, [r1, #0]
 8005d46:	bf18      	it	ne
 8005d48:	2300      	movne	r3, #0
 8005d4a:	eba6 0807 	sub.w	r8, r6, r7
 8005d4e:	608b      	str	r3, [r1, #8]
 8005d50:	f1b8 0f00 	cmp.w	r8, #0
 8005d54:	dde9      	ble.n	8005d2a <__sflush_r+0xae>
 8005d56:	6a21      	ldr	r1, [r4, #32]
 8005d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d5a:	4643      	mov	r3, r8
 8005d5c:	463a      	mov	r2, r7
 8005d5e:	4628      	mov	r0, r5
 8005d60:	47b0      	blx	r6
 8005d62:	2800      	cmp	r0, #0
 8005d64:	dc08      	bgt.n	8005d78 <__sflush_r+0xfc>
 8005d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d78:	4407      	add	r7, r0
 8005d7a:	eba8 0800 	sub.w	r8, r8, r0
 8005d7e:	e7e7      	b.n	8005d50 <__sflush_r+0xd4>
 8005d80:	dfbffffe 	.word	0xdfbffffe

08005d84 <_fflush_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	690b      	ldr	r3, [r1, #16]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	b913      	cbnz	r3, 8005d94 <_fflush_r+0x10>
 8005d8e:	2500      	movs	r5, #0
 8005d90:	4628      	mov	r0, r5
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	b118      	cbz	r0, 8005d9e <_fflush_r+0x1a>
 8005d96:	6a03      	ldr	r3, [r0, #32]
 8005d98:	b90b      	cbnz	r3, 8005d9e <_fflush_r+0x1a>
 8005d9a:	f7ff f957 	bl	800504c <__sinit>
 8005d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f3      	beq.n	8005d8e <_fflush_r+0xa>
 8005da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005da8:	07d0      	lsls	r0, r2, #31
 8005daa:	d404      	bmi.n	8005db6 <_fflush_r+0x32>
 8005dac:	0599      	lsls	r1, r3, #22
 8005dae:	d402      	bmi.n	8005db6 <_fflush_r+0x32>
 8005db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005db2:	f7ff fb98 	bl	80054e6 <__retarget_lock_acquire_recursive>
 8005db6:	4628      	mov	r0, r5
 8005db8:	4621      	mov	r1, r4
 8005dba:	f7ff ff5f 	bl	8005c7c <__sflush_r>
 8005dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dc0:	07da      	lsls	r2, r3, #31
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	d4e4      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	059b      	lsls	r3, r3, #22
 8005dca:	d4e1      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dce:	f7ff fb8b 	bl	80054e8 <__retarget_lock_release_recursive>
 8005dd2:	e7dd      	b.n	8005d90 <_fflush_r+0xc>

08005dd4 <__swhatbuf_r>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	b096      	sub	sp, #88	@ 0x58
 8005de0:	4615      	mov	r5, r2
 8005de2:	461e      	mov	r6, r3
 8005de4:	da0d      	bge.n	8005e02 <__swhatbuf_r+0x2e>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005dec:	f04f 0100 	mov.w	r1, #0
 8005df0:	bf14      	ite	ne
 8005df2:	2340      	movne	r3, #64	@ 0x40
 8005df4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005df8:	2000      	movs	r0, #0
 8005dfa:	6031      	str	r1, [r6, #0]
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	b016      	add	sp, #88	@ 0x58
 8005e00:	bd70      	pop	{r4, r5, r6, pc}
 8005e02:	466a      	mov	r2, sp
 8005e04:	f000 f848 	bl	8005e98 <_fstat_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	dbec      	blt.n	8005de6 <__swhatbuf_r+0x12>
 8005e0c:	9901      	ldr	r1, [sp, #4]
 8005e0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e16:	4259      	negs	r1, r3
 8005e18:	4159      	adcs	r1, r3
 8005e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e1e:	e7eb      	b.n	8005df8 <__swhatbuf_r+0x24>

08005e20 <__smakebuf_r>:
 8005e20:	898b      	ldrh	r3, [r1, #12]
 8005e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e24:	079d      	lsls	r5, r3, #30
 8005e26:	4606      	mov	r6, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	d507      	bpl.n	8005e3c <__smakebuf_r+0x1c>
 8005e2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	2301      	movs	r3, #1
 8005e36:	6163      	str	r3, [r4, #20]
 8005e38:	b003      	add	sp, #12
 8005e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3c:	ab01      	add	r3, sp, #4
 8005e3e:	466a      	mov	r2, sp
 8005e40:	f7ff ffc8 	bl	8005dd4 <__swhatbuf_r>
 8005e44:	9f00      	ldr	r7, [sp, #0]
 8005e46:	4605      	mov	r5, r0
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f7ff fbba 	bl	80055c4 <_malloc_r>
 8005e50:	b948      	cbnz	r0, 8005e66 <__smakebuf_r+0x46>
 8005e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e56:	059a      	lsls	r2, r3, #22
 8005e58:	d4ee      	bmi.n	8005e38 <__smakebuf_r+0x18>
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	f043 0302 	orr.w	r3, r3, #2
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	e7e2      	b.n	8005e2c <__smakebuf_r+0xc>
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	6020      	str	r0, [r4, #0]
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e76:	b15b      	cbz	r3, 8005e90 <__smakebuf_r+0x70>
 8005e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f000 f81d 	bl	8005ebc <_isatty_r>
 8005e82:	b128      	cbz	r0, 8005e90 <__smakebuf_r+0x70>
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	431d      	orrs	r5, r3
 8005e94:	81a5      	strh	r5, [r4, #12]
 8005e96:	e7cf      	b.n	8005e38 <__smakebuf_r+0x18>

08005e98 <_fstat_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d07      	ldr	r5, [pc, #28]	@ (8005eb8 <_fstat_r+0x20>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	602b      	str	r3, [r5, #0]
 8005ea6:	f7fa feea 	bl	8000c7e <_fstat>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d102      	bne.n	8005eb4 <_fstat_r+0x1c>
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	b103      	cbz	r3, 8005eb4 <_fstat_r+0x1c>
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20002b1c 	.word	0x20002b1c

08005ebc <_isatty_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4d06      	ldr	r5, [pc, #24]	@ (8005ed8 <_isatty_r+0x1c>)
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f7fa fee9 	bl	8000c9e <_isatty>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_isatty_r+0x1a>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_isatty_r+0x1a>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	20002b1c 	.word	0x20002b1c

08005edc <_sbrk_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d06      	ldr	r5, [pc, #24]	@ (8005ef8 <_sbrk_r+0x1c>)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	602b      	str	r3, [r5, #0]
 8005ee8:	f7fa fef2 	bl	8000cd0 <_sbrk>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_sbrk_r+0x1a>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_sbrk_r+0x1a>
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	20002b1c 	.word	0x20002b1c

08005efc <_init>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	bf00      	nop
 8005f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f02:	bc08      	pop	{r3}
 8005f04:	469e      	mov	lr, r3
 8005f06:	4770      	bx	lr

08005f08 <_fini>:
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	bf00      	nop
 8005f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0e:	bc08      	pop	{r3}
 8005f10:	469e      	mov	lr, r3
 8005f12:	4770      	bx	lr
